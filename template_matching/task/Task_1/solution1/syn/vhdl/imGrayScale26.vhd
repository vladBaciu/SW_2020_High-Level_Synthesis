-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imGrayScale26 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imINPUT_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    imINPUT_empty_n : IN STD_LOGIC;
    imINPUT_read : OUT STD_LOGIC;
    imOUTPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imOUTPUT_ce0 : OUT STD_LOGIC;
    imOUTPUT_we0 : OUT STD_LOGIC;
    imOUTPUT_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    imWidth : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of imGrayScale26 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_3FD322D0E5604189 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000101101000011100101011000000100000110001001";
    constant ap_const_lv64_4B0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010110000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal imINPUT_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_18_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_174 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_63_fu_180_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_63_reg_405 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_reg_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_4_fu_199_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_4_reg_418 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_1_fu_214_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_1_reg_426 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_fu_224_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_43_reg_431 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_64_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_reg_436 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_cast_reg_441 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_cast_reg_446 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_cast_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_461 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_476 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_reg_481 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_486 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_reg_491 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal loc_V_8_fu_279_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_8_reg_497 : STD_LOGIC_VECTOR (51 downto 0);
    signal result_V_fu_374_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal row_reg_120 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_mul_reg_131 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_reg_142 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_50_cast_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_153_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_220_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_s_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_283_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i_cast_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_297_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_17_fu_311_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_cast_fu_316_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_8_fu_320_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_i_i_cast_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_i_i_cast_fu_336_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_290_p1 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_61_i_i_fu_332_p1 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_62_i_i_fu_340_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_67_fu_352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_i_i_fu_346_p2 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_44_fu_360_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_364_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component imTemplateMatchinbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imTemplateMatchincud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imTemplateMatchindEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    imTemplateMatchinbkb_U1 : component imTemplateMatchinbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_153_p0,
        din1 => grp_fu_153_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);

    imTemplateMatchincud_U2 : component imTemplateMatchincud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_157_p0,
        din1 => grp_fu_157_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);

    imTemplateMatchincud_U3 : component imTemplateMatchincud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_26_reg_466,
        din1 => ap_const_lv64_3FD322D0E5604189,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    imTemplateMatchindEe_U4 : component imTemplateMatchindEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p1);

    imTemplateMatchindEe_U5 : component imTemplateMatchindEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
                col_reg_142 <= col_1_reg_426;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_s_fu_194_p2)))) then 
                col_reg_142 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (tmp_18_fu_209_p2 = ap_const_lv1_0) and not((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and (imINPUT_empty_n = ap_const_logic_0))))) then 
                phi_mul_reg_131 <= next_mul_reg_410;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_131 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (tmp_18_fu_209_p2 = ap_const_lv1_0) and not((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and (imINPUT_empty_n = ap_const_logic_0))))) then 
                row_reg_120 <= row_4_reg_418;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                row_reg_120 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and (imINPUT_empty_n = ap_const_logic_0))))) then
                col_1_reg_426 <= col_1_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then
                loc_V_8_reg_497 <= loc_V_8_fu_279_p1;
                loc_V_reg_491 <= p_Val2_s_fu_265_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                next_mul_reg_410 <= next_mul_fu_184_p2;
                row_4_reg_418 <= row_4_fu_199_p2;
                tmp_63_reg_405 <= tmp_63_fu_180_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)))) then
                reg_174 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then
                result_V_reg_502 <= result_V_fu_374_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                tmp_22_reg_461 <= grp_fu_168_p1;
                tmp_26_reg_466 <= grp_fu_171_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and not((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and (imINPUT_empty_n = ap_const_logic_0))))) then
                tmp_24_cast_reg_441 <= imINPUT_dout(15 downto 8);
                tmp_29_cast_reg_446 <= imINPUT_dout(23 downto 16);
                tmp_43_reg_431 <= tmp_43_fu_224_p2;
                tmp_64_reg_436 <= tmp_64_fu_229_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                tmp_27_reg_481 <= grp_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                tmp_28_reg_486 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                tmp_29_reg_476 <= grp_fu_168_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, imINPUT_empty_n, tmp_18_fu_209_p2, tmp_s_fu_194_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_s_fu_194_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_18_fu_209_p2 = ap_const_lv1_0) and not((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and (imINPUT_empty_n = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and not((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and (imINPUT_empty_n = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_194_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_s_fu_194_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_194_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_s_fu_194_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_214_p2 <= std_logic_vector(unsigned(col_reg_142) + unsigned(ap_const_lv11_1));

    grp_fu_153_p0_assign_proc : process(reg_174, tmp_28_reg_486, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_153_p0 <= tmp_28_reg_486;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            grp_fu_153_p0 <= reg_174;
        else 
            grp_fu_153_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_153_p1_assign_proc : process(reg_174, tmp_27_reg_481, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_153_p1 <= reg_174;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            grp_fu_153_p1 <= tmp_27_reg_481;
        else 
            grp_fu_153_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_157_p0_assign_proc : process(ap_CS_fsm_state15, tmp_22_reg_461, tmp_29_reg_476, ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            grp_fu_157_p0 <= tmp_29_reg_476;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            grp_fu_157_p0 <= tmp_22_reg_461;
        else 
            grp_fu_157_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_157_p1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            grp_fu_157_p1 <= ap_const_lv64_3FE2C8B439581062;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            grp_fu_157_p1 <= ap_const_lv64_3FBD2F1A9FBE76C9;
        else 
            grp_fu_157_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p0_assign_proc : process(tmp_21_cast_fu_253_p1, ap_CS_fsm_state4, ap_CS_fsm_state9, tmp_30_cast_fu_261_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            grp_fu_168_p0 <= tmp_30_cast_fu_261_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            grp_fu_168_p0 <= tmp_21_cast_fu_253_p1;
        else 
            grp_fu_168_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_171_p0 <= std_logic_vector(resize(unsigned(tmp_24_cast_reg_441),32));

    imINPUT_blk_n_assign_proc : process(imINPUT_empty_n, ap_CS_fsm_state3, tmp_18_fu_209_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_18_fu_209_p2 = ap_const_lv1_0)))) then 
            imINPUT_blk_n <= imINPUT_empty_n;
        else 
            imINPUT_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imINPUT_read_assign_proc : process(imINPUT_empty_n, ap_CS_fsm_state3, tmp_18_fu_209_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and not((not((tmp_18_fu_209_p2 = ap_const_lv1_0)) and (imINPUT_empty_n = ap_const_logic_0))))) then 
            imINPUT_read <= ap_const_logic_1;
        else 
            imINPUT_read <= ap_const_logic_0;
        end if; 
    end process;

    imOUTPUT_address0 <= tmp_50_cast_fu_382_p1(21 - 1 downto 0);

    imOUTPUT_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state28)))) then 
            imOUTPUT_ce0 <= ap_const_logic_1;
        else 
            imOUTPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imOUTPUT_d0 <= (((result_V_reg_502 & result_V_reg_502) & result_V_reg_502) & result_V_reg_502);

    imOUTPUT_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state27)))) then 
            imOUTPUT_we0 <= ap_const_logic_1;
        else 
            imOUTPUT_we0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_303_p3 <= sh_assign_fu_297_p2(11 downto 11);
    loc_V_8_fu_279_p1 <= p_Val2_s_fu_265_p1(52 - 1 downto 0);
    next_mul_fu_184_p2 <= std_logic_vector(unsigned(ap_const_lv64_4B0) + unsigned(phi_mul_reg_131));
    p_Result_s_fu_283_p3 <= (ap_const_lv1_1 & loc_V_8_reg_497);
    p_Val2_s_fu_265_p1 <= grp_fu_153_p2;
    result_V_fu_374_p3 <= 
        tmp_44_fu_360_p1 when (isNeg_fu_303_p3(0) = '1') else 
        tmp_45_fu_364_p4;
    row_4_fu_199_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(row_reg_120));
        sh_assign_1_i_i_cast_fu_328_p1 <= std_logic_vector(resize(signed(sh_assign_8_fu_320_p3),32));

    sh_assign_8_fu_320_p3 <= 
        tmp_i_i_cast_fu_316_p1 when (isNeg_fu_303_p3(0) = '1') else 
        sh_assign_fu_297_p2;
    sh_assign_fu_297_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_cast_fu_294_p1));
        tmp_17_fu_205_p1 <= std_logic_vector(resize(signed(col_reg_142),32));

    tmp_18_fu_209_p2 <= "1" when (signed(tmp_17_fu_205_p1) < signed(imWidth)) else "0";
        tmp_20_cast_fu_220_p1 <= std_logic_vector(resize(signed(col_reg_142),22));

    tmp_21_cast_fu_253_p1 <= std_logic_vector(resize(unsigned(tmp_64_reg_436),32));
    tmp_30_cast_fu_261_p1 <= std_logic_vector(resize(unsigned(tmp_29_cast_reg_446),32));
    tmp_43_fu_224_p2 <= std_logic_vector(signed(tmp_20_cast_fu_220_p1) + signed(tmp_63_reg_405));
    tmp_44_fu_360_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_352_p3),8));
    tmp_45_fu_364_p4 <= tmp_63_i_i_fu_346_p2(59 downto 52);
    tmp_50_cast_fu_382_p1 <= std_logic_vector(resize(unsigned(tmp_43_reg_431),64));
    tmp_61_i_i_cast_fu_336_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_i_i_cast_fu_328_p1),53));
    tmp_61_i_i_fu_332_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_i_i_cast_fu_328_p1),112));
    tmp_62_i_i_fu_340_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_283_p3),to_integer(unsigned('0' & tmp_61_i_i_cast_fu_336_p1(31-1 downto 0)))));
    tmp_63_fu_180_p1 <= phi_mul_reg_131(22 - 1 downto 0);
    tmp_63_i_i_fu_346_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_290_p1),to_integer(unsigned('0' & tmp_61_i_i_fu_332_p1(31-1 downto 0)))));
    tmp_64_fu_229_p1 <= imINPUT_dout(8 - 1 downto 0);
    tmp_67_fu_352_p3 <= tmp_62_i_i_fu_340_p2(52 downto 52);
        tmp_fu_190_p1 <= std_logic_vector(resize(signed(row_reg_120),32));

    tmp_i_i_17_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_reg_491));
        tmp_i_i_cast_fu_316_p1 <= std_logic_vector(resize(signed(tmp_i_i_17_fu_311_p2),12));

    tmp_i_i_fu_290_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_283_p3),112));
    tmp_i_i_i_cast_fu_294_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_491),12));
    tmp_s_fu_194_p2 <= "1" when (signed(tmp_fu_190_p1) < signed(imHeight)) else "0";
end behav;
