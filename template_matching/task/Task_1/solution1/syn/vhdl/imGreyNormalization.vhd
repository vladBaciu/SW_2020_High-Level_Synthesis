-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imGreyNormalization is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imINPUT_ce0 : OUT STD_LOGIC;
    imINPUT_we0 : OUT STD_LOGIC;
    imINPUT_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    imHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    imWidth : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of imGreyNormalization is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv42_4B0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010010110000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_1010101 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000010000000100000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_22_fu_229_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_22_reg_602 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal next_mul_fu_233_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul_reg_607 : STD_LOGIC_VECTOR (41 downto 0);
    signal row_2_fu_248_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_2_reg_615 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_2_fu_270_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_2_reg_628 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_4_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_638 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_24_fu_348_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_24_reg_643 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal next_mul3_fu_352_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul3_reg_648 : STD_LOGIC_VECTOR (41 downto 0);
    signal row_3_fu_367_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_3_reg_656 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_3_fu_382_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_3_reg_664 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal imOUTPUT_addr_1_reg_669 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_9_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_13_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_14_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_reg_690 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_695 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal p_Result_s_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal p_Val2_4_fu_546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal row_reg_127 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_138 : STD_LOGIC_VECTOR (41 downto 0);
    signal col_reg_149 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal row_1_reg_160 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul2_reg_171 : STD_LOGIC_VECTOR (41 downto 0);
    signal col_1_reg_182 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_21_cast_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_5_cast_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_4_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_6_max_1_cast_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_5_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_cast_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_cast_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_276_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_fu_280_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal max_6_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_6_cast_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_6_cast2_fu_294_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_29_fu_308_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal max_6_max_1_fu_312_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_1_cast_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_1_cast_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_388_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_16_fu_392_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_31_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_cast_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_448_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_452_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_fu_438_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_cast1_fu_464_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_468_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_13_fu_482_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_cast_fu_488_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_492_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_i_i_cast_fu_508_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_460_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_66_i_i_fu_504_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_67_i_i_fu_512_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_36_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_i_i_fu_518_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_18_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_536_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i_i_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);

    component imTemplateMatchinbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imTemplateMatchineOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imTemplateMatchindEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imTemplateMatchinfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    imTemplateMatchinbkb_x_U10 : component imTemplateMatchinbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_15_reg_690,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    imTemplateMatchineOg_U11 : component imTemplateMatchineOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_14_reg_685,
        din1 => tmp_3_reg_638,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    imTemplateMatchindEe_x_U12 : component imTemplateMatchindEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p1);

    imTemplateMatchinfYi_U13 : component imTemplateMatchinfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 26,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => p_Val2_s_reg_711,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_1_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state70))) then 
                col_1_reg_182 <= col_3_reg_664;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state15) and not((ap_const_lv1_0 = tmp_5_fu_362_p2)))) then 
                col_1_reg_182 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    col_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                col_reg_149 <= col_2_reg_628;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((tmp_fu_243_p2 = ap_const_lv1_0)))) then 
                col_reg_149 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    max_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                max_1_fu_78 <= max_4_fu_330_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                max_1_fu_78 <= max_5_cast_fu_215_p1;
            end if; 
        end if;
    end process;

    max_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                                max_fu_82(30 downto 0) <= max_6_max_1_cast_fu_320_p1(30 downto 0);
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                                max_fu_82(30 downto 0) <= max_5_cast_fu_215_p1(30 downto 0);
            end if; 
        end if;
    end process;

    phi_mul2_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                phi_mul2_reg_171 <= ap_const_lv42_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_9_fu_377_p2))) then 
                phi_mul2_reg_171 <= next_mul3_reg_648;
            end if; 
        end if;
    end process;

    phi_mul_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_4_fu_265_p2))) then 
                phi_mul_reg_138 <= next_mul_reg_607;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_138 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    row_1_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
                row_1_reg_160 <= ap_const_lv31_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_9_fu_377_p2))) then 
                row_1_reg_160 <= row_3_reg_656;
            end if; 
        end if;
    end process;

    row_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_4_fu_265_p2))) then 
                row_reg_127 <= row_2_reg_615;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                row_reg_127 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                col_2_reg_628 <= col_2_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                col_3_reg_664 <= col_3_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = tmp_9_fu_377_p2)))) then
                imOUTPUT_addr_1_reg_669 <= tmp_23_cast_fu_397_p1(21 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                next_mul3_reg_648 <= next_mul3_fu_352_p2;
                row_3_reg_656 <= row_3_fu_367_p2;
                tmp_24_reg_643 <= tmp_24_fu_348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                next_mul_reg_607 <= next_mul_fu_233_p2;
                row_2_reg_615 <= row_2_fu_248_p2;
                tmp_22_reg_602 <= tmp_22_fu_229_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state62))) then
                p_Result_s_reg_700 <= p_Val2_1_fu_427_p1(63 downto 63);
                p_Val2_4_reg_705 <= p_Val2_4_fu_546_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state63))) then
                p_Val2_s_reg_711 <= p_Val2_s_fu_559_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then
                tmp_12_reg_674 <= tmp_12_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then
                tmp_14_reg_685 <= grp_fu_202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then
                tmp_15_reg_690 <= grp_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                tmp_3_reg_638 <= grp_fu_202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state61))) then
                x_assign_reg_695 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    max_fu_82(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_243_p2, tmp_4_fu_265_p2, tmp_9_fu_377_p2, tmp_5_fu_362_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (not((tmp_fu_243_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state6 => 
                if ((ap_const_lv1_0 = tmp_4_fu_265_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if ((ap_const_lv1_0 = tmp_5_fu_362_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if ((ap_const_lv1_0 = tmp_9_fu_377_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state56 <= ap_CS_fsm(55 downto 55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56 downto 56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state61 <= ap_CS_fsm(60 downto 60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61 downto 61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62 downto 62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63 downto 63);
    ap_CS_fsm_state69 <= ap_CS_fsm(68 downto 68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69 downto 69);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, tmp_5_fu_362_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_5_fu_362_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, tmp_5_fu_362_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_5_fu_362_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_cast_fu_373_p1 <= std_logic_vector(resize(unsigned(col_1_reg_182),32));
    col_2_fu_270_p2 <= std_logic_vector(unsigned(col_reg_149) + unsigned(ap_const_lv31_1));
    col_3_fu_382_p2 <= std_logic_vector(unsigned(col_1_reg_182) + unsigned(ap_const_lv31_1));
    col_cast_fu_261_p1 <= std_logic_vector(resize(unsigned(col_reg_149),32));

    grp_fu_202_p0_assign_proc : process(ap_CS_fsm_state5, tmp_2_fu_254_p2, tmp_13_fu_421_p2, ap_CS_fsm_state20)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            grp_fu_202_p0 <= tmp_13_fu_421_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            grp_fu_202_p0 <= tmp_2_fu_254_p2;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_565_p0 <= ap_const_lv32_1010101(26 - 1 downto 0);

    imINPUT_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state16, imOUTPUT_addr_1_reg_669, ap_CS_fsm_state69, tmp_21_cast_fu_285_p1, tmp_23_cast_fu_397_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state69))) then 
            imINPUT_address0 <= imOUTPUT_addr_1_reg_669;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            imINPUT_address0 <= tmp_23_cast_fu_397_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            imINPUT_address0 <= tmp_21_cast_fu_285_p1(21 - 1 downto 0);
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            imINPUT_address0 <= ap_const_lv64_0(21 - 1 downto 0);
        else 
            imINPUT_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    imINPUT_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state69, ap_CS_fsm_state9, ap_CS_fsm_state70, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state69)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state70)) or ((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            imINPUT_ce0 <= ap_const_logic_1;
        else 
            imINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imINPUT_d0 <= grp_fu_565_p2;

    imINPUT_we0_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state69)))) then 
            imINPUT_we0 <= ap_const_logic_1;
        else 
            imINPUT_we0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_474_p3 <= sh_assign_fu_468_p2(11 downto 11);
    loc_V_1_fu_448_p1 <= p_Val2_1_fu_427_p1(52 - 1 downto 0);
    loc_V_fu_438_p4 <= p_Val2_1_fu_427_p1(62 downto 52);
    max_4_fu_330_p3 <= 
        max_6_cast_fu_298_p1 when (tmp_7_fu_324_p2(0) = '1') else 
        max_1_fu_78;
    max_5_cast_fu_215_p1 <= std_logic_vector(resize(unsigned(max_5_fu_211_p1),32));
    max_5_fu_211_p1 <= imINPUT_q0(8 - 1 downto 0);
    max_6_cast2_fu_294_p1 <= std_logic_vector(resize(unsigned(max_6_fu_290_p1),31));
    max_6_cast_fu_298_p1 <= std_logic_vector(resize(unsigned(max_6_fu_290_p1),32));
    max_6_fu_290_p1 <= imINPUT_q0(8 - 1 downto 0);
    max_6_max_1_cast_fu_320_p1 <= std_logic_vector(resize(unsigned(max_6_max_1_fu_312_p3),32));
    max_6_max_1_fu_312_p3 <= 
        max_6_cast2_fu_294_p1 when (tmp_8_fu_302_p2(0) = '1') else 
        tmp_29_fu_308_p1;
    next_mul3_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv42_4B0) + unsigned(phi_mul2_reg_171));
    next_mul_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv42_4B0) + unsigned(phi_mul_reg_138));
    p_Result_1_fu_452_p3 <= (ap_const_lv1_1 & loc_V_1_fu_448_p1);
    p_Val2_1_fu_427_p1 <= x_assign_reg_695;
    p_Val2_4_fu_546_p3 <= 
        tmp_18_fu_532_p1 when (isNeg_fu_474_p3(0) = '1') else 
        tmp_19_fu_536_p4;
    p_Val2_i_i_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_reg_705));
    p_Val2_s_fu_559_p3 <= 
        p_Val2_i_i_fu_554_p2 when (p_Result_s_reg_700(0) = '1') else 
        p_Val2_4_reg_705;
    row_1_cast_fu_358_p1 <= std_logic_vector(resize(unsigned(row_1_reg_160),32));
    row_2_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(row_reg_127));
    row_3_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(row_1_reg_160));
    row_cast_fu_239_p1 <= std_logic_vector(resize(unsigned(row_reg_127),32));
        sh_assign_1_cast_fu_500_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_492_p3),32));

    sh_assign_1_fu_492_p3 <= 
        tmp_i_i_cast_fu_488_p1 when (isNeg_fu_474_p3(0) = '1') else 
        sh_assign_fu_468_p2;
    sh_assign_fu_468_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_cast1_fu_464_p1));
    tmp_11_cast_fu_406_p1 <= std_logic_vector(resize(unsigned(tmp_31_fu_402_p1),32));
    tmp_12_fu_410_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_406_p1) - unsigned(max_1_fu_78));
    tmp_13_fu_421_p2 <= std_logic_vector(unsigned(tmp_32_fu_416_p2) - unsigned(tmp_12_reg_674));
    tmp_16_fu_392_p2 <= std_logic_vector(unsigned(tmp_30_fu_388_p1) + unsigned(tmp_24_reg_643));
    tmp_18_fu_532_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_524_p3),32));
    tmp_19_fu_536_p4 <= tmp_68_i_i_fu_518_p2(83 downto 52);
    tmp_21_cast_fu_285_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_280_p2),64));
    tmp_22_fu_229_p1 <= phi_mul_reg_138(22 - 1 downto 0);
    tmp_23_cast_fu_397_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_392_p2),64));
    tmp_24_fu_348_p1 <= phi_mul2_reg_171(22 - 1 downto 0);
    tmp_25_fu_276_p1 <= col_reg_149(22 - 1 downto 0);
    tmp_29_fu_308_p1 <= max_fu_82(31 - 1 downto 0);
    tmp_2_fu_254_p2 <= std_logic_vector(unsigned(max_fu_82) - unsigned(max_1_fu_78));
    tmp_30_fu_388_p1 <= col_1_reg_182(22 - 1 downto 0);
    tmp_31_fu_402_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_32_fu_416_p2 <= std_logic_vector(shift_left(unsigned(tmp_12_reg_674),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_36_fu_524_p3 <= tmp_67_i_i_fu_512_p2(52 downto 52);
    tmp_4_fu_265_p2 <= "1" when (signed(col_cast_fu_261_p1) < signed(imWidth)) else "0";
    tmp_5_fu_362_p2 <= "1" when (signed(row_1_cast_fu_358_p1) < signed(imHeight)) else "0";
    tmp_66_i_i_cast_fu_508_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_500_p1),53));
    tmp_66_i_i_fu_504_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_500_p1),136));
    tmp_67_i_i_fu_512_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_452_p3),to_integer(unsigned('0' & tmp_66_i_i_cast_fu_508_p1(31-1 downto 0)))));
    tmp_68_i_i_fu_518_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_460_p1),to_integer(unsigned('0' & tmp_66_i_i_fu_504_p1(31-1 downto 0)))));
    tmp_6_fu_280_p2 <= std_logic_vector(unsigned(tmp_25_fu_276_p1) + unsigned(tmp_22_reg_602));
    tmp_7_fu_324_p2 <= "1" when (signed(max_6_cast_fu_298_p1) < signed(max_1_fu_78)) else "0";
    tmp_8_fu_302_p2 <= "1" when (signed(max_6_cast_fu_298_p1) > signed(max_fu_82)) else "0";
    tmp_9_fu_377_p2 <= "1" when (signed(col_1_cast_fu_373_p1) < signed(imWidth)) else "0";
    tmp_fu_243_p2 <= "1" when (signed(row_cast_fu_239_p1) < signed(imHeight)) else "0";
    tmp_i_i_13_fu_482_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_438_p4));
        tmp_i_i_cast_fu_488_p1 <= std_logic_vector(resize(signed(tmp_i_i_13_fu_482_p2),12));

    tmp_i_i_fu_460_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_452_p3),136));
    tmp_i_i_i_cast1_fu_464_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_438_p4),12));
end behav;
