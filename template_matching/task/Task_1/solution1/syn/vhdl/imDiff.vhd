-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imDiff is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imINPUT_ce0 : OUT STD_LOGIC;
    imINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    imHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    imWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    tplINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    tplINPUT_ce0 : OUT STD_LOGIC;
    tplINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tplHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    tplWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of imDiff is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv42_4B0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010010110000";
    constant ap_const_lv22_4B0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010010110000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_y_cast_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_y_cast_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_img_fu_233_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_img_reg_518 : STD_LOGIC_VECTOR (30 downto 0);
    signal output_struct_x_cast_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_x_cast_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal col_img_fu_260_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_img_reg_531 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_45_fu_266_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_45_reg_536 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_mul_fu_270_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul_reg_541 : STD_LOGIC_VECTOR (41 downto 0);
    signal row_tpl_1_fu_285_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_tpl_1_reg_549 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_36_fu_305_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_36_reg_554 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_34_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_tpl_1_fu_378_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_tpl_1_reg_562 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_40_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_438_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_reg_577 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal SAD_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal output_struct_y_reg_120 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_32_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_struct_x_reg_132 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_tpl_reg_144 : STD_LOGIC_VECTOR (30 downto 0);
    signal minSAD_1_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_167 : STD_LOGIC_VECTOR (41 downto 0);
    signal col_tpl_reg_178 : STD_LOGIC_VECTOR (30 downto 0);
    signal SAD_1_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_cast_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal minSAD_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_SAD_0_s_fu_346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_y_writ_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_y_0_ou_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_x_writ_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_struct_x_0_ou_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal row_tpl_cast_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_295_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_46_fu_291_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_51_fu_299_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_37_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_tpl_cast_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_388_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_52_fu_384_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_54_fu_392_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_41_fu_398_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_56_fu_408_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_42_fu_412_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal search_img_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal template_img_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_img_cast_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal template_img_cast_fu_434_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_fu_454_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_cast_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    SAD_1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                SAD_1_reg_189 <= SAD_fu_465_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_34_fu_280_p2 = ap_const_lv1_0)))) then 
                SAD_1_reg_189 <= minSAD_1_reg_155;
            end if; 
        end if;
    end process;

    col_tpl_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                col_tpl_reg_178 <= col_tpl_1_reg_562;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_34_fu_280_p2 = ap_const_lv1_0)))) then 
                col_tpl_reg_178 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    minSAD_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_40_fu_373_p2))) then 
                minSAD_1_reg_155 <= SAD_1_reg_189;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_32_fu_255_p2)))) then 
                minSAD_1_reg_155 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minSAD_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_34_fu_280_p2 = ap_const_lv1_0))) then 
                minSAD_fu_60 <= output_struct_SAD_0_s_fu_346_p3;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                minSAD_fu_60 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_struct_x_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_34_fu_280_p2 = ap_const_lv1_0))) then 
                output_struct_x_reg_132 <= col_img_reg_531;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_30_fu_228_p2)))) then 
                output_struct_x_reg_132 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    output_struct_y_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_32_fu_255_p2))) then 
                output_struct_y_reg_120 <= row_img_reg_518;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                output_struct_y_reg_120 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_40_fu_373_p2))) then 
                phi_mul_reg_167 <= next_mul_reg_541;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_32_fu_255_p2)))) then 
                phi_mul_reg_167 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    row_tpl_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_40_fu_373_p2))) then 
                row_tpl_reg_144 <= row_tpl_1_reg_549;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_32_fu_255_p2)))) then 
                row_tpl_reg_144 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                col_img_reg_531 <= col_img_fu_260_p2;
                    output_struct_x_cast_reg_523(30 downto 0) <= output_struct_x_cast_fu_251_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                col_tpl_1_reg_562 <= col_tpl_1_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                next_mul_reg_541 <= next_mul_fu_270_p2;
                row_tpl_1_reg_549 <= row_tpl_1_fu_285_p2;
                tmp_45_reg_536 <= tmp_45_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_34_fu_280_p2 = ap_const_lv1_0))) then
                output_struct_x_writ_fu_68 <= output_struct_x_0_ou_fu_332_p3;
                output_struct_y_writ_fu_64 <= output_struct_y_0_ou_fu_339_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                    output_struct_y_cast_reg_510(30 downto 0) <= output_struct_y_cast_fu_224_p1(30 downto 0);
                row_img_reg_518 <= row_img_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_34_fu_280_p2 = ap_const_lv1_0)))) then
                tmp_36_reg_554 <= tmp_36_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                tmp_43_reg_577 <= tmp_43_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_500 <= tmp_fu_207_p2;
                tmp_s_reg_505 <= tmp_s_fu_213_p2;
            end if;
        end if;
    end process;
    output_struct_y_cast_reg_510(31) <= '0';
    output_struct_x_cast_reg_523(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_34_fu_280_p2, tmp_40_fu_373_p2, tmp_32_fu_255_p2, tmp_30_fu_228_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_30_fu_228_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((ap_const_lv1_0 = tmp_32_fu_255_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((tmp_34_fu_280_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((ap_const_lv1_0 = tmp_40_fu_373_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    SAD_fu_465_p2 <= std_logic_vector(signed(abs_cast_fu_461_p1) + signed(SAD_1_reg_189));
        abs_cast_fu_461_p1 <= std_logic_vector(resize(signed(abs_fu_454_p3),32));

    abs_fu_454_p3 <= 
        tmp_43_reg_577 when (abscond_fu_449_p2(0) = '1') else 
        neg_fu_444_p2;
    abscond_fu_449_p2 <= "1" when (signed(tmp_43_reg_577) > signed(ap_const_lv9_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_30_fu_228_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_30_fu_228_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_30_fu_228_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_30_fu_228_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= output_struct_x_writ_fu_68;
    ap_return_1 <= output_struct_y_writ_fu_64;
    col_img_fu_260_p2 <= std_logic_vector(unsigned(output_struct_x_reg_132) + unsigned(ap_const_lv31_1));
    col_tpl_1_fu_378_p2 <= std_logic_vector(unsigned(col_tpl_reg_178) + unsigned(ap_const_lv31_1));
    col_tpl_cast_fu_369_p1 <= std_logic_vector(resize(unsigned(col_tpl_reg_178),32));
    imINPUT_address0 <= tmp_47_cast_fu_403_p1(21 - 1 downto 0);

    imINPUT_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            imINPUT_ce0 <= ap_const_logic_1;
        else 
            imINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neg_fu_444_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_43_reg_577));
    next_mul_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv42_4B0) + unsigned(phi_mul_reg_167));
    or_cond_fu_326_p2 <= (tmp_37_fu_314_p2 or tmp_39_fu_320_p2);
    output_struct_SAD_0_s_fu_346_p3 <= 
        minSAD_1_reg_155 when (or_cond_fu_326_p2(0) = '1') else 
        minSAD_fu_60;
    output_struct_x_0_ou_fu_332_p3 <= 
        output_struct_x_cast_reg_523 when (or_cond_fu_326_p2(0) = '1') else 
        output_struct_x_writ_fu_68;
    output_struct_x_cast_fu_251_p1 <= std_logic_vector(resize(unsigned(output_struct_x_reg_132),32));
    output_struct_y_0_ou_fu_339_p3 <= 
        output_struct_y_cast_reg_510 when (or_cond_fu_326_p2(0) = '1') else 
        output_struct_y_writ_fu_64;
    output_struct_y_cast_fu_224_p1 <= std_logic_vector(resize(unsigned(output_struct_y_reg_120),32));
    row_img_fu_233_p2 <= std_logic_vector(unsigned(output_struct_y_reg_120) + unsigned(ap_const_lv31_1));
    row_tpl_1_fu_285_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(row_tpl_reg_144));
    row_tpl_cast_fu_276_p1 <= std_logic_vector(resize(unsigned(row_tpl_reg_144),32));
    search_img_cast_fu_426_p1 <= std_logic_vector(resize(unsigned(search_img_fu_422_p1),9));
    search_img_fu_422_p1 <= imINPUT_q0(8 - 1 downto 0);
    template_img_cast_fu_434_p1 <= std_logic_vector(resize(unsigned(template_img_fu_430_p1),9));
    template_img_fu_430_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_30_fu_228_p2 <= "1" when (signed(output_struct_y_cast_fu_224_p1) < signed(tmp_reg_500)) else "0";
    tmp_32_fu_255_p2 <= "1" when (signed(output_struct_x_cast_fu_251_p1) < signed(tmp_s_reg_505)) else "0";
    tmp_34_fu_280_p2 <= "1" when (signed(row_tpl_cast_fu_276_p1) < signed(tplHeight)) else "0";
    tmp_36_fu_305_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &ap_const_lv22_4B0) * signed(tmp_51_fu_299_p2))), 22));
    tmp_37_fu_314_p2 <= "1" when (signed(minSAD_fu_60) > signed(minSAD_1_reg_155)) else "0";
    tmp_39_fu_320_p2 <= "1" when (minSAD_fu_60 = ap_const_lv32_0) else "0";
    tmp_40_fu_373_p2 <= "1" when (signed(col_tpl_cast_fu_369_p1) < signed(tplWidth)) else "0";
    tmp_41_fu_398_p2 <= std_logic_vector(unsigned(tmp_54_fu_392_p2) + unsigned(tmp_36_reg_554));
    tmp_42_fu_412_p2 <= std_logic_vector(unsigned(tmp_56_fu_408_p1) + unsigned(tmp_45_reg_536));
    tmp_43_fu_438_p2 <= std_logic_vector(unsigned(search_img_cast_fu_426_p1) - unsigned(template_img_cast_fu_434_p1));
    tmp_45_fu_266_p1 <= phi_mul_reg_167(22 - 1 downto 0);
    tmp_46_fu_291_p1 <= output_struct_y_reg_120(22 - 1 downto 0);
        tmp_47_cast_fu_403_p1 <= std_logic_vector(resize(signed(tmp_41_fu_398_p2),64));

    tmp_48_fu_295_p1 <= row_tpl_reg_144(22 - 1 downto 0);
    tmp_50_cast_fu_417_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_412_p2),64));
    tmp_51_fu_299_p2 <= std_logic_vector(unsigned(tmp_48_fu_295_p1) + unsigned(tmp_46_fu_291_p1));
    tmp_52_fu_384_p1 <= col_tpl_reg_178(22 - 1 downto 0);
    tmp_53_fu_388_p1 <= output_struct_x_reg_132(22 - 1 downto 0);
    tmp_54_fu_392_p2 <= std_logic_vector(unsigned(tmp_53_fu_388_p1) + unsigned(tmp_52_fu_384_p1));
    tmp_56_fu_408_p1 <= col_tpl_reg_178(22 - 1 downto 0);
    tmp_fu_207_p2 <= std_logic_vector(unsigned(imHeight) - unsigned(tplHeight));
    tmp_s_fu_213_p2 <= std_logic_vector(unsigned(imWidth) - unsigned(tplWidth));
    tplINPUT_address0 <= tmp_50_cast_fu_417_p1(21 - 1 downto 0);

    tplINPUT_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            tplINPUT_ce0 <= ap_const_logic_1;
        else 
            tplINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
