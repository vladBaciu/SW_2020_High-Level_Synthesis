// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imGrayScale26 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imINPUT_dout,
        imINPUT_empty_n,
        imINPUT_read,
        imOUTPUT_address0,
        imOUTPUT_ce0,
        imOUTPUT_we0,
        imOUTPUT_d0,
        imHeight,
        imWidth
);

parameter    ap_ST_fsm_state1 = 28'b1;
parameter    ap_ST_fsm_state2 = 28'b10;
parameter    ap_ST_fsm_state3 = 28'b100;
parameter    ap_ST_fsm_state4 = 28'b1000;
parameter    ap_ST_fsm_state5 = 28'b10000;
parameter    ap_ST_fsm_state6 = 28'b100000;
parameter    ap_ST_fsm_state7 = 28'b1000000;
parameter    ap_ST_fsm_state8 = 28'b10000000;
parameter    ap_ST_fsm_state9 = 28'b100000000;
parameter    ap_ST_fsm_state10 = 28'b1000000000;
parameter    ap_ST_fsm_state11 = 28'b10000000000;
parameter    ap_ST_fsm_state12 = 28'b100000000000;
parameter    ap_ST_fsm_state13 = 28'b1000000000000;
parameter    ap_ST_fsm_state14 = 28'b10000000000000;
parameter    ap_ST_fsm_state15 = 28'b100000000000000;
parameter    ap_ST_fsm_state16 = 28'b1000000000000000;
parameter    ap_ST_fsm_state17 = 28'b10000000000000000;
parameter    ap_ST_fsm_state18 = 28'b100000000000000000;
parameter    ap_ST_fsm_state19 = 28'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 28'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 28'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 28'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 28'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 28'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 28'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 28'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 28'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 28'b1000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv64_3FBD2F1A9FBE76C9 = 64'b11111110111101001011110001101010011111101111100111011011001001;
parameter    ap_const_lv64_3FE2C8B439581062 = 64'b11111111100010110010001011010000111001010110000001000001100010;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv64_3FD322D0E5604189 = 64'b11111111010011001000101101000011100101011000000100000110001001;
parameter    ap_const_lv64_4B0 = 64'b10010110000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_3B = 32'b111011;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] imINPUT_dout;
input   imINPUT_empty_n;
output   imINPUT_read;
output  [20:0] imOUTPUT_address0;
output   imOUTPUT_ce0;
output   imOUTPUT_we0;
output  [31:0] imOUTPUT_d0;
input  [31:0] imHeight;
input  [31:0] imWidth;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imINPUT_read;
reg imOUTPUT_ce0;
reg imOUTPUT_we0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    imINPUT_blk_n;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] tmp_18_fu_209_p2;
wire   [63:0] grp_fu_157_p2;
reg   [63:0] reg_174;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state20;
wire   [21:0] tmp_63_fu_180_p1;
reg   [21:0] tmp_63_reg_405;
wire   [0:0] ap_CS_fsm_state2;
wire   [63:0] next_mul_fu_184_p2;
reg   [63:0] next_mul_reg_410;
wire   [10:0] row_4_fu_199_p2;
reg   [10:0] row_4_reg_418;
wire   [10:0] col_1_fu_214_p2;
reg   [10:0] col_1_reg_426;
wire   [21:0] tmp_43_fu_224_p2;
reg   [21:0] tmp_43_reg_431;
wire   [7:0] tmp_64_fu_229_p1;
reg   [7:0] tmp_64_reg_436;
reg   [7:0] tmp_24_cast_reg_441;
reg   [7:0] tmp_29_cast_reg_446;
wire   [31:0] tmp_21_cast_fu_253_p1;
wire   [0:0] ap_CS_fsm_state4;
wire   [63:0] grp_fu_168_p1;
reg   [63:0] tmp_22_reg_461;
wire   [0:0] ap_CS_fsm_state9;
wire   [63:0] grp_fu_171_p1;
reg   [63:0] tmp_26_reg_466;
wire   [31:0] tmp_30_cast_fu_261_p1;
reg   [63:0] tmp_29_reg_476;
wire   [0:0] ap_CS_fsm_state14;
wire   [63:0] grp_fu_162_p2;
reg   [63:0] tmp_27_reg_481;
wire   [63:0] grp_fu_153_p2;
reg   [63:0] tmp_28_reg_486;
reg   [10:0] loc_V_reg_491;
wire   [0:0] ap_CS_fsm_state25;
wire   [51:0] loc_V_8_fu_279_p1;
reg   [51:0] loc_V_8_reg_497;
wire   [7:0] result_V_fu_374_p3;
reg   [7:0] result_V_reg_502;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state27;
reg   [10:0] row_reg_120;
reg   [63:0] phi_mul_reg_131;
reg   [10:0] col_reg_142;
wire   [0:0] tmp_s_fu_194_p2;
wire   [0:0] ap_CS_fsm_state28;
wire   [63:0] tmp_50_cast_fu_382_p1;
reg   [63:0] grp_fu_153_p0;
reg   [63:0] grp_fu_153_p1;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state21;
reg   [63:0] grp_fu_157_p0;
reg   [63:0] grp_fu_157_p1;
wire   [0:0] ap_CS_fsm_state10;
reg   [31:0] grp_fu_168_p0;
wire   [31:0] grp_fu_171_p0;
wire  signed [31:0] tmp_fu_190_p1;
wire  signed [31:0] tmp_17_fu_205_p1;
wire  signed [21:0] tmp_20_cast_fu_220_p1;
wire   [63:0] p_Val2_s_fu_265_p1;
wire   [52:0] p_Result_s_fu_283_p3;
wire   [11:0] tmp_i_i_i_cast_fu_294_p1;
wire   [11:0] sh_assign_fu_297_p2;
wire   [10:0] tmp_i_i_17_fu_311_p2;
wire   [0:0] isNeg_fu_303_p3;
wire  signed [11:0] tmp_i_i_cast_fu_316_p1;
wire   [11:0] sh_assign_8_fu_320_p3;
wire  signed [31:0] sh_assign_1_i_i_cast_fu_328_p1;
wire   [52:0] tmp_61_i_i_cast_fu_336_p1;
wire   [111:0] tmp_i_i_fu_290_p1;
wire   [111:0] tmp_61_i_i_fu_332_p1;
wire   [52:0] tmp_62_i_i_fu_340_p2;
wire   [0:0] tmp_67_fu_352_p3;
wire   [111:0] tmp_63_i_i_fu_346_p2;
wire   [7:0] tmp_44_fu_360_p1;
wire   [7:0] tmp_45_fu_364_p4;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'b1;
end

imTemplateMatchinbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
imTemplateMatchinbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_153_p0),
    .din1(grp_fu_153_p1),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

imTemplateMatchincud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
imTemplateMatchincud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p0),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

imTemplateMatchincud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
imTemplateMatchincud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_26_reg_466),
    .din1(ap_const_lv64_3FD322D0E5604189),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

imTemplateMatchindEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
imTemplateMatchindEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_168_p0),
    .ce(1'b1),
    .dout(grp_fu_168_p1)
);

imTemplateMatchindEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
imTemplateMatchindEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .ce(1'b1),
    .dout(grp_fu_171_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        col_reg_142 <= col_1_reg_426;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_s_fu_194_p2))) begin
        col_reg_142 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_18_fu_209_p2 == 1'b0) & ~(~(tmp_18_fu_209_p2 == 1'b0) & (imINPUT_empty_n == 1'b0)))) begin
        phi_mul_reg_131 <= next_mul_reg_410;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_131 <= ap_const_lv64_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_18_fu_209_p2 == 1'b0) & ~(~(tmp_18_fu_209_p2 == 1'b0) & (imINPUT_empty_n == 1'b0)))) begin
        row_reg_120 <= row_4_reg_418;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        row_reg_120 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(~(tmp_18_fu_209_p2 == 1'b0) & (imINPUT_empty_n == 1'b0)))) begin
        col_1_reg_426 <= col_1_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        loc_V_8_reg_497 <= loc_V_8_fu_279_p1;
        loc_V_reg_491 <= {{p_Val2_s_fu_265_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_410 <= next_mul_fu_184_p2;
        row_4_reg_418 <= row_4_fu_199_p2;
        tmp_63_reg_405 <= tmp_63_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_174 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        result_V_reg_502 <= result_V_fu_374_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_22_reg_461 <= grp_fu_168_p1;
        tmp_26_reg_466 <= grp_fu_171_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(tmp_18_fu_209_p2 == 1'b0) & ~(~(tmp_18_fu_209_p2 == 1'b0) & (imINPUT_empty_n == 1'b0)))) begin
        tmp_24_cast_reg_441 <= {{imINPUT_dout[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_29_cast_reg_446 <= {{imINPUT_dout[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_43_reg_431 <= tmp_43_fu_224_p2;
        tmp_64_reg_436 <= tmp_64_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_27_reg_481 <= grp_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_28_reg_486 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_29_reg_476 <= grp_fu_168_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_s_fu_194_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_s_fu_194_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_153_p0 = tmp_28_reg_486;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_153_p0 = reg_174;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_153_p1 = reg_174;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_153_p1 = tmp_27_reg_481;
    end else begin
        grp_fu_153_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_157_p0 = tmp_29_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_157_p0 = tmp_22_reg_461;
    end else begin
        grp_fu_157_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_157_p1 = ap_const_lv64_3FE2C8B439581062;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_157_p1 = ap_const_lv64_3FBD2F1A9FBE76C9;
    end else begin
        grp_fu_157_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_168_p0 = tmp_30_cast_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_168_p0 = tmp_21_cast_fu_253_p1;
    end else begin
        grp_fu_168_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(tmp_18_fu_209_p2 == 1'b0))) begin
        imINPUT_blk_n = imINPUT_empty_n;
    end else begin
        imINPUT_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(tmp_18_fu_209_p2 == 1'b0) & ~(~(tmp_18_fu_209_p2 == 1'b0) & (imINPUT_empty_n == 1'b0)))) begin
        imINPUT_read = 1'b1;
    end else begin
        imINPUT_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28))) begin
        imOUTPUT_ce0 = 1'b1;
    end else begin
        imOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        imOUTPUT_we0 = 1'b1;
    end else begin
        imOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((1'b0 == tmp_s_fu_194_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_18_fu_209_p2 == 1'b0) & ~(~(tmp_18_fu_209_p2 == 1'b0) & (imINPUT_empty_n == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(tmp_18_fu_209_p2 == 1'b0) & ~(~(tmp_18_fu_209_p2 == 1'b0) & (imINPUT_empty_n == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign col_1_fu_214_p2 = (col_reg_142 + ap_const_lv11_1);

assign grp_fu_171_p0 = tmp_24_cast_reg_441;

assign imOUTPUT_address0 = tmp_50_cast_fu_382_p1;

assign imOUTPUT_d0 = {{{{result_V_reg_502}, {result_V_reg_502}}, {result_V_reg_502}}, {result_V_reg_502}};

assign isNeg_fu_303_p3 = sh_assign_fu_297_p2[ap_const_lv32_B];

assign loc_V_8_fu_279_p1 = p_Val2_s_fu_265_p1[51:0];

assign next_mul_fu_184_p2 = (ap_const_lv64_4B0 + phi_mul_reg_131);

assign p_Result_s_fu_283_p3 = {{1'b1}, {loc_V_8_reg_497}};

assign p_Val2_s_fu_265_p1 = grp_fu_153_p2;

assign result_V_fu_374_p3 = ((isNeg_fu_303_p3[0:0] === 1'b1) ? tmp_44_fu_360_p1 : tmp_45_fu_364_p4);

assign row_4_fu_199_p2 = (ap_const_lv11_1 + row_reg_120);

assign sh_assign_1_i_i_cast_fu_328_p1 = $signed(sh_assign_8_fu_320_p3);

assign sh_assign_8_fu_320_p3 = ((isNeg_fu_303_p3[0:0] === 1'b1) ? tmp_i_i_cast_fu_316_p1 : sh_assign_fu_297_p2);

assign sh_assign_fu_297_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_i_cast_fu_294_p1));

assign tmp_17_fu_205_p1 = $signed(col_reg_142);

assign tmp_18_fu_209_p2 = (($signed(tmp_17_fu_205_p1) < $signed(imWidth)) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_220_p1 = $signed(col_reg_142);

assign tmp_21_cast_fu_253_p1 = tmp_64_reg_436;

assign tmp_30_cast_fu_261_p1 = tmp_29_cast_reg_446;

assign tmp_43_fu_224_p2 = ($signed(tmp_20_cast_fu_220_p1) + $signed(tmp_63_reg_405));

assign tmp_44_fu_360_p1 = tmp_67_fu_352_p3;

assign tmp_45_fu_364_p4 = {{tmp_63_i_i_fu_346_p2[ap_const_lv32_3B : ap_const_lv32_34]}};

assign tmp_50_cast_fu_382_p1 = tmp_43_reg_431;

assign tmp_61_i_i_cast_fu_336_p1 = $unsigned(sh_assign_1_i_i_cast_fu_328_p1);

assign tmp_61_i_i_fu_332_p1 = $unsigned(sh_assign_1_i_i_cast_fu_328_p1);

assign tmp_62_i_i_fu_340_p2 = p_Result_s_fu_283_p3 >> tmp_61_i_i_cast_fu_336_p1;

assign tmp_63_fu_180_p1 = phi_mul_reg_131[21:0];

assign tmp_63_i_i_fu_346_p2 = tmp_i_i_fu_290_p1 << tmp_61_i_i_fu_332_p1;

assign tmp_64_fu_229_p1 = imINPUT_dout[7:0];

assign tmp_67_fu_352_p3 = tmp_62_i_i_fu_340_p2[ap_const_lv32_34];

assign tmp_fu_190_p1 = $signed(row_reg_120);

assign tmp_i_i_17_fu_311_p2 = (ap_const_lv11_3FF - loc_V_reg_491);

assign tmp_i_i_cast_fu_316_p1 = $signed(tmp_i_i_17_fu_311_p2);

assign tmp_i_i_fu_290_p1 = p_Result_s_fu_283_p3;

assign tmp_i_i_i_cast_fu_294_p1 = loc_V_reg_491;

assign tmp_s_fu_194_p2 = (($signed(tmp_fu_190_p1) < $signed(imHeight)) ? 1'b1 : 1'b0);

endmodule //imGrayScale26
