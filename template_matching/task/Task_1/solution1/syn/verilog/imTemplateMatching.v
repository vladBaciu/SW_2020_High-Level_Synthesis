// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="imTemplateMatching,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.722000,HLS_SYN_LAT=12603477230,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=34,HLS_SYN_FF=8735,HLS_SYN_LUT=13222}" *)

module imTemplateMatching (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imINPUT_address0,
        imINPUT_ce0,
        imINPUT_q0,
        imOUTPUT_address0,
        imOUTPUT_ce0,
        imOUTPUT_we0,
        imOUTPUT_d0,
        imOUTPUT_q0,
        imHeight,
        imWidth,
        tplINPUT_address0,
        tplINPUT_ce0,
        tplINPUT_q0,
        tplOUTPUT_address0,
        tplOUTPUT_ce0,
        tplOUTPUT_we0,
        tplOUTPUT_d0,
        tplOUTPUT_q0,
        tplHeight,
        tplWidth
);

parameter    ap_ST_fsm_state1 = 14'b1;
parameter    ap_ST_fsm_state2 = 14'b10;
parameter    ap_ST_fsm_state3 = 14'b100;
parameter    ap_ST_fsm_state4 = 14'b1000;
parameter    ap_ST_fsm_state5 = 14'b10000;
parameter    ap_ST_fsm_state6 = 14'b100000;
parameter    ap_ST_fsm_state7 = 14'b1000000;
parameter    ap_ST_fsm_state8 = 14'b10000000;
parameter    ap_ST_fsm_state9 = 14'b100000000;
parameter    ap_ST_fsm_state10 = 14'b1000000000;
parameter    ap_ST_fsm_state11 = 14'b10000000000;
parameter    ap_ST_fsm_state12 = 14'b100000000000;
parameter    ap_ST_fsm_state13 = 14'b1000000000000;
parameter    ap_ST_fsm_state14 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv42_0 = 42'b000000000000000000000000000000000000000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv42_4B0 = 42'b10010110000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv22_4B0 = 22'b10010110000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [20:0] imINPUT_address0;
output   imINPUT_ce0;
input  [31:0] imINPUT_q0;
output  [20:0] imOUTPUT_address0;
output   imOUTPUT_ce0;
output   imOUTPUT_we0;
output  [31:0] imOUTPUT_d0;
input  [31:0] imOUTPUT_q0;
input  [31:0] imHeight;
input  [31:0] imWidth;
output  [20:0] tplINPUT_address0;
output   tplINPUT_ce0;
input  [31:0] tplINPUT_q0;
output  [20:0] tplOUTPUT_address0;
output   tplOUTPUT_ce0;
output   tplOUTPUT_we0;
output  [31:0] tplOUTPUT_d0;
input  [31:0] tplOUTPUT_q0;
input  [31:0] tplHeight;
input  [31:0] tplWidth;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[20:0] imOUTPUT_address0;
reg imOUTPUT_ce0;
reg imOUTPUT_we0;
reg[31:0] imOUTPUT_d0;
reg[20:0] tplINPUT_address0;
reg tplINPUT_ce0;
reg[20:0] tplOUTPUT_address0;
reg tplOUTPUT_ce0;
reg tplOUTPUT_we0;
reg[31:0] tplOUTPUT_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] ap_CS_fsm_state3;
reg   [31:0] template_match_posit_reg_313;
wire   [0:0] ap_CS_fsm_state8;
wire    grp_imDiff_fu_169_ap_done;
reg   [31:0] template_match_posit_1_reg_318;
wire   [21:0] tmp_fu_189_p1;
reg   [21:0] tmp_reg_323;
wire   [0:0] ap_CS_fsm_state9;
wire   [41:0] next_mul_fu_193_p2;
reg   [41:0] next_mul_reg_328;
wire   [30:0] row_fu_208_p2;
reg   [30:0] row_reg_336;
wire   [21:0] tmp_1_fu_227_p2;
reg   [21:0] tmp_1_reg_341;
wire   [0:0] tmp_i_fu_203_p2;
wire   [30:0] col_fu_242_p2;
reg   [30:0] col_reg_349;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] tmp_56_i_fu_237_p2;
wire   [21:0] tmp_3_fu_275_p2;
reg   [21:0] tmp_3_reg_359;
wire   [0:0] ap_CS_fsm_state13;
wire    grp_imGreyNormalization_fu_144_ap_start;
wire    grp_imGreyNormalization_fu_144_ap_done;
wire    grp_imGreyNormalization_fu_144_ap_idle;
wire    grp_imGreyNormalization_fu_144_ap_ready;
wire   [20:0] grp_imGreyNormalization_fu_144_imINPUT_address0;
wire    grp_imGreyNormalization_fu_144_imINPUT_ce0;
wire    grp_imGreyNormalization_fu_144_imINPUT_we0;
wire   [31:0] grp_imGreyNormalization_fu_144_imINPUT_d0;
reg   [31:0] grp_imGreyNormalization_fu_144_imINPUT_q0;
reg   [31:0] grp_imGreyNormalization_fu_144_imHeight;
wire    grp_imGrayScale_fu_153_ap_start;
wire    grp_imGrayScale_fu_153_ap_done;
wire    grp_imGrayScale_fu_153_ap_idle;
wire    grp_imGrayScale_fu_153_ap_ready;
wire   [20:0] grp_imGrayScale_fu_153_imINPUT_address0;
wire    grp_imGrayScale_fu_153_imINPUT_ce0;
reg   [31:0] grp_imGrayScale_fu_153_imINPUT_q0;
wire   [20:0] grp_imGrayScale_fu_153_imOUTPUT_address0;
wire    grp_imGrayScale_fu_153_imOUTPUT_ce0;
wire    grp_imGrayScale_fu_153_imOUTPUT_we0;
wire   [31:0] grp_imGrayScale_fu_153_imOUTPUT_d0;
reg   [31:0] grp_imGrayScale_fu_153_imHeight;
reg   [31:0] grp_imGrayScale_fu_153_imWidth;
wire    grp_imDiff_fu_169_ap_start;
wire    grp_imDiff_fu_169_ap_idle;
wire    grp_imDiff_fu_169_ap_ready;
wire   [20:0] grp_imDiff_fu_169_imINPUT_address0;
wire    grp_imDiff_fu_169_imINPUT_ce0;
wire   [20:0] grp_imDiff_fu_169_tplINPUT_address0;
wire    grp_imDiff_fu_169_tplINPUT_ce0;
wire   [31:0] grp_imDiff_fu_169_ap_return_0;
wire   [31:0] grp_imDiff_fu_169_ap_return_1;
reg   [30:0] row_i_reg_111;
reg   [41:0] phi_mul_reg_122;
reg   [30:0] col_i_reg_133;
wire   [0:0] ap_CS_fsm_state14;
reg    ap_reg_grp_imGreyNormalization_fu_144_ap_start;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state6;
reg    ap_reg_grp_imGrayScale_fu_153_ap_start;
wire   [0:0] ap_CS_fsm_state2;
reg    ap_reg_grp_imDiff_fu_169_ap_start;
wire   [0:0] ap_CS_fsm_state7;
wire   [63:0] tmp_2_cast_fu_257_p1;
wire  signed [63:0] tmp_3_cast_fu_280_p1;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state12;
wire   [31:0] row_i_cast_fu_199_p1;
wire   [21:0] tmp_5_fu_218_p1;
wire   [21:0] tmp_4_fu_214_p1;
wire  signed [21:0] tmp_6_fu_221_p2;
wire   [31:0] col_i_cast_fu_233_p1;
wire   [21:0] tmp_7_fu_248_p1;
wire   [21:0] tmp_2_fu_252_p2;
wire   [21:0] tmp_9_fu_266_p1;
wire   [21:0] tmp_8_fu_262_p1;
wire   [21:0] tmp_10_fu_269_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'b1;
#0 ap_reg_grp_imGreyNormalization_fu_144_ap_start = 1'b0;
#0 ap_reg_grp_imGrayScale_fu_153_ap_start = 1'b0;
#0 ap_reg_grp_imDiff_fu_169_ap_start = 1'b0;
end

imGreyNormalization grp_imGreyNormalization_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imGreyNormalization_fu_144_ap_start),
    .ap_done(grp_imGreyNormalization_fu_144_ap_done),
    .ap_idle(grp_imGreyNormalization_fu_144_ap_idle),
    .ap_ready(grp_imGreyNormalization_fu_144_ap_ready),
    .imINPUT_address0(grp_imGreyNormalization_fu_144_imINPUT_address0),
    .imINPUT_ce0(grp_imGreyNormalization_fu_144_imINPUT_ce0),
    .imINPUT_we0(grp_imGreyNormalization_fu_144_imINPUT_we0),
    .imINPUT_d0(grp_imGreyNormalization_fu_144_imINPUT_d0),
    .imINPUT_q0(grp_imGreyNormalization_fu_144_imINPUT_q0),
    .imHeight(grp_imGreyNormalization_fu_144_imHeight),
    .imWidth(imWidth)
);

imGrayScale grp_imGrayScale_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imGrayScale_fu_153_ap_start),
    .ap_done(grp_imGrayScale_fu_153_ap_done),
    .ap_idle(grp_imGrayScale_fu_153_ap_idle),
    .ap_ready(grp_imGrayScale_fu_153_ap_ready),
    .imINPUT_address0(grp_imGrayScale_fu_153_imINPUT_address0),
    .imINPUT_ce0(grp_imGrayScale_fu_153_imINPUT_ce0),
    .imINPUT_q0(grp_imGrayScale_fu_153_imINPUT_q0),
    .imOUTPUT_address0(grp_imGrayScale_fu_153_imOUTPUT_address0),
    .imOUTPUT_ce0(grp_imGrayScale_fu_153_imOUTPUT_ce0),
    .imOUTPUT_we0(grp_imGrayScale_fu_153_imOUTPUT_we0),
    .imOUTPUT_d0(grp_imGrayScale_fu_153_imOUTPUT_d0),
    .imHeight(grp_imGrayScale_fu_153_imHeight),
    .imWidth(grp_imGrayScale_fu_153_imWidth)
);

imDiff grp_imDiff_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imDiff_fu_169_ap_start),
    .ap_done(grp_imDiff_fu_169_ap_done),
    .ap_idle(grp_imDiff_fu_169_ap_idle),
    .ap_ready(grp_imDiff_fu_169_ap_ready),
    .imINPUT_address0(grp_imDiff_fu_169_imINPUT_address0),
    .imINPUT_ce0(grp_imDiff_fu_169_imINPUT_ce0),
    .imINPUT_q0(imOUTPUT_q0),
    .imHeight(imHeight),
    .imWidth(imWidth),
    .tplINPUT_address0(grp_imDiff_fu_169_tplINPUT_address0),
    .tplINPUT_ce0(grp_imDiff_fu_169_tplINPUT_ce0),
    .tplINPUT_q0(tplOUTPUT_q0),
    .tplHeight(tplHeight),
    .tplWidth(tplWidth),
    .ap_return_0(grp_imDiff_fu_169_ap_return_0),
    .ap_return_1(grp_imDiff_fu_169_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imDiff_fu_169_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_reg_grp_imDiff_fu_169_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imDiff_fu_169_ap_ready)) begin
            ap_reg_grp_imDiff_fu_169_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imGrayScale_fu_153_ap_start <= 1'b0;
    end else begin
        if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state3))) begin
            ap_reg_grp_imGrayScale_fu_153_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imGrayScale_fu_153_ap_ready)) begin
            ap_reg_grp_imGrayScale_fu_153_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imGreyNormalization_fu_144_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
            ap_reg_grp_imGreyNormalization_fu_144_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imGreyNormalization_fu_144_ap_ready)) begin
            ap_reg_grp_imGreyNormalization_fu_144_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        col_i_reg_133 <= col_reg_349;
    end else if (((1'b1 == ap_CS_fsm_state9) & ~(tmp_i_fu_203_p2 == 1'b0))) begin
        col_i_reg_133 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == tmp_56_i_fu_237_p2))) begin
        phi_mul_reg_122 <= next_mul_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == grp_imDiff_fu_169_ap_done))) begin
        phi_mul_reg_122 <= ap_const_lv42_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == tmp_56_i_fu_237_p2))) begin
        row_i_reg_111 <= row_reg_336;
    end else if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == grp_imDiff_fu_169_ap_done))) begin
        row_i_reg_111 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        col_reg_349 <= col_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        next_mul_reg_328 <= next_mul_fu_193_p2;
        row_reg_336 <= row_fu_208_p2;
        tmp_reg_323 <= tmp_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == grp_imDiff_fu_169_ap_done))) begin
        template_match_posit_1_reg_318 <= grp_imDiff_fu_169_ap_return_1;
        template_match_posit_reg_313 <= grp_imDiff_fu_169_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(tmp_i_fu_203_p2 == 1'b0))) begin
        tmp_1_reg_341 <= tmp_1_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == tmp_56_i_fu_237_p2))) begin
        tmp_3_reg_359 <= tmp_3_fu_275_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_i_fu_203_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_i_fu_203_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_imGrayScale_fu_153_imHeight = tplHeight;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_imGrayScale_fu_153_imHeight = imHeight;
    end else begin
        grp_imGrayScale_fu_153_imHeight = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_imGrayScale_fu_153_imINPUT_q0 = tplINPUT_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_imGrayScale_fu_153_imINPUT_q0 = imINPUT_q0;
    end else begin
        grp_imGrayScale_fu_153_imINPUT_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_imGrayScale_fu_153_imWidth = tplWidth;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_imGrayScale_fu_153_imWidth = imWidth;
    end else begin
        grp_imGrayScale_fu_153_imWidth = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_imGreyNormalization_fu_144_imHeight = tplWidth;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_imGreyNormalization_fu_144_imHeight = imHeight;
    end else begin
        grp_imGreyNormalization_fu_144_imHeight = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_imGreyNormalization_fu_144_imINPUT_q0 = tplOUTPUT_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_imGreyNormalization_fu_144_imINPUT_q0 = imOUTPUT_q0;
    end else begin
        grp_imGreyNormalization_fu_144_imINPUT_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        imOUTPUT_address0 = tmp_3_cast_fu_280_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        imOUTPUT_address0 = grp_imDiff_fu_169_imINPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_address0 = grp_imGrayScale_fu_153_imOUTPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_address0 = grp_imGreyNormalization_fu_144_imINPUT_address0;
    end else begin
        imOUTPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        imOUTPUT_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        imOUTPUT_ce0 = grp_imDiff_fu_169_imINPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_ce0 = grp_imGrayScale_fu_153_imOUTPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_ce0 = grp_imGreyNormalization_fu_144_imINPUT_ce0;
    end else begin
        imOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        imOUTPUT_d0 = tplINPUT_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_d0 = grp_imGrayScale_fu_153_imOUTPUT_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_d0 = grp_imGreyNormalization_fu_144_imINPUT_d0;
    end else begin
        imOUTPUT_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        imOUTPUT_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_we0 = grp_imGrayScale_fu_153_imOUTPUT_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_we0 = grp_imGreyNormalization_fu_144_imINPUT_we0;
    end else begin
        imOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tplINPUT_address0 = tmp_2_cast_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplINPUT_address0 = grp_imGrayScale_fu_153_imINPUT_address0;
    end else begin
        tplINPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        tplINPUT_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplINPUT_ce0 = grp_imGrayScale_fu_153_imINPUT_ce0;
    end else begin
        tplINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tplOUTPUT_address0 = grp_imDiff_fu_169_tplINPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_address0 = grp_imGrayScale_fu_153_imOUTPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tplOUTPUT_address0 = grp_imGreyNormalization_fu_144_imINPUT_address0;
    end else begin
        tplOUTPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tplOUTPUT_ce0 = grp_imDiff_fu_169_tplINPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_ce0 = grp_imGrayScale_fu_153_imOUTPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tplOUTPUT_ce0 = grp_imGreyNormalization_fu_144_imINPUT_ce0;
    end else begin
        tplOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_d0 = grp_imGrayScale_fu_153_imOUTPUT_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tplOUTPUT_d0 = grp_imGreyNormalization_fu_144_imINPUT_d0;
    end else begin
        tplOUTPUT_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_we0 = grp_imGrayScale_fu_153_imOUTPUT_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tplOUTPUT_we0 = grp_imGreyNormalization_fu_144_imINPUT_we0;
    end else begin
        tplOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == grp_imGrayScale_fu_153_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (~((1'b0 == grp_imGrayScale_fu_153_ap_done) | (1'b0 == grp_imGreyNormalization_fu_144_ap_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == grp_imGreyNormalization_fu_144_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == grp_imDiff_fu_169_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((tmp_i_fu_203_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((1'b0 == tmp_56_i_fu_237_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign col_fu_242_p2 = (col_i_reg_133 + ap_const_lv31_1);

assign col_i_cast_fu_233_p1 = col_i_reg_133;

assign grp_imDiff_fu_169_ap_start = ap_reg_grp_imDiff_fu_169_ap_start;

assign grp_imGrayScale_fu_153_ap_start = ap_reg_grp_imGrayScale_fu_153_ap_start;

assign grp_imGreyNormalization_fu_144_ap_start = ap_reg_grp_imGreyNormalization_fu_144_ap_start;

assign imINPUT_address0 = grp_imGrayScale_fu_153_imINPUT_address0;

assign imINPUT_ce0 = grp_imGrayScale_fu_153_imINPUT_ce0;

assign next_mul_fu_193_p2 = (ap_const_lv42_4B0 + phi_mul_reg_122);

assign row_fu_208_p2 = (ap_const_lv31_1 + row_i_reg_111);

assign row_i_cast_fu_199_p1 = row_i_reg_111;

assign tmp_10_fu_269_p2 = (tmp_9_fu_266_p1 + tmp_8_fu_262_p1);

assign tmp_1_fu_227_p2 = ($signed({{1'b0}, {ap_const_lv22_4B0}}) * $signed(tmp_6_fu_221_p2));

assign tmp_2_cast_fu_257_p1 = tmp_2_fu_252_p2;

assign tmp_2_fu_252_p2 = (tmp_reg_323 + tmp_7_fu_248_p1);

assign tmp_3_cast_fu_280_p1 = $signed(tmp_3_reg_359);

assign tmp_3_fu_275_p2 = (tmp_1_reg_341 + tmp_10_fu_269_p2);

assign tmp_4_fu_214_p1 = row_i_reg_111[21:0];

assign tmp_56_i_fu_237_p2 = (($signed(col_i_cast_fu_233_p1) < $signed(tplWidth)) ? 1'b1 : 1'b0);

assign tmp_5_fu_218_p1 = template_match_posit_1_reg_318[21:0];

assign tmp_6_fu_221_p2 = (tmp_5_fu_218_p1 + tmp_4_fu_214_p1);

assign tmp_7_fu_248_p1 = col_i_reg_133[21:0];

assign tmp_8_fu_262_p1 = col_i_reg_133[21:0];

assign tmp_9_fu_266_p1 = template_match_posit_reg_313[21:0];

assign tmp_fu_189_p1 = phi_mul_reg_122[21:0];

assign tmp_i_fu_203_p2 = (($signed(row_i_cast_fu_199_p1) < $signed(tplHeight)) ? 1'b1 : 1'b0);

endmodule //imTemplateMatching
