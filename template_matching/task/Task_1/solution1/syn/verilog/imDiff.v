// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imDiff (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imINPUT_address0,
        imINPUT_ce0,
        imINPUT_q0,
        imHeight,
        imWidth,
        tplINPUT_address0,
        tplINPUT_ce0,
        tplINPUT_q0,
        tplHeight,
        tplWidth,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 9'b1;
parameter    ap_ST_fsm_state2 = 9'b10;
parameter    ap_ST_fsm_state3 = 9'b100;
parameter    ap_ST_fsm_state4 = 9'b1000;
parameter    ap_ST_fsm_state5 = 9'b10000;
parameter    ap_ST_fsm_state6 = 9'b100000;
parameter    ap_ST_fsm_state7 = 9'b1000000;
parameter    ap_ST_fsm_state8 = 9'b10000000;
parameter    ap_ST_fsm_state9 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv42_0 = 42'b000000000000000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv42_4B0 = 42'b10010110000;
parameter    ap_const_lv22_4B0 = 22'b10010110000;
parameter    ap_const_lv9_0 = 9'b000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [20:0] imINPUT_address0;
output   imINPUT_ce0;
input  [31:0] imINPUT_q0;
input  [31:0] imHeight;
input  [31:0] imWidth;
output  [20:0] tplINPUT_address0;
output   tplINPUT_ce0;
input  [31:0] tplINPUT_q0;
input  [31:0] tplHeight;
input  [31:0] tplWidth;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imINPUT_ce0;
reg tplINPUT_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [31:0] tmp_fu_207_p2;
reg   [31:0] tmp_reg_500;
wire   [31:0] tmp_s_fu_213_p2;
reg   [31:0] tmp_s_reg_505;
wire   [31:0] output_struct_y_cast_fu_224_p1;
reg   [31:0] output_struct_y_cast_reg_510;
wire   [0:0] ap_CS_fsm_state2;
wire   [30:0] row_img_fu_233_p2;
reg   [30:0] row_img_reg_518;
wire   [31:0] output_struct_x_cast_fu_251_p1;
reg   [31:0] output_struct_x_cast_reg_523;
wire   [0:0] ap_CS_fsm_state3;
wire   [30:0] col_img_fu_260_p2;
reg   [30:0] col_img_reg_531;
wire   [21:0] tmp_45_fu_266_p1;
reg   [21:0] tmp_45_reg_536;
wire   [0:0] ap_CS_fsm_state4;
wire   [41:0] next_mul_fu_270_p2;
reg   [41:0] next_mul_reg_541;
wire   [30:0] row_tpl_1_fu_285_p2;
reg   [30:0] row_tpl_1_reg_549;
wire   [21:0] tmp_36_fu_305_p2;
reg   [21:0] tmp_36_reg_554;
wire   [0:0] tmp_34_fu_280_p2;
wire   [30:0] col_tpl_1_fu_378_p2;
reg   [30:0] col_tpl_1_reg_562;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_40_fu_373_p2;
wire   [8:0] tmp_43_fu_438_p2;
reg   [8:0] tmp_43_reg_577;
wire   [0:0] ap_CS_fsm_state8;
wire   [31:0] SAD_fu_465_p2;
wire   [0:0] ap_CS_fsm_state9;
reg   [30:0] output_struct_y_reg_120;
wire   [0:0] tmp_32_fu_255_p2;
reg   [30:0] output_struct_x_reg_132;
wire   [0:0] tmp_30_fu_228_p2;
reg   [30:0] row_tpl_reg_144;
reg   [31:0] minSAD_1_reg_155;
reg   [41:0] phi_mul_reg_167;
reg   [30:0] col_tpl_reg_178;
reg   [31:0] SAD_1_reg_189;
wire  signed [63:0] tmp_47_cast_fu_403_p1;
wire   [63:0] tmp_50_cast_fu_417_p1;
reg   [31:0] minSAD_fu_60;
wire   [31:0] output_struct_SAD_0_s_fu_346_p3;
reg   [31:0] output_struct_y_writ_fu_64;
wire   [31:0] output_struct_y_0_ou_fu_339_p3;
reg   [31:0] output_struct_x_writ_fu_68;
wire   [31:0] output_struct_x_0_ou_fu_332_p3;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
wire   [31:0] row_tpl_cast_fu_276_p1;
wire   [21:0] tmp_48_fu_295_p1;
wire   [21:0] tmp_46_fu_291_p1;
wire  signed [21:0] tmp_51_fu_299_p2;
wire   [0:0] tmp_37_fu_314_p2;
wire   [0:0] tmp_39_fu_320_p2;
wire   [0:0] or_cond_fu_326_p2;
wire   [31:0] col_tpl_cast_fu_369_p1;
wire   [21:0] tmp_53_fu_388_p1;
wire   [21:0] tmp_52_fu_384_p1;
wire   [21:0] tmp_54_fu_392_p2;
wire   [21:0] tmp_41_fu_398_p2;
wire   [21:0] tmp_56_fu_408_p1;
wire   [21:0] tmp_42_fu_412_p2;
wire   [7:0] search_img_fu_422_p1;
wire   [7:0] template_img_fu_430_p1;
wire   [8:0] search_img_cast_fu_426_p1;
wire   [8:0] template_img_cast_fu_434_p1;
wire   [0:0] abscond_fu_449_p2;
wire   [8:0] neg_fu_444_p2;
wire   [8:0] abs_fu_454_p3;
wire  signed [31:0] abs_cast_fu_461_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        SAD_1_reg_189 <= SAD_fu_465_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_34_fu_280_p2 == 1'b0))) begin
        SAD_1_reg_189 <= minSAD_1_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        col_tpl_reg_178 <= col_tpl_1_reg_562;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_34_fu_280_p2 == 1'b0))) begin
        col_tpl_reg_178 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_40_fu_373_p2))) begin
        minSAD_1_reg_155 <= SAD_1_reg_189;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_32_fu_255_p2))) begin
        minSAD_1_reg_155 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_34_fu_280_p2 == 1'b0))) begin
        minSAD_fu_60 <= output_struct_SAD_0_s_fu_346_p3;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        minSAD_fu_60 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_34_fu_280_p2 == 1'b0))) begin
        output_struct_x_reg_132 <= col_img_reg_531;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_30_fu_228_p2))) begin
        output_struct_x_reg_132 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_32_fu_255_p2))) begin
        output_struct_y_reg_120 <= row_img_reg_518;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        output_struct_y_reg_120 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_40_fu_373_p2))) begin
        phi_mul_reg_167 <= next_mul_reg_541;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_32_fu_255_p2))) begin
        phi_mul_reg_167 <= ap_const_lv42_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == tmp_40_fu_373_p2))) begin
        row_tpl_reg_144 <= row_tpl_1_reg_549;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_32_fu_255_p2))) begin
        row_tpl_reg_144 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_img_reg_531 <= col_img_fu_260_p2;
        output_struct_x_cast_reg_523[30 : 0] <= output_struct_x_cast_fu_251_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        col_tpl_1_reg_562 <= col_tpl_1_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        next_mul_reg_541 <= next_mul_fu_270_p2;
        row_tpl_1_reg_549 <= row_tpl_1_fu_285_p2;
        tmp_45_reg_536 <= tmp_45_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_34_fu_280_p2 == 1'b0))) begin
        output_struct_x_writ_fu_68 <= output_struct_x_0_ou_fu_332_p3;
        output_struct_y_writ_fu_64 <= output_struct_y_0_ou_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_struct_y_cast_reg_510[30 : 0] <= output_struct_y_cast_fu_224_p1[30 : 0];
        row_img_reg_518 <= row_img_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_34_fu_280_p2 == 1'b0))) begin
        tmp_36_reg_554 <= tmp_36_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_43_reg_577 <= tmp_43_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_500 <= tmp_fu_207_p2;
        tmp_s_reg_505 <= tmp_s_fu_213_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_30_fu_228_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_30_fu_228_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        imINPUT_ce0 = 1'b1;
    end else begin
        imINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        tplINPUT_ce0 = 1'b1;
    end else begin
        tplINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((1'b0 == tmp_30_fu_228_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((1'b0 == tmp_32_fu_255_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((tmp_34_fu_280_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((1'b0 == tmp_40_fu_373_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SAD_fu_465_p2 = ($signed(abs_cast_fu_461_p1) + $signed(SAD_1_reg_189));

assign abs_cast_fu_461_p1 = $signed(abs_fu_454_p3);

assign abs_fu_454_p3 = ((abscond_fu_449_p2[0:0] === 1'b1) ? tmp_43_reg_577 : neg_fu_444_p2);

assign abscond_fu_449_p2 = (($signed(tmp_43_reg_577) > $signed(9'b000000000)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ap_return_0 = output_struct_x_writ_fu_68;

assign ap_return_1 = output_struct_y_writ_fu_64;

assign col_img_fu_260_p2 = (output_struct_x_reg_132 + ap_const_lv31_1);

assign col_tpl_1_fu_378_p2 = (col_tpl_reg_178 + ap_const_lv31_1);

assign col_tpl_cast_fu_369_p1 = col_tpl_reg_178;

assign imINPUT_address0 = tmp_47_cast_fu_403_p1;

assign neg_fu_444_p2 = (ap_const_lv9_0 - tmp_43_reg_577);

assign next_mul_fu_270_p2 = (ap_const_lv42_4B0 + phi_mul_reg_167);

assign or_cond_fu_326_p2 = (tmp_37_fu_314_p2 | tmp_39_fu_320_p2);

assign output_struct_SAD_0_s_fu_346_p3 = ((or_cond_fu_326_p2[0:0] === 1'b1) ? minSAD_1_reg_155 : minSAD_fu_60);

assign output_struct_x_0_ou_fu_332_p3 = ((or_cond_fu_326_p2[0:0] === 1'b1) ? output_struct_x_cast_reg_523 : output_struct_x_writ_fu_68);

assign output_struct_x_cast_fu_251_p1 = output_struct_x_reg_132;

assign output_struct_y_0_ou_fu_339_p3 = ((or_cond_fu_326_p2[0:0] === 1'b1) ? output_struct_y_cast_reg_510 : output_struct_y_writ_fu_64);

assign output_struct_y_cast_fu_224_p1 = output_struct_y_reg_120;

assign row_img_fu_233_p2 = (output_struct_y_reg_120 + ap_const_lv31_1);

assign row_tpl_1_fu_285_p2 = (ap_const_lv31_1 + row_tpl_reg_144);

assign row_tpl_cast_fu_276_p1 = row_tpl_reg_144;

assign search_img_cast_fu_426_p1 = search_img_fu_422_p1;

assign search_img_fu_422_p1 = imINPUT_q0[7:0];

assign template_img_cast_fu_434_p1 = template_img_fu_430_p1;

assign template_img_fu_430_p1 = tplINPUT_q0[7:0];

assign tmp_30_fu_228_p2 = (($signed(output_struct_y_cast_fu_224_p1) < $signed(tmp_reg_500)) ? 1'b1 : 1'b0);

assign tmp_32_fu_255_p2 = (($signed(output_struct_x_cast_fu_251_p1) < $signed(tmp_s_reg_505)) ? 1'b1 : 1'b0);

assign tmp_34_fu_280_p2 = (($signed(row_tpl_cast_fu_276_p1) < $signed(tplHeight)) ? 1'b1 : 1'b0);

assign tmp_36_fu_305_p2 = ($signed({{1'b0}, {ap_const_lv22_4B0}}) * $signed(tmp_51_fu_299_p2));

assign tmp_37_fu_314_p2 = (($signed(minSAD_fu_60) > $signed(minSAD_1_reg_155)) ? 1'b1 : 1'b0);

assign tmp_39_fu_320_p2 = ((minSAD_fu_60 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_40_fu_373_p2 = (($signed(col_tpl_cast_fu_369_p1) < $signed(tplWidth)) ? 1'b1 : 1'b0);

assign tmp_41_fu_398_p2 = (tmp_54_fu_392_p2 + tmp_36_reg_554);

assign tmp_42_fu_412_p2 = (tmp_56_fu_408_p1 + tmp_45_reg_536);

assign tmp_43_fu_438_p2 = (search_img_cast_fu_426_p1 - template_img_cast_fu_434_p1);

assign tmp_45_fu_266_p1 = phi_mul_reg_167[21:0];

assign tmp_46_fu_291_p1 = output_struct_y_reg_120[21:0];

assign tmp_47_cast_fu_403_p1 = $signed(tmp_41_fu_398_p2);

assign tmp_48_fu_295_p1 = row_tpl_reg_144[21:0];

assign tmp_50_cast_fu_417_p1 = tmp_42_fu_412_p2;

assign tmp_51_fu_299_p2 = (tmp_48_fu_295_p1 + tmp_46_fu_291_p1);

assign tmp_52_fu_384_p1 = col_tpl_reg_178[21:0];

assign tmp_53_fu_388_p1 = output_struct_x_reg_132[21:0];

assign tmp_54_fu_392_p2 = (tmp_53_fu_388_p1 + tmp_52_fu_384_p1);

assign tmp_56_fu_408_p1 = col_tpl_reg_178[21:0];

assign tmp_fu_207_p2 = (imHeight - tplHeight);

assign tmp_s_fu_213_p2 = (imWidth - tplWidth);

assign tplINPUT_address0 = tmp_50_cast_fu_417_p1;

always @ (posedge ap_clk) begin
    output_struct_y_cast_reg_510[31] <= 1'b0;
    output_struct_x_cast_reg_523[31] <= 1'b0;
end

endmodule //imDiff
