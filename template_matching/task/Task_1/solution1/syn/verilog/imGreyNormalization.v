// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imGreyNormalization (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imINPUT_address0,
        imINPUT_ce0,
        imINPUT_we0,
        imINPUT_d0,
        imINPUT_q0,
        imHeight,
        imWidth
);

parameter    ap_ST_fsm_state1 = 70'b1;
parameter    ap_ST_fsm_state2 = 70'b10;
parameter    ap_ST_fsm_state3 = 70'b100;
parameter    ap_ST_fsm_state4 = 70'b1000;
parameter    ap_ST_fsm_state5 = 70'b10000;
parameter    ap_ST_fsm_state6 = 70'b100000;
parameter    ap_ST_fsm_state7 = 70'b1000000;
parameter    ap_ST_fsm_state8 = 70'b10000000;
parameter    ap_ST_fsm_state9 = 70'b100000000;
parameter    ap_ST_fsm_state10 = 70'b1000000000;
parameter    ap_ST_fsm_state11 = 70'b10000000000;
parameter    ap_ST_fsm_state12 = 70'b100000000000;
parameter    ap_ST_fsm_state13 = 70'b1000000000000;
parameter    ap_ST_fsm_state14 = 70'b10000000000000;
parameter    ap_ST_fsm_state15 = 70'b100000000000000;
parameter    ap_ST_fsm_state16 = 70'b1000000000000000;
parameter    ap_ST_fsm_state17 = 70'b10000000000000000;
parameter    ap_ST_fsm_state18 = 70'b100000000000000000;
parameter    ap_ST_fsm_state19 = 70'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 70'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 70'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 70'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 70'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 70'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 70'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 70'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 70'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 70'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 70'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 70'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 70'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 70'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 70'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 70'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 70'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 70'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 70'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 70'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 70'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 70'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 70'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 70'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 70'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 70'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 70'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 70'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 70'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 70'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 70'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 70'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 70'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 70'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 70'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 70'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 70'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 70'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 70'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 70'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 70'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 70'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 70'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 70'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 70'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 70'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 70'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 70'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 70'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 70'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 70'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 70'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_3D = 32'b111101;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv42_0 = 42'b000000000000000000000000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_45 = 32'b1000101;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv42_4B0 = 42'b10010110000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv32_1010101 = 32'b1000000010000000100000001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [20:0] imINPUT_address0;
output   imINPUT_ce0;
output   imINPUT_we0;
output  [31:0] imINPUT_d0;
input  [31:0] imINPUT_q0;
input  [31:0] imHeight;
input  [31:0] imWidth;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[20:0] imINPUT_address0;
reg imINPUT_ce0;
reg imINPUT_we0;

(* fsm_encoding = "none" *) reg   [69:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] ap_CS_fsm_state4;
wire   [21:0] tmp_22_fu_229_p1;
reg   [21:0] tmp_22_reg_602;
wire   [0:0] ap_CS_fsm_state5;
wire   [41:0] next_mul_fu_233_p2;
reg   [41:0] next_mul_reg_607;
wire   [30:0] row_2_fu_248_p2;
reg   [30:0] row_2_reg_615;
wire   [31:0] tmp_2_fu_254_p2;
wire   [0:0] tmp_fu_243_p2;
wire   [30:0] col_2_fu_270_p2;
reg   [30:0] col_2_reg_628;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] tmp_4_fu_265_p2;
wire   [63:0] grp_fu_202_p1;
reg   [63:0] tmp_3_reg_638;
wire   [0:0] ap_CS_fsm_state14;
wire   [21:0] tmp_24_fu_348_p1;
reg   [21:0] tmp_24_reg_643;
wire   [0:0] ap_CS_fsm_state15;
wire   [41:0] next_mul3_fu_352_p2;
reg   [41:0] next_mul3_reg_648;
wire   [30:0] row_3_fu_367_p2;
reg   [30:0] row_3_reg_656;
wire   [30:0] col_3_fu_382_p2;
reg   [30:0] col_3_reg_664;
wire   [0:0] ap_CS_fsm_state16;
reg   [20:0] imOUTPUT_addr_1_reg_669;
wire   [0:0] tmp_9_fu_377_p2;
wire   [31:0] tmp_12_fu_410_p2;
reg   [31:0] tmp_12_reg_674;
wire   [0:0] ap_CS_fsm_state19;
wire   [31:0] tmp_13_fu_421_p2;
wire   [0:0] ap_CS_fsm_state20;
reg   [63:0] tmp_14_reg_685;
wire   [0:0] ap_CS_fsm_state25;
wire   [63:0] grp_fu_198_p2;
reg   [63:0] tmp_15_reg_690;
wire   [0:0] ap_CS_fsm_state56;
wire   [63:0] grp_fu_193_p2;
reg   [63:0] x_assign_reg_695;
wire   [0:0] ap_CS_fsm_state61;
reg   [0:0] p_Result_s_reg_700;
wire   [0:0] ap_CS_fsm_state62;
wire   [31:0] p_Val2_4_fu_546_p3;
reg   [31:0] p_Val2_4_reg_705;
wire  signed [31:0] p_Val2_s_fu_559_p3;
reg  signed [31:0] p_Val2_s_reg_711;
wire   [0:0] ap_CS_fsm_state63;
wire   [31:0] grp_fu_565_p2;
wire   [0:0] ap_CS_fsm_state69;
reg   [30:0] row_reg_127;
reg   [41:0] phi_mul_reg_138;
reg   [30:0] col_reg_149;
wire   [0:0] ap_CS_fsm_state9;
reg   [30:0] row_1_reg_160;
reg   [41:0] phi_mul2_reg_171;
reg   [30:0] col_1_reg_182;
wire   [0:0] tmp_5_fu_362_p2;
wire   [0:0] ap_CS_fsm_state70;
wire   [63:0] tmp_21_cast_fu_285_p1;
wire   [63:0] tmp_23_cast_fu_397_p1;
reg   [31:0] max_1_fu_78;
wire   [31:0] max_5_cast_fu_215_p1;
wire   [31:0] max_4_fu_330_p3;
reg   [31:0] max_fu_82;
wire   [31:0] max_6_max_1_cast_fu_320_p1;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state57;
wire   [0:0] ap_CS_fsm_state26;
reg   [31:0] grp_fu_202_p0;
wire   [7:0] max_5_fu_211_p1;
wire   [31:0] row_cast_fu_239_p1;
wire   [31:0] col_cast_fu_261_p1;
wire   [21:0] tmp_25_fu_276_p1;
wire   [21:0] tmp_6_fu_280_p2;
wire   [7:0] max_6_fu_290_p1;
wire   [31:0] max_6_cast_fu_298_p1;
wire   [0:0] tmp_8_fu_302_p2;
wire   [30:0] max_6_cast2_fu_294_p1;
wire   [30:0] tmp_29_fu_308_p1;
wire   [30:0] max_6_max_1_fu_312_p3;
wire   [0:0] tmp_7_fu_324_p2;
wire   [31:0] row_1_cast_fu_358_p1;
wire   [31:0] col_1_cast_fu_373_p1;
wire   [21:0] tmp_30_fu_388_p1;
wire   [21:0] tmp_16_fu_392_p2;
wire   [7:0] tmp_31_fu_402_p1;
wire   [31:0] tmp_11_cast_fu_406_p1;
wire   [31:0] tmp_32_fu_416_p2;
wire   [63:0] p_Val2_1_fu_427_p1;
wire   [51:0] loc_V_1_fu_448_p1;
wire   [52:0] p_Result_1_fu_452_p3;
wire   [10:0] loc_V_fu_438_p4;
wire   [11:0] tmp_i_i_i_cast1_fu_464_p1;
wire   [11:0] sh_assign_fu_468_p2;
wire   [10:0] tmp_i_i_13_fu_482_p2;
wire   [0:0] isNeg_fu_474_p3;
wire  signed [11:0] tmp_i_i_cast_fu_488_p1;
wire   [11:0] sh_assign_1_fu_492_p3;
wire  signed [31:0] sh_assign_1_cast_fu_500_p1;
wire   [52:0] tmp_66_i_i_cast_fu_508_p1;
wire   [135:0] tmp_i_i_fu_460_p1;
wire   [135:0] tmp_66_i_i_fu_504_p1;
wire   [52:0] tmp_67_i_i_fu_512_p2;
wire   [0:0] tmp_36_fu_524_p3;
wire   [135:0] tmp_68_i_i_fu_518_p2;
wire   [31:0] tmp_18_fu_532_p1;
wire   [31:0] tmp_19_fu_536_p4;
wire   [31:0] p_Val2_i_i_fu_554_p2;
wire   [25:0] grp_fu_565_p0;
wire   [0:0] ap_CS_fsm_state64;
reg   [69:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 70'b1;
end

imTemplateMatchinbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
imTemplateMatchinbkb_x_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_15_reg_690),
    .din1(ap_const_lv64_0),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

imTemplateMatchineOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
imTemplateMatchineOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_14_reg_685),
    .din1(tmp_3_reg_638),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

imTemplateMatchindEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
imTemplateMatchindEe_x_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_202_p0),
    .ce(1'b1),
    .dout(grp_fu_202_p1)
);

imTemplateMatchinfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imTemplateMatchinfYi_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_565_p0),
    .din1(p_Val2_s_reg_711),
    .ce(1'b1),
    .dout(grp_fu_565_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        col_1_reg_182 <= col_3_reg_664;
    end else if (((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == tmp_5_fu_362_p2))) begin
        col_1_reg_182 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        col_reg_149 <= col_2_reg_628;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(tmp_fu_243_p2 == 1'b0))) begin
        col_reg_149 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_1_fu_78 <= max_4_fu_330_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_1_fu_78 <= max_5_cast_fu_215_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
                max_fu_82[30 : 0] <= max_6_max_1_cast_fu_320_p1[30 : 0];
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
                max_fu_82[30 : 0] <= max_5_cast_fu_215_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        phi_mul2_reg_171 <= ap_const_lv42_0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == tmp_9_fu_377_p2))) begin
        phi_mul2_reg_171 <= next_mul3_reg_648;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == tmp_4_fu_265_p2))) begin
        phi_mul_reg_138 <= next_mul_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_mul_reg_138 <= ap_const_lv42_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        row_1_reg_160 <= ap_const_lv31_0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == tmp_9_fu_377_p2))) begin
        row_1_reg_160 <= row_3_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == tmp_4_fu_265_p2))) begin
        row_reg_127 <= row_2_reg_615;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        row_reg_127 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_2_reg_628 <= col_2_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        col_3_reg_664 <= col_3_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == tmp_9_fu_377_p2))) begin
        imOUTPUT_addr_1_reg_669 <= tmp_23_cast_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        next_mul3_reg_648 <= next_mul3_fu_352_p2;
        row_3_reg_656 <= row_3_fu_367_p2;
        tmp_24_reg_643 <= tmp_24_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        next_mul_reg_607 <= next_mul_fu_233_p2;
        row_2_reg_615 <= row_2_fu_248_p2;
        tmp_22_reg_602 <= tmp_22_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        p_Result_s_reg_700 <= p_Val2_1_fu_427_p1[ap_const_lv32_3F];
        p_Val2_4_reg_705 <= p_Val2_4_fu_546_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        p_Val2_s_reg_711 <= p_Val2_s_fu_559_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_12_reg_674 <= tmp_12_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_14_reg_685 <= grp_fu_202_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_15_reg_690 <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_3_reg_638 <= grp_fu_202_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        x_assign_reg_695 <= grp_fu_193_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (1'b0 == tmp_5_fu_362_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == tmp_5_fu_362_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_202_p0 = tmp_13_fu_421_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_202_p0 = tmp_2_fu_254_p2;
    end else begin
        grp_fu_202_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        imINPUT_address0 = imOUTPUT_addr_1_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        imINPUT_address0 = tmp_23_cast_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        imINPUT_address0 = tmp_21_cast_fu_285_p1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        imINPUT_address0 = ap_const_lv64_0;
    end else begin
        imINPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18))) begin
        imINPUT_ce0 = 1'b1;
    end else begin
        imINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        imINPUT_we0 = 1'b1;
    end else begin
        imINPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (~(tmp_fu_243_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((1'b0 == tmp_4_fu_265_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if ((1'b0 == tmp_5_fu_362_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((1'b0 == tmp_9_fu_377_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_37];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_38];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_3C];

assign ap_CS_fsm_state62 = ap_CS_fsm[ap_const_lv32_3D];

assign ap_CS_fsm_state63 = ap_CS_fsm[ap_const_lv32_3E];

assign ap_CS_fsm_state64 = ap_CS_fsm[ap_const_lv32_3F];

assign ap_CS_fsm_state69 = ap_CS_fsm[ap_const_lv32_44];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state70 = ap_CS_fsm[ap_const_lv32_45];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign col_1_cast_fu_373_p1 = col_1_reg_182;

assign col_2_fu_270_p2 = (col_reg_149 + ap_const_lv31_1);

assign col_3_fu_382_p2 = (col_1_reg_182 + ap_const_lv31_1);

assign col_cast_fu_261_p1 = col_reg_149;

assign grp_fu_565_p0 = ap_const_lv32_1010101;

assign imINPUT_d0 = grp_fu_565_p2;

assign isNeg_fu_474_p3 = sh_assign_fu_468_p2[ap_const_lv32_B];

assign loc_V_1_fu_448_p1 = p_Val2_1_fu_427_p1[51:0];

assign loc_V_fu_438_p4 = {{p_Val2_1_fu_427_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign max_4_fu_330_p3 = ((tmp_7_fu_324_p2[0:0] === 1'b1) ? max_6_cast_fu_298_p1 : max_1_fu_78);

assign max_5_cast_fu_215_p1 = max_5_fu_211_p1;

assign max_5_fu_211_p1 = imINPUT_q0[7:0];

assign max_6_cast2_fu_294_p1 = max_6_fu_290_p1;

assign max_6_cast_fu_298_p1 = max_6_fu_290_p1;

assign max_6_fu_290_p1 = imINPUT_q0[7:0];

assign max_6_max_1_cast_fu_320_p1 = max_6_max_1_fu_312_p3;

assign max_6_max_1_fu_312_p3 = ((tmp_8_fu_302_p2[0:0] === 1'b1) ? max_6_cast2_fu_294_p1 : tmp_29_fu_308_p1);

assign next_mul3_fu_352_p2 = (ap_const_lv42_4B0 + phi_mul2_reg_171);

assign next_mul_fu_233_p2 = (ap_const_lv42_4B0 + phi_mul_reg_138);

assign p_Result_1_fu_452_p3 = {{1'b1}, {loc_V_1_fu_448_p1}};

assign p_Val2_1_fu_427_p1 = x_assign_reg_695;

assign p_Val2_4_fu_546_p3 = ((isNeg_fu_474_p3[0:0] === 1'b1) ? tmp_18_fu_532_p1 : tmp_19_fu_536_p4);

assign p_Val2_i_i_fu_554_p2 = (ap_const_lv32_0 - p_Val2_4_reg_705);

assign p_Val2_s_fu_559_p3 = ((p_Result_s_reg_700[0:0] === 1'b1) ? p_Val2_i_i_fu_554_p2 : p_Val2_4_reg_705);

assign row_1_cast_fu_358_p1 = row_1_reg_160;

assign row_2_fu_248_p2 = (ap_const_lv31_1 + row_reg_127);

assign row_3_fu_367_p2 = (ap_const_lv31_1 + row_1_reg_160);

assign row_cast_fu_239_p1 = row_reg_127;

assign sh_assign_1_cast_fu_500_p1 = $signed(sh_assign_1_fu_492_p3);

assign sh_assign_1_fu_492_p3 = ((isNeg_fu_474_p3[0:0] === 1'b1) ? tmp_i_i_cast_fu_488_p1 : sh_assign_fu_468_p2);

assign sh_assign_fu_468_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_i_cast1_fu_464_p1));

assign tmp_11_cast_fu_406_p1 = tmp_31_fu_402_p1;

assign tmp_12_fu_410_p2 = (tmp_11_cast_fu_406_p1 - max_1_fu_78);

assign tmp_13_fu_421_p2 = (tmp_32_fu_416_p2 - tmp_12_reg_674);

assign tmp_16_fu_392_p2 = (tmp_30_fu_388_p1 + tmp_24_reg_643);

assign tmp_18_fu_532_p1 = tmp_36_fu_524_p3;

assign tmp_19_fu_536_p4 = {{tmp_68_i_i_fu_518_p2[ap_const_lv32_53 : ap_const_lv32_34]}};

assign tmp_21_cast_fu_285_p1 = tmp_6_fu_280_p2;

assign tmp_22_fu_229_p1 = phi_mul_reg_138[21:0];

assign tmp_23_cast_fu_397_p1 = tmp_16_fu_392_p2;

assign tmp_24_fu_348_p1 = phi_mul2_reg_171[21:0];

assign tmp_25_fu_276_p1 = col_reg_149[21:0];

assign tmp_29_fu_308_p1 = max_fu_82[30:0];

assign tmp_2_fu_254_p2 = (max_fu_82 - max_1_fu_78);

assign tmp_30_fu_388_p1 = col_1_reg_182[21:0];

assign tmp_31_fu_402_p1 = imINPUT_q0[7:0];

assign tmp_32_fu_416_p2 = tmp_12_reg_674 << ap_const_lv32_8;

assign tmp_36_fu_524_p3 = tmp_67_i_i_fu_512_p2[ap_const_lv32_34];

assign tmp_4_fu_265_p2 = (($signed(col_cast_fu_261_p1) < $signed(imWidth)) ? 1'b1 : 1'b0);

assign tmp_5_fu_362_p2 = (($signed(row_1_cast_fu_358_p1) < $signed(imHeight)) ? 1'b1 : 1'b0);

assign tmp_66_i_i_cast_fu_508_p1 = $unsigned(sh_assign_1_cast_fu_500_p1);

assign tmp_66_i_i_fu_504_p1 = $unsigned(sh_assign_1_cast_fu_500_p1);

assign tmp_67_i_i_fu_512_p2 = p_Result_1_fu_452_p3 >> tmp_66_i_i_cast_fu_508_p1;

assign tmp_68_i_i_fu_518_p2 = tmp_i_i_fu_460_p1 << tmp_66_i_i_fu_504_p1;

assign tmp_6_fu_280_p2 = (tmp_25_fu_276_p1 + tmp_22_reg_602);

assign tmp_7_fu_324_p2 = (($signed(max_6_cast_fu_298_p1) < $signed(max_1_fu_78)) ? 1'b1 : 1'b0);

assign tmp_8_fu_302_p2 = (($signed(max_6_cast_fu_298_p1) > $signed(max_fu_82)) ? 1'b1 : 1'b0);

assign tmp_9_fu_377_p2 = (($signed(col_1_cast_fu_373_p1) < $signed(imWidth)) ? 1'b1 : 1'b0);

assign tmp_fu_243_p2 = (($signed(row_cast_fu_239_p1) < $signed(imHeight)) ? 1'b1 : 1'b0);

assign tmp_i_i_13_fu_482_p2 = (ap_const_lv11_3FF - loc_V_fu_438_p4);

assign tmp_i_i_cast_fu_488_p1 = $signed(tmp_i_i_13_fu_482_p2);

assign tmp_i_i_fu_460_p1 = p_Result_1_fu_452_p3;

assign tmp_i_i_i_cast1_fu_464_p1 = loc_V_fu_438_p4;

always @ (posedge ap_clk) begin
    max_fu_82[31] <= 1'b0;
end

endmodule //imGreyNormalization
