-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imConstructOutputIma is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imOUTPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imOUTPUT_ce0 : OUT STD_LOGIC;
    imOUTPUT_we0 : OUT STD_LOGIC;
    imOUTPUT_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tplINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    tplINPUT_ce0 : OUT STD_LOGIC;
    tplINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tplHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    tplWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    output_struct_x_read : IN STD_LOGIC_VECTOR (31 downto 0);
    output_struct_y_read : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of imConstructOutputIma is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv42_4B0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010010110000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv22_4B0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010010110000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_92_fu_128_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_92_reg_243 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_132_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul_reg_248 : STD_LOGIC_VECTOR (41 downto 0);
    signal row_5_fu_147_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_5_reg_256 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_166_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_s_reg_261 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_5_fu_181_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_5_reg_269 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_51_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_214_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_57_reg_279 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_reg_95 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_106 : STD_LOGIC_VECTOR (41 downto 0);
    signal col_reg_117 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_63_cast_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_cast_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_fu_157_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_93_fu_153_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_95_fu_160_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal col_cast_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_fu_187_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_56_fu_191_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_98_fu_205_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_97_fu_201_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_99_fu_208_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                col_reg_117 <= col_5_reg_269;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_142_p2 = ap_const_lv1_0)))) then 
                col_reg_117 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_51_fu_176_p2))) then 
                phi_mul_reg_106 <= next_mul_reg_248;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_106 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    row_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_51_fu_176_p2))) then 
                row_reg_95 <= row_5_reg_256;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                row_reg_95 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                col_5_reg_269 <= col_5_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                next_mul_reg_248 <= next_mul_fu_132_p2;
                row_5_reg_256 <= row_5_fu_147_p2;
                tmp_92_reg_243 <= tmp_92_fu_128_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_51_fu_176_p2)))) then
                tmp_57_reg_279 <= tmp_57_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_142_p2 = ap_const_lv1_0)))) then
                tmp_s_reg_261 <= tmp_s_fu_166_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_142_p2, tmp_51_fu_176_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((tmp_fu_142_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((ap_const_lv1_0 = tmp_51_fu_176_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_142_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_142_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_142_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_142_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_5_fu_181_p2 <= std_logic_vector(unsigned(col_reg_117) + unsigned(ap_const_lv31_1));
    col_cast_fu_172_p1 <= std_logic_vector(resize(unsigned(col_reg_117),32));
    imOUTPUT_address0 <= tmp_64_cast_fu_219_p1(21 - 1 downto 0);

    imOUTPUT_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            imOUTPUT_ce0 <= ap_const_logic_1;
        else 
            imOUTPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imOUTPUT_d0 <= tplINPUT_q0;

    imOUTPUT_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            imOUTPUT_we0 <= ap_const_logic_1;
        else 
            imOUTPUT_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_132_p2 <= std_logic_vector(unsigned(ap_const_lv42_4B0) + unsigned(phi_mul_reg_106));
    row_5_fu_147_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(row_reg_95));
    row_cast_fu_138_p1 <= std_logic_vector(resize(unsigned(row_reg_95),32));
    tmp_51_fu_176_p2 <= "1" when (signed(col_cast_fu_172_p1) < signed(tplWidth)) else "0";
    tmp_56_fu_191_p2 <= std_logic_vector(unsigned(tmp_92_reg_243) + unsigned(tmp_96_fu_187_p1));
    tmp_57_fu_214_p2 <= std_logic_vector(unsigned(tmp_s_reg_261) + unsigned(tmp_99_fu_208_p2));
    tmp_63_cast_fu_196_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_191_p2),64));
        tmp_64_cast_fu_219_p1 <= std_logic_vector(resize(signed(tmp_57_reg_279),64));

    tmp_92_fu_128_p1 <= phi_mul_reg_106(22 - 1 downto 0);
    tmp_93_fu_153_p1 <= row_reg_95(22 - 1 downto 0);
    tmp_94_fu_157_p1 <= output_struct_y_read(22 - 1 downto 0);
    tmp_95_fu_160_p2 <= std_logic_vector(unsigned(tmp_94_fu_157_p1) + unsigned(tmp_93_fu_153_p1));
    tmp_96_fu_187_p1 <= col_reg_117(22 - 1 downto 0);
    tmp_97_fu_201_p1 <= col_reg_117(22 - 1 downto 0);
    tmp_98_fu_205_p1 <= output_struct_x_read(22 - 1 downto 0);
    tmp_99_fu_208_p2 <= std_logic_vector(unsigned(tmp_98_fu_205_p1) + unsigned(tmp_97_fu_201_p1));
    tmp_fu_142_p2 <= "1" when (signed(row_cast_fu_138_p1) < signed(tplHeight)) else "0";
    tmp_s_fu_166_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &ap_const_lv22_4B0) * signed(tmp_95_fu_160_p2))), 22));
    tplINPUT_address0 <= tmp_63_cast_fu_196_p1(21 - 1 downto 0);

    tplINPUT_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            tplINPUT_ce0 <= ap_const_logic_1;
        else 
            tplINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
