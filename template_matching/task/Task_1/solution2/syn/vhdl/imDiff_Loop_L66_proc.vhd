-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imDiff_Loop_L66_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    tplHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    imWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    tplWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    imINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imINPUT_ce0 : OUT STD_LOGIC;
    imINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tplINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    tplINPUT_ce0 : OUT STD_LOGIC;
    tplINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_struct : OUT STD_LOGIC_VECTOR (95 downto 0);
    output_struct_ap_vld : OUT STD_LOGIC );
end;


architecture behav of imDiff_Loop_L66_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv42_4B0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010010110000";
    constant ap_const_lv22_4B0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010010110000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_img_cast_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_img_cast_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_img_1_fu_318_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_img_1_reg_905 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_img_cast_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_img_cast_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal col_img_1_fu_333_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_img_1_reg_918 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_48_fu_339_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_48_reg_923 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_mul_fu_343_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul_reg_931 : STD_LOGIC_VECTOR (41 downto 0);
    signal row_tpl_1_fu_358_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_tpl_1_reg_939 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_fu_378_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_41_reg_944 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_40_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_444_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_67_reg_957 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_68_fu_448_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_68_reg_962 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_69_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_546_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_46_reg_983 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal SAD_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_77_1_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_1_fu_639_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_81_1_reg_1009 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal SAD_s_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_s_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_77_2_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_2_fu_731_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_81_2_reg_1035 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal SAD_2_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_2_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_77_3_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_tpl_1_3_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_tpl_1_3_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_3_fu_834_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_81_3_reg_1066 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal SAD_3_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal row_img_reg_195 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_39_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_img_reg_207 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_38_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_tpl_reg_219 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal minSAD_1_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_242 : STD_LOGIC_VECTOR (41 downto 0);
    signal col_tpl_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_1_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_1_lcssa_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_cast_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal minSAD_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal row_tpl_cast_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_368_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_49_fu_364_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_61_fu_372_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_62_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_402_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_63_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_412_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_64_fu_418_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_65_fu_428_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_42_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_496_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_70_fu_492_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_72_fu_500_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_44_fu_506_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_74_fu_516_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_45_fu_520_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_73_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_img_cast_fu_534_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal template_img_cast_fu_542_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_552_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_fu_562_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_cast_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_tpl_1_s_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_590_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_77_fu_594_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_47_fu_599_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_79_fu_609_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_50_fu_613_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_78_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_80_fu_631_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_img_1_cast_fu_627_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal template_img_1_cast_fu_635_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_1_fu_645_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_1_fu_655_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_1_cast_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_tpl_1_1_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_682_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_82_fu_686_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_51_fu_691_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_84_fu_701_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_53_fu_705_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_83_fu_715_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_723_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_img_2_cast_fu_719_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal template_img_2_cast_fu_727_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_2_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_2_fu_737_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_2_fu_747_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_2_cast_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_tpl_1_2_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_778_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_86_fu_774_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_88_fu_782_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_54_fu_788_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_90_fu_798_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_55_fu_802_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_89_fu_818_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_826_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_img_3_cast_fu_822_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal template_img_3_cast_fu_830_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_3_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_3_fu_840_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_3_fu_850_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_3_cast_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_38_fu_313_p2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    SAD_1_lcssa_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_77_3_fu_769_p2))) then 
                SAD_1_lcssa_reg_276 <= SAD_2_fu_758_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_77_2_fu_677_p2))) then 
                SAD_1_lcssa_reg_276 <= SAD_s_fu_666_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_77_1_fu_585_p2))) then 
                SAD_1_lcssa_reg_276 <= SAD_fu_573_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_69_fu_487_p2)))) then 
                SAD_1_lcssa_reg_276 <= SAD_1_reg_265;
            end if; 
        end if;
    end process;

    SAD_1_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                SAD_1_reg_265 <= SAD_3_fu_861_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_40_fu_353_p2 = ap_const_lv1_0)))) then 
                SAD_1_reg_265 <= minSAD_1_reg_230;
            end if; 
        end if;
    end process;

    col_img_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_40_fu_353_p2 = ap_const_lv1_0))) then 
                col_img_reg_207 <= col_img_1_reg_918;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_38_fu_313_p2)))) then 
                col_img_reg_207 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    col_tpl_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                col_tpl_reg_253 <= col_tpl_1_3_reg_1061;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_40_fu_353_p2 = ap_const_lv1_0)))) then 
                col_tpl_reg_253 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minSAD_1_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                minSAD_1_reg_230 <= SAD_1_lcssa_reg_276;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_39_fu_328_p2)))) then 
                minSAD_1_reg_230 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minSAD_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_40_fu_353_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = or_cond_fu_467_p2)))) then 
                minSAD_fu_88 <= minSAD_1_reg_230;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                minSAD_fu_88 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                phi_mul_reg_242 <= next_mul_reg_931;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_39_fu_328_p2)))) then 
                phi_mul_reg_242 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    row_img_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_39_fu_328_p2))) then 
                row_img_reg_195 <= row_img_1_reg_905;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                row_img_reg_195 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    row_tpl_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                row_tpl_reg_219 <= row_tpl_1_reg_939;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_39_fu_328_p2)))) then 
                row_tpl_reg_219 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                SAD_2_reg_1042 <= SAD_2_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                SAD_reg_990 <= SAD_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                SAD_s_reg_1016 <= SAD_s_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                col_img_1_reg_918 <= col_img_1_fu_333_p2;
                    col_img_cast_reg_910(30 downto 0) <= col_img_cast_fu_324_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = tmp_77_3_fu_769_p2)))) then
                col_tpl_1_3_reg_1061 <= col_tpl_1_3_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                next_mul_reg_931 <= next_mul_fu_343_p2;
                row_tpl_1_reg_939 <= row_tpl_1_fu_358_p2;
                tmp_48_reg_923 <= tmp_48_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                row_img_1_reg_905 <= row_img_1_fu_318_p2;
                    row_img_cast_reg_897(30 downto 0) <= row_img_cast_fu_309_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_40_fu_353_p2 = ap_const_lv1_0)))) then
                tmp_41_reg_944 <= tmp_41_fu_378_p2;
                    tmp_66_reg_952(31 downto 2) <= tmp_66_fu_436_p3(31 downto 2);
                tmp_67_reg_957 <= tmp_67_fu_444_p1;
                tmp_68_reg_962 <= tmp_68_fu_448_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                tmp_46_reg_983 <= tmp_46_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                tmp_81_1_reg_1009 <= tmp_81_1_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                tmp_81_2_reg_1035 <= tmp_81_2_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                tmp_81_3_reg_1066 <= tmp_81_3_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then
                tmp_reg_887 <= tmp_fu_292_p2;
                tmp_s_reg_892 <= tmp_s_fu_298_p2;
            end if;
        end if;
    end process;
    row_img_cast_reg_897(31) <= '0';
    col_img_cast_reg_910(31) <= '0';
    tmp_66_reg_952(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, tmp_40_fu_353_p2, tmp_69_fu_487_p2, tmp_77_1_fu_585_p2, tmp_77_2_fu_677_p2, tmp_77_3_fu_769_p2, tmp_39_fu_328_p2, tmp_38_fu_313_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_38_fu_313_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((ap_const_lv1_0 = tmp_39_fu_328_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((tmp_40_fu_353_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = tmp_69_fu_487_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((ap_const_lv1_0 = tmp_77_1_fu_585_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if ((ap_const_lv1_0 = tmp_77_2_fu_677_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((ap_const_lv1_0 = tmp_77_3_fu_769_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    SAD_2_fu_758_p2 <= std_logic_vector(unsigned(SAD_s_reg_1016) + unsigned(abs_2_cast_fu_754_p1));
    SAD_3_fu_861_p2 <= std_logic_vector(unsigned(SAD_2_reg_1042) + unsigned(abs_3_cast_fu_857_p1));
    SAD_fu_573_p2 <= std_logic_vector(unsigned(SAD_1_reg_265) + unsigned(abs_cast_fu_569_p1));
    SAD_s_fu_666_p2 <= std_logic_vector(unsigned(SAD_reg_990) + unsigned(abs_1_cast_fu_662_p1));
        abs_1_cast_fu_662_p1 <= std_logic_vector(resize(signed(abs_1_fu_655_p3),32));

    abs_1_fu_655_p3 <= 
        tmp_81_1_reg_1009 when (abscond_1_fu_650_p2(0) = '1') else 
        neg_1_fu_645_p2;
        abs_2_cast_fu_754_p1 <= std_logic_vector(resize(signed(abs_2_fu_747_p3),32));

    abs_2_fu_747_p3 <= 
        tmp_81_2_reg_1035 when (abscond_2_fu_742_p2(0) = '1') else 
        neg_2_fu_737_p2;
        abs_3_cast_fu_857_p1 <= std_logic_vector(resize(signed(abs_3_fu_850_p3),32));

    abs_3_fu_850_p3 <= 
        tmp_81_3_reg_1066 when (abscond_3_fu_845_p2(0) = '1') else 
        neg_3_fu_840_p2;
        abs_cast_fu_569_p1 <= std_logic_vector(resize(signed(abs_fu_562_p3),32));

    abs_fu_562_p3 <= 
        tmp_46_reg_983 when (abscond_fu_557_p2(0) = '1') else 
        neg_fu_552_p2;
    abscond_1_fu_650_p2 <= "1" when (signed(tmp_81_1_reg_1009) > signed(ap_const_lv9_0)) else "0";
    abscond_2_fu_742_p2 <= "1" when (signed(tmp_81_2_reg_1035) > signed(ap_const_lv9_0)) else "0";
    abscond_3_fu_845_p2 <= "1" when (signed(tmp_81_3_reg_1066) > signed(ap_const_lv9_0)) else "0";
    abscond_fu_557_p2 <= "1" when (signed(tmp_46_reg_983) > signed(ap_const_lv9_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_38_fu_313_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_38_fu_313_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_38_fu_313_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_38_fu_313_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_img_1_fu_333_p2 <= std_logic_vector(unsigned(col_img_reg_207) + unsigned(ap_const_lv31_1));
    col_img_cast_fu_324_p1 <= std_logic_vector(resize(unsigned(col_img_reg_207),32));
    col_tpl_1_1_fu_671_p2 <= (col_tpl_reg_253 or ap_const_lv32_2);
    col_tpl_1_2_fu_763_p2 <= (col_tpl_reg_253 or ap_const_lv32_3);
    col_tpl_1_3_fu_812_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(col_tpl_reg_253));
    col_tpl_1_s_fu_579_p2 <= (col_tpl_reg_253 or ap_const_lv32_1);

    imINPUT_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, tmp_53_cast_fu_511_p1, tmp_55_cast_fu_604_p1, tmp_57_cast_fu_696_p1, tmp_59_cast_fu_793_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            imINPUT_address0 <= tmp_59_cast_fu_793_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            imINPUT_address0 <= tmp_57_cast_fu_696_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            imINPUT_address0 <= tmp_55_cast_fu_604_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            imINPUT_address0 <= tmp_53_cast_fu_511_p1(21 - 1 downto 0);
        else 
            imINPUT_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    imINPUT_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)))) then 
            imINPUT_ce0 <= ap_const_logic_1;
        else 
            imINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neg_1_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_81_1_reg_1009));
    neg_2_fu_737_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_81_2_reg_1035));
    neg_3_fu_840_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_81_3_reg_1066));
    neg_fu_552_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_46_reg_983));
    next_mul_fu_343_p2 <= std_logic_vector(unsigned(ap_const_lv42_4B0) + unsigned(phi_mul_reg_242));
    or_cond_fu_467_p2 <= (tmp_42_fu_455_p2 or tmp_43_fu_461_p2);
    output_struct <= ((minSAD_1_reg_230 & row_img_cast_reg_897) & col_img_cast_reg_910);

    output_struct_ap_vld_assign_proc : process(ap_CS_fsm_state4, tmp_40_fu_353_p2, or_cond_fu_467_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_40_fu_353_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = or_cond_fu_467_p2)))) then 
            output_struct_ap_vld <= ap_const_logic_1;
        else 
            output_struct_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_fu_402_p4 <= p_neg_fu_397_p2(31 downto 2);
    p_neg_fu_397_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFD) - signed(tplWidth));
    p_neg_t_fu_412_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(p_lshr_fu_402_p4));
    row_img_1_fu_318_p2 <= std_logic_vector(unsigned(row_img_reg_195) + unsigned(ap_const_lv31_1));
    row_img_cast_fu_309_p1 <= std_logic_vector(resize(unsigned(row_img_reg_195),32));
    row_tpl_1_fu_358_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(row_tpl_reg_219));
    row_tpl_cast_fu_349_p1 <= std_logic_vector(resize(unsigned(row_tpl_reg_219),32));
    search_img_1_cast_fu_627_p1 <= std_logic_vector(resize(unsigned(tmp_78_fu_623_p1),9));
    search_img_2_cast_fu_719_p1 <= std_logic_vector(resize(unsigned(tmp_83_fu_715_p1),9));
    search_img_3_cast_fu_822_p1 <= std_logic_vector(resize(unsigned(tmp_89_fu_818_p1),9));
    search_img_cast_fu_534_p1 <= std_logic_vector(resize(unsigned(tmp_73_fu_530_p1),9));
    template_img_1_cast_fu_635_p1 <= std_logic_vector(resize(unsigned(tmp_80_fu_631_p1),9));
    template_img_2_cast_fu_727_p1 <= std_logic_vector(resize(unsigned(tmp_85_fu_723_p1),9));
    template_img_3_cast_fu_830_p1 <= std_logic_vector(resize(unsigned(tmp_91_fu_826_p1),9));
    template_img_cast_fu_542_p1 <= std_logic_vector(resize(unsigned(tmp_75_fu_538_p1),9));
    tmp_38_fu_313_p2 <= "1" when (signed(row_img_cast_fu_309_p1) < signed(tmp_reg_887)) else "0";
    tmp_39_fu_328_p2 <= "1" when (signed(col_img_cast_fu_324_p1) < signed(tmp_s_reg_892)) else "0";
    tmp_40_fu_353_p2 <= "1" when (signed(row_tpl_cast_fu_349_p1) < signed(tplHeight)) else "0";
    tmp_41_fu_378_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &ap_const_lv22_4B0) * signed(tmp_61_fu_372_p2))), 22));
    tmp_42_fu_455_p2 <= "1" when (signed(minSAD_fu_88) > signed(minSAD_1_reg_230)) else "0";
    tmp_43_fu_461_p2 <= "1" when (minSAD_fu_88 = ap_const_lv32_0) else "0";
    tmp_44_fu_506_p2 <= std_logic_vector(unsigned(tmp_72_fu_500_p2) + unsigned(tmp_41_reg_944));
    tmp_45_fu_520_p2 <= std_logic_vector(unsigned(tmp_74_fu_516_p1) + unsigned(tmp_48_reg_923));
    tmp_46_fu_546_p2 <= std_logic_vector(unsigned(search_img_cast_fu_534_p1) - unsigned(template_img_cast_fu_542_p1));
    tmp_47_fu_599_p2 <= std_logic_vector(unsigned(tmp_77_fu_594_p2) + unsigned(tmp_41_reg_944));
    tmp_48_fu_339_p1 <= phi_mul_reg_242(22 - 1 downto 0);
    tmp_49_fu_364_p1 <= row_tpl_reg_219(22 - 1 downto 0);
    tmp_50_fu_613_p2 <= std_logic_vector(unsigned(tmp_79_fu_609_p1) + unsigned(tmp_48_reg_923));
    tmp_51_fu_691_p2 <= std_logic_vector(unsigned(tmp_82_fu_686_p2) + unsigned(tmp_41_reg_944));
    tmp_52_fu_368_p1 <= row_img_reg_195(22 - 1 downto 0);
        tmp_53_cast_fu_511_p1 <= std_logic_vector(resize(signed(tmp_44_fu_506_p2),64));

    tmp_53_fu_705_p2 <= std_logic_vector(unsigned(tmp_84_fu_701_p1) + unsigned(tmp_48_reg_923));
    tmp_54_cast_fu_525_p1 <= std_logic_vector(resize(unsigned(tmp_45_fu_520_p2),64));
    tmp_54_fu_788_p2 <= std_logic_vector(unsigned(tmp_88_fu_782_p2) + unsigned(tmp_41_reg_944));
        tmp_55_cast_fu_604_p1 <= std_logic_vector(resize(signed(tmp_47_fu_599_p2),64));

    tmp_55_fu_802_p2 <= std_logic_vector(unsigned(tmp_90_fu_798_p1) + unsigned(tmp_48_reg_923));
    tmp_56_cast_fu_618_p1 <= std_logic_vector(resize(unsigned(tmp_50_fu_613_p2),64));
        tmp_57_cast_fu_696_p1 <= std_logic_vector(resize(signed(tmp_51_fu_691_p2),64));

    tmp_58_cast_fu_710_p1 <= std_logic_vector(resize(unsigned(tmp_53_fu_705_p2),64));
        tmp_59_cast_fu_793_p1 <= std_logic_vector(resize(signed(tmp_54_fu_788_p2),64));

    tmp_60_cast_fu_807_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_802_p2),64));
    tmp_61_fu_372_p2 <= std_logic_vector(unsigned(tmp_52_fu_368_p1) + unsigned(tmp_49_fu_364_p1));
    tmp_62_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(tplWidth));
    tmp_63_fu_389_p3 <= tmp_62_fu_384_p2(31 downto 31);
    tmp_64_fu_418_p4 <= tmp_62_fu_384_p2(31 downto 2);
    tmp_65_fu_428_p3 <= 
        p_neg_t_fu_412_p2 when (tmp_63_fu_389_p3(0) = '1') else 
        tmp_64_fu_418_p4;
    tmp_66_fu_436_p3 <= (tmp_65_fu_428_p3 & ap_const_lv2_0);
    tmp_67_fu_444_p1 <= col_img_reg_207(22 - 1 downto 0);
    tmp_68_fu_448_p1 <= col_img_reg_207(22 - 1 downto 0);
    tmp_69_fu_487_p2 <= "1" when (col_tpl_reg_253 = tmp_66_reg_952) else "0";
    tmp_70_fu_492_p1 <= col_img_reg_207(22 - 1 downto 0);
    tmp_71_fu_496_p1 <= col_tpl_reg_253(22 - 1 downto 0);
    tmp_72_fu_500_p2 <= std_logic_vector(unsigned(tmp_71_fu_496_p1) + unsigned(tmp_70_fu_492_p1));
    tmp_73_fu_530_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_74_fu_516_p1 <= col_tpl_reg_253(22 - 1 downto 0);
    tmp_75_fu_538_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_76_fu_590_p1 <= col_tpl_1_s_fu_579_p2(22 - 1 downto 0);
    tmp_77_1_fu_585_p2 <= "1" when (signed(col_tpl_1_s_fu_579_p2) < signed(tplWidth)) else "0";
    tmp_77_2_fu_677_p2 <= "1" when (signed(col_tpl_1_1_fu_671_p2) < signed(tplWidth)) else "0";
    tmp_77_3_fu_769_p2 <= "1" when (signed(col_tpl_1_2_fu_763_p2) < signed(tplWidth)) else "0";
    tmp_77_fu_594_p2 <= std_logic_vector(unsigned(tmp_76_fu_590_p1) + unsigned(tmp_68_reg_962));
    tmp_78_fu_623_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_79_fu_609_p1 <= col_tpl_1_s_fu_579_p2(22 - 1 downto 0);
    tmp_80_fu_631_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_81_1_fu_639_p2 <= std_logic_vector(unsigned(search_img_1_cast_fu_627_p1) - unsigned(template_img_1_cast_fu_635_p1));
    tmp_81_2_fu_731_p2 <= std_logic_vector(unsigned(search_img_2_cast_fu_719_p1) - unsigned(template_img_2_cast_fu_727_p1));
    tmp_81_3_fu_834_p2 <= std_logic_vector(unsigned(search_img_3_cast_fu_822_p1) - unsigned(template_img_3_cast_fu_830_p1));
    tmp_81_fu_682_p1 <= col_tpl_1_1_fu_671_p2(22 - 1 downto 0);
    tmp_82_fu_686_p2 <= std_logic_vector(unsigned(tmp_81_fu_682_p1) + unsigned(tmp_67_reg_957));
    tmp_83_fu_715_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_84_fu_701_p1 <= col_tpl_1_1_fu_671_p2(22 - 1 downto 0);
    tmp_85_fu_723_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_86_fu_774_p1 <= col_img_reg_207(22 - 1 downto 0);
    tmp_87_fu_778_p1 <= col_tpl_1_2_fu_763_p2(22 - 1 downto 0);
    tmp_88_fu_782_p2 <= std_logic_vector(unsigned(tmp_87_fu_778_p1) + unsigned(tmp_86_fu_774_p1));
    tmp_89_fu_818_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_90_fu_798_p1 <= col_tpl_1_2_fu_763_p2(22 - 1 downto 0);
    tmp_91_fu_826_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_fu_292_p2 <= std_logic_vector(unsigned(imHeight) - unsigned(tplHeight));
    tmp_s_fu_298_p2 <= std_logic_vector(unsigned(imWidth) - unsigned(tplWidth));

    tplINPUT_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, tmp_54_cast_fu_525_p1, tmp_56_cast_fu_618_p1, tmp_58_cast_fu_710_p1, tmp_60_cast_fu_807_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            tplINPUT_address0 <= tmp_60_cast_fu_807_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            tplINPUT_address0 <= tmp_58_cast_fu_710_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            tplINPUT_address0 <= tmp_56_cast_fu_618_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            tplINPUT_address0 <= tmp_54_cast_fu_525_p1(21 - 1 downto 0);
        else 
            tplINPUT_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tplINPUT_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)))) then 
            tplINPUT_ce0 <= ap_const_logic_1;
        else 
            tplINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
