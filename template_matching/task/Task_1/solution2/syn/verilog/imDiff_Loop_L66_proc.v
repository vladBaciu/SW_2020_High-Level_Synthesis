// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imDiff_Loop_L66_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imHeight,
        tplHeight,
        imWidth,
        tplWidth,
        imINPUT_address0,
        imINPUT_ce0,
        imINPUT_q0,
        tplINPUT_address0,
        tplINPUT_ce0,
        tplINPUT_q0,
        output_struct,
        output_struct_ap_vld
);

parameter    ap_ST_fsm_state1 = 22'b1;
parameter    ap_ST_fsm_state2 = 22'b10;
parameter    ap_ST_fsm_state3 = 22'b100;
parameter    ap_ST_fsm_state4 = 22'b1000;
parameter    ap_ST_fsm_state5 = 22'b10000;
parameter    ap_ST_fsm_state6 = 22'b100000;
parameter    ap_ST_fsm_state7 = 22'b1000000;
parameter    ap_ST_fsm_state8 = 22'b10000000;
parameter    ap_ST_fsm_state9 = 22'b100000000;
parameter    ap_ST_fsm_state10 = 22'b1000000000;
parameter    ap_ST_fsm_state11 = 22'b10000000000;
parameter    ap_ST_fsm_state12 = 22'b100000000000;
parameter    ap_ST_fsm_state13 = 22'b1000000000000;
parameter    ap_ST_fsm_state14 = 22'b10000000000000;
parameter    ap_ST_fsm_state15 = 22'b100000000000000;
parameter    ap_ST_fsm_state16 = 22'b1000000000000000;
parameter    ap_ST_fsm_state17 = 22'b10000000000000000;
parameter    ap_ST_fsm_state18 = 22'b100000000000000000;
parameter    ap_ST_fsm_state19 = 22'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 22'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 22'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 22'b1000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv42_0 = 42'b000000000000000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv42_4B0 = 42'b10010110000;
parameter    ap_const_lv22_4B0 = 22'b10010110000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_FFFFFFFD = 32'b11111111111111111111111111111101;
parameter    ap_const_lv30_0 = 30'b000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv9_0 = 9'b000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] imHeight;
input  [31:0] tplHeight;
input  [31:0] imWidth;
input  [31:0] tplWidth;
output  [20:0] imINPUT_address0;
output   imINPUT_ce0;
input  [31:0] imINPUT_q0;
output  [20:0] tplINPUT_address0;
output   tplINPUT_ce0;
input  [31:0] tplINPUT_q0;
output  [95:0] output_struct;
output   output_struct_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[20:0] imINPUT_address0;
reg imINPUT_ce0;
reg[20:0] tplINPUT_address0;
reg tplINPUT_ce0;
reg output_struct_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [31:0] tmp_fu_292_p2;
reg   [31:0] tmp_reg_887;
wire   [31:0] tmp_s_fu_298_p2;
reg   [31:0] tmp_s_reg_892;
wire   [31:0] row_img_cast_fu_309_p1;
reg   [31:0] row_img_cast_reg_897;
wire   [0:0] ap_CS_fsm_state2;
wire   [30:0] row_img_1_fu_318_p2;
reg   [30:0] row_img_1_reg_905;
wire   [31:0] col_img_cast_fu_324_p1;
reg   [31:0] col_img_cast_reg_910;
wire   [0:0] ap_CS_fsm_state3;
wire   [30:0] col_img_1_fu_333_p2;
reg   [30:0] col_img_1_reg_918;
wire   [21:0] tmp_48_fu_339_p1;
reg   [21:0] tmp_48_reg_923;
wire   [0:0] ap_CS_fsm_state4;
wire   [41:0] next_mul_fu_343_p2;
reg   [41:0] next_mul_reg_931;
wire   [30:0] row_tpl_1_fu_358_p2;
reg   [30:0] row_tpl_1_reg_939;
wire   [21:0] tmp_41_fu_378_p2;
reg   [21:0] tmp_41_reg_944;
wire   [0:0] tmp_40_fu_353_p2;
wire   [31:0] tmp_66_fu_436_p3;
reg   [31:0] tmp_66_reg_952;
wire   [21:0] tmp_67_fu_444_p1;
reg   [21:0] tmp_67_reg_957;
wire   [21:0] tmp_68_fu_448_p1;
reg   [21:0] tmp_68_reg_962;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_69_fu_487_p2;
wire   [8:0] tmp_46_fu_546_p2;
reg   [8:0] tmp_46_reg_983;
wire   [0:0] ap_CS_fsm_state8;
wire   [31:0] SAD_fu_573_p2;
reg   [31:0] SAD_reg_990;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] tmp_77_1_fu_585_p2;
wire   [8:0] tmp_81_1_fu_639_p2;
reg   [8:0] tmp_81_1_reg_1009;
wire   [0:0] ap_CS_fsm_state12;
wire   [31:0] SAD_s_fu_666_p2;
reg   [31:0] SAD_s_reg_1016;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] tmp_77_2_fu_677_p2;
wire   [8:0] tmp_81_2_fu_731_p2;
reg   [8:0] tmp_81_2_reg_1035;
wire   [0:0] ap_CS_fsm_state16;
wire   [31:0] SAD_2_fu_758_p2;
reg   [31:0] SAD_2_reg_1042;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] tmp_77_3_fu_769_p2;
wire   [31:0] col_tpl_1_3_fu_812_p2;
reg   [31:0] col_tpl_1_3_reg_1061;
wire   [8:0] tmp_81_3_fu_834_p2;
reg   [8:0] tmp_81_3_reg_1066;
wire   [0:0] ap_CS_fsm_state20;
wire   [31:0] SAD_3_fu_861_p2;
wire   [0:0] ap_CS_fsm_state21;
reg   [30:0] row_img_reg_195;
wire   [0:0] tmp_39_fu_328_p2;
reg   [30:0] col_img_reg_207;
wire   [0:0] tmp_38_fu_313_p2;
reg   [30:0] row_tpl_reg_219;
wire   [0:0] ap_CS_fsm_state22;
reg   [31:0] minSAD_1_reg_230;
reg   [41:0] phi_mul_reg_242;
reg   [31:0] col_tpl_reg_253;
reg   [31:0] SAD_1_reg_265;
reg   [31:0] SAD_1_lcssa_reg_276;
wire  signed [63:0] tmp_53_cast_fu_511_p1;
wire   [63:0] tmp_54_cast_fu_525_p1;
wire  signed [63:0] tmp_55_cast_fu_604_p1;
wire   [63:0] tmp_56_cast_fu_618_p1;
wire  signed [63:0] tmp_57_cast_fu_696_p1;
wire   [63:0] tmp_58_cast_fu_710_p1;
wire  signed [63:0] tmp_59_cast_fu_793_p1;
wire   [63:0] tmp_60_cast_fu_807_p1;
reg   [31:0] minSAD_fu_88;
wire   [0:0] or_cond_fu_467_p2;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state19;
wire   [31:0] row_tpl_cast_fu_349_p1;
wire   [21:0] tmp_52_fu_368_p1;
wire   [21:0] tmp_49_fu_364_p1;
wire  signed [21:0] tmp_61_fu_372_p2;
wire   [31:0] tmp_62_fu_384_p2;
wire   [31:0] p_neg_fu_397_p2;
wire   [29:0] p_lshr_fu_402_p4;
wire   [0:0] tmp_63_fu_389_p3;
wire   [29:0] p_neg_t_fu_412_p2;
wire   [29:0] tmp_64_fu_418_p4;
wire   [29:0] tmp_65_fu_428_p3;
wire   [0:0] tmp_42_fu_455_p2;
wire   [0:0] tmp_43_fu_461_p2;
wire   [21:0] tmp_71_fu_496_p1;
wire   [21:0] tmp_70_fu_492_p1;
wire   [21:0] tmp_72_fu_500_p2;
wire   [21:0] tmp_44_fu_506_p2;
wire   [21:0] tmp_74_fu_516_p1;
wire   [21:0] tmp_45_fu_520_p2;
wire   [7:0] tmp_73_fu_530_p1;
wire   [7:0] tmp_75_fu_538_p1;
wire   [8:0] search_img_cast_fu_534_p1;
wire   [8:0] template_img_cast_fu_542_p1;
wire   [0:0] abscond_fu_557_p2;
wire   [8:0] neg_fu_552_p2;
wire   [8:0] abs_fu_562_p3;
wire  signed [31:0] abs_cast_fu_569_p1;
wire   [31:0] col_tpl_1_s_fu_579_p2;
wire   [21:0] tmp_76_fu_590_p1;
wire   [21:0] tmp_77_fu_594_p2;
wire   [21:0] tmp_47_fu_599_p2;
wire   [21:0] tmp_79_fu_609_p1;
wire   [21:0] tmp_50_fu_613_p2;
wire   [7:0] tmp_78_fu_623_p1;
wire   [7:0] tmp_80_fu_631_p1;
wire   [8:0] search_img_1_cast_fu_627_p1;
wire   [8:0] template_img_1_cast_fu_635_p1;
wire   [0:0] abscond_1_fu_650_p2;
wire   [8:0] neg_1_fu_645_p2;
wire   [8:0] abs_1_fu_655_p3;
wire  signed [31:0] abs_1_cast_fu_662_p1;
wire   [31:0] col_tpl_1_1_fu_671_p2;
wire   [21:0] tmp_81_fu_682_p1;
wire   [21:0] tmp_82_fu_686_p2;
wire   [21:0] tmp_51_fu_691_p2;
wire   [21:0] tmp_84_fu_701_p1;
wire   [21:0] tmp_53_fu_705_p2;
wire   [7:0] tmp_83_fu_715_p1;
wire   [7:0] tmp_85_fu_723_p1;
wire   [8:0] search_img_2_cast_fu_719_p1;
wire   [8:0] template_img_2_cast_fu_727_p1;
wire   [0:0] abscond_2_fu_742_p2;
wire   [8:0] neg_2_fu_737_p2;
wire   [8:0] abs_2_fu_747_p3;
wire  signed [31:0] abs_2_cast_fu_754_p1;
wire   [31:0] col_tpl_1_2_fu_763_p2;
wire   [21:0] tmp_87_fu_778_p1;
wire   [21:0] tmp_86_fu_774_p1;
wire   [21:0] tmp_88_fu_782_p2;
wire   [21:0] tmp_54_fu_788_p2;
wire   [21:0] tmp_90_fu_798_p1;
wire   [21:0] tmp_55_fu_802_p2;
wire   [7:0] tmp_89_fu_818_p1;
wire   [7:0] tmp_91_fu_826_p1;
wire   [8:0] search_img_3_cast_fu_822_p1;
wire   [8:0] template_img_3_cast_fu_830_p1;
wire   [0:0] abscond_3_fu_845_p2;
wire   [8:0] neg_3_fu_840_p2;
wire   [8:0] abs_3_fu_850_p3;
wire  signed [31:0] abs_3_cast_fu_857_p1;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 22'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_38_fu_313_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'b0 == tmp_77_3_fu_769_p2))) begin
        SAD_1_lcssa_reg_276 <= SAD_2_fu_758_p2;
    end else if (((1'b1 == ap_CS_fsm_state13) & (1'b0 == tmp_77_2_fu_677_p2))) begin
        SAD_1_lcssa_reg_276 <= SAD_s_fu_666_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_77_1_fu_585_p2))) begin
        SAD_1_lcssa_reg_276 <= SAD_fu_573_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == tmp_69_fu_487_p2))) begin
        SAD_1_lcssa_reg_276 <= SAD_1_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        SAD_1_reg_265 <= SAD_3_fu_861_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_40_fu_353_p2 == 1'b0))) begin
        SAD_1_reg_265 <= minSAD_1_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_40_fu_353_p2 == 1'b0))) begin
        col_img_reg_207 <= col_img_1_reg_918;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_38_fu_313_p2))) begin
        col_img_reg_207 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        col_tpl_reg_253 <= col_tpl_1_3_reg_1061;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_40_fu_353_p2 == 1'b0))) begin
        col_tpl_reg_253 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        minSAD_1_reg_230 <= SAD_1_lcssa_reg_276;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_39_fu_328_p2))) begin
        minSAD_1_reg_230 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_40_fu_353_p2 == 1'b0) & ~(1'b0 == or_cond_fu_467_p2))) begin
        minSAD_fu_88 <= minSAD_1_reg_230;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        minSAD_fu_88 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        phi_mul_reg_242 <= next_mul_reg_931;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_39_fu_328_p2))) begin
        phi_mul_reg_242 <= ap_const_lv42_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_39_fu_328_p2))) begin
        row_img_reg_195 <= row_img_1_reg_905;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        row_img_reg_195 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        row_tpl_reg_219 <= row_tpl_1_reg_939;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_39_fu_328_p2))) begin
        row_tpl_reg_219 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        SAD_2_reg_1042 <= SAD_2_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        SAD_reg_990 <= SAD_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        SAD_s_reg_1016 <= SAD_s_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_img_1_reg_918 <= col_img_1_fu_333_p2;
        col_img_cast_reg_910[30 : 0] <= col_img_cast_fu_324_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~(1'b0 == tmp_77_3_fu_769_p2))) begin
        col_tpl_1_3_reg_1061 <= col_tpl_1_3_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        next_mul_reg_931 <= next_mul_fu_343_p2;
        row_tpl_1_reg_939 <= row_tpl_1_fu_358_p2;
        tmp_48_reg_923 <= tmp_48_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_img_1_reg_905 <= row_img_1_fu_318_p2;
        row_img_cast_reg_897[30 : 0] <= row_img_cast_fu_309_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(tmp_40_fu_353_p2 == 1'b0))) begin
        tmp_41_reg_944 <= tmp_41_fu_378_p2;
        tmp_66_reg_952[31 : 2] <= tmp_66_fu_436_p3[31 : 2];
        tmp_67_reg_957 <= tmp_67_fu_444_p1;
        tmp_68_reg_962 <= tmp_68_fu_448_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_46_reg_983 <= tmp_46_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_81_1_reg_1009 <= tmp_81_1_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_81_2_reg_1035 <= tmp_81_2_fu_731_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_81_3_reg_1066 <= tmp_81_3_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        tmp_reg_887 <= tmp_fu_292_p2;
        tmp_s_reg_892 <= tmp_s_fu_298_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_38_fu_313_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_38_fu_313_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        imINPUT_address0 = tmp_59_cast_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        imINPUT_address0 = tmp_57_cast_fu_696_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        imINPUT_address0 = tmp_55_cast_fu_604_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        imINPUT_address0 = tmp_53_cast_fu_511_p1;
    end else begin
        imINPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19))) begin
        imINPUT_ce0 = 1'b1;
    end else begin
        imINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_40_fu_353_p2 == 1'b0) & ~(1'b0 == or_cond_fu_467_p2))) begin
        output_struct_ap_vld = 1'b1;
    end else begin
        output_struct_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tplINPUT_address0 = tmp_60_cast_fu_807_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        tplINPUT_address0 = tmp_58_cast_fu_710_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tplINPUT_address0 = tmp_56_cast_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tplINPUT_address0 = tmp_54_cast_fu_525_p1;
    end else begin
        tplINPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19))) begin
        tplINPUT_ce0 = 1'b1;
    end else begin
        tplINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((1'b0 == tmp_38_fu_313_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((1'b0 == tmp_39_fu_328_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((tmp_40_fu_353_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == tmp_69_fu_487_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((1'b0 == tmp_77_1_fu_585_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if ((1'b0 == tmp_77_2_fu_677_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((1'b0 == tmp_77_3_fu_769_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SAD_2_fu_758_p2 = ($signed(SAD_s_reg_1016) + $signed(abs_2_cast_fu_754_p1));

assign SAD_3_fu_861_p2 = ($signed(SAD_2_reg_1042) + $signed(abs_3_cast_fu_857_p1));

assign SAD_fu_573_p2 = ($signed(SAD_1_reg_265) + $signed(abs_cast_fu_569_p1));

assign SAD_s_fu_666_p2 = ($signed(SAD_reg_990) + $signed(abs_1_cast_fu_662_p1));

assign abs_1_cast_fu_662_p1 = $signed(abs_1_fu_655_p3);

assign abs_1_fu_655_p3 = ((abscond_1_fu_650_p2[0:0] === 1'b1) ? tmp_81_1_reg_1009 : neg_1_fu_645_p2);

assign abs_2_cast_fu_754_p1 = $signed(abs_2_fu_747_p3);

assign abs_2_fu_747_p3 = ((abscond_2_fu_742_p2[0:0] === 1'b1) ? tmp_81_2_reg_1035 : neg_2_fu_737_p2);

assign abs_3_cast_fu_857_p1 = $signed(abs_3_fu_850_p3);

assign abs_3_fu_850_p3 = ((abscond_3_fu_845_p2[0:0] === 1'b1) ? tmp_81_3_reg_1066 : neg_3_fu_840_p2);

assign abs_cast_fu_569_p1 = $signed(abs_fu_562_p3);

assign abs_fu_562_p3 = ((abscond_fu_557_p2[0:0] === 1'b1) ? tmp_46_reg_983 : neg_fu_552_p2);

assign abscond_1_fu_650_p2 = (($signed(tmp_81_1_reg_1009) > $signed(9'b000000000)) ? 1'b1 : 1'b0);

assign abscond_2_fu_742_p2 = (($signed(tmp_81_2_reg_1035) > $signed(9'b000000000)) ? 1'b1 : 1'b0);

assign abscond_3_fu_845_p2 = (($signed(tmp_81_3_reg_1066) > $signed(9'b000000000)) ? 1'b1 : 1'b0);

assign abscond_fu_557_p2 = (($signed(tmp_46_reg_983) > $signed(9'b000000000)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign col_img_1_fu_333_p2 = (col_img_reg_207 + ap_const_lv31_1);

assign col_img_cast_fu_324_p1 = col_img_reg_207;

assign col_tpl_1_1_fu_671_p2 = (col_tpl_reg_253 | ap_const_lv32_2);

assign col_tpl_1_2_fu_763_p2 = (col_tpl_reg_253 | ap_const_lv32_3);

assign col_tpl_1_3_fu_812_p2 = (ap_const_lv32_4 + col_tpl_reg_253);

assign col_tpl_1_s_fu_579_p2 = (col_tpl_reg_253 | ap_const_lv32_1);

assign neg_1_fu_645_p2 = (ap_const_lv9_0 - tmp_81_1_reg_1009);

assign neg_2_fu_737_p2 = (ap_const_lv9_0 - tmp_81_2_reg_1035);

assign neg_3_fu_840_p2 = (ap_const_lv9_0 - tmp_81_3_reg_1066);

assign neg_fu_552_p2 = (ap_const_lv9_0 - tmp_46_reg_983);

assign next_mul_fu_343_p2 = (ap_const_lv42_4B0 + phi_mul_reg_242);

assign or_cond_fu_467_p2 = (tmp_42_fu_455_p2 | tmp_43_fu_461_p2);

assign output_struct = {{{minSAD_1_reg_230}, {row_img_cast_reg_897}}, {col_img_cast_reg_910}};

assign p_lshr_fu_402_p4 = {{p_neg_fu_397_p2[ap_const_lv32_1F : ap_const_lv32_2]}};

assign p_neg_fu_397_p2 = ($signed(ap_const_lv32_FFFFFFFD) - $signed(tplWidth));

assign p_neg_t_fu_412_p2 = (ap_const_lv30_0 - p_lshr_fu_402_p4);

assign row_img_1_fu_318_p2 = (row_img_reg_195 + ap_const_lv31_1);

assign row_img_cast_fu_309_p1 = row_img_reg_195;

assign row_tpl_1_fu_358_p2 = (ap_const_lv31_1 + row_tpl_reg_219);

assign row_tpl_cast_fu_349_p1 = row_tpl_reg_219;

assign search_img_1_cast_fu_627_p1 = tmp_78_fu_623_p1;

assign search_img_2_cast_fu_719_p1 = tmp_83_fu_715_p1;

assign search_img_3_cast_fu_822_p1 = tmp_89_fu_818_p1;

assign search_img_cast_fu_534_p1 = tmp_73_fu_530_p1;

assign template_img_1_cast_fu_635_p1 = tmp_80_fu_631_p1;

assign template_img_2_cast_fu_727_p1 = tmp_85_fu_723_p1;

assign template_img_3_cast_fu_830_p1 = tmp_91_fu_826_p1;

assign template_img_cast_fu_542_p1 = tmp_75_fu_538_p1;

assign tmp_38_fu_313_p2 = (($signed(row_img_cast_fu_309_p1) < $signed(tmp_reg_887)) ? 1'b1 : 1'b0);

assign tmp_39_fu_328_p2 = (($signed(col_img_cast_fu_324_p1) < $signed(tmp_s_reg_892)) ? 1'b1 : 1'b0);

assign tmp_40_fu_353_p2 = (($signed(row_tpl_cast_fu_349_p1) < $signed(tplHeight)) ? 1'b1 : 1'b0);

assign tmp_41_fu_378_p2 = ($signed({{1'b0}, {ap_const_lv22_4B0}}) * $signed(tmp_61_fu_372_p2));

assign tmp_42_fu_455_p2 = (($signed(minSAD_fu_88) > $signed(minSAD_1_reg_230)) ? 1'b1 : 1'b0);

assign tmp_43_fu_461_p2 = ((minSAD_fu_88 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_44_fu_506_p2 = (tmp_72_fu_500_p2 + tmp_41_reg_944);

assign tmp_45_fu_520_p2 = (tmp_74_fu_516_p1 + tmp_48_reg_923);

assign tmp_46_fu_546_p2 = (search_img_cast_fu_534_p1 - template_img_cast_fu_542_p1);

assign tmp_47_fu_599_p2 = (tmp_77_fu_594_p2 + tmp_41_reg_944);

assign tmp_48_fu_339_p1 = phi_mul_reg_242[21:0];

assign tmp_49_fu_364_p1 = row_tpl_reg_219[21:0];

assign tmp_50_fu_613_p2 = (tmp_79_fu_609_p1 + tmp_48_reg_923);

assign tmp_51_fu_691_p2 = (tmp_82_fu_686_p2 + tmp_41_reg_944);

assign tmp_52_fu_368_p1 = row_img_reg_195[21:0];

assign tmp_53_cast_fu_511_p1 = $signed(tmp_44_fu_506_p2);

assign tmp_53_fu_705_p2 = (tmp_84_fu_701_p1 + tmp_48_reg_923);

assign tmp_54_cast_fu_525_p1 = tmp_45_fu_520_p2;

assign tmp_54_fu_788_p2 = (tmp_88_fu_782_p2 + tmp_41_reg_944);

assign tmp_55_cast_fu_604_p1 = $signed(tmp_47_fu_599_p2);

assign tmp_55_fu_802_p2 = (tmp_90_fu_798_p1 + tmp_48_reg_923);

assign tmp_56_cast_fu_618_p1 = tmp_50_fu_613_p2;

assign tmp_57_cast_fu_696_p1 = $signed(tmp_51_fu_691_p2);

assign tmp_58_cast_fu_710_p1 = tmp_53_fu_705_p2;

assign tmp_59_cast_fu_793_p1 = $signed(tmp_54_fu_788_p2);

assign tmp_60_cast_fu_807_p1 = tmp_55_fu_802_p2;

assign tmp_61_fu_372_p2 = (tmp_52_fu_368_p1 + tmp_49_fu_364_p1);

assign tmp_62_fu_384_p2 = (ap_const_lv32_3 + tplWidth);

assign tmp_63_fu_389_p3 = tmp_62_fu_384_p2[ap_const_lv32_1F];

assign tmp_64_fu_418_p4 = {{tmp_62_fu_384_p2[ap_const_lv32_1F : ap_const_lv32_2]}};

assign tmp_65_fu_428_p3 = ((tmp_63_fu_389_p3[0:0] === 1'b1) ? p_neg_t_fu_412_p2 : tmp_64_fu_418_p4);

assign tmp_66_fu_436_p3 = {{tmp_65_fu_428_p3}, {ap_const_lv2_0}};

assign tmp_67_fu_444_p1 = col_img_reg_207[21:0];

assign tmp_68_fu_448_p1 = col_img_reg_207[21:0];

assign tmp_69_fu_487_p2 = ((col_tpl_reg_253 == tmp_66_reg_952) ? 1'b1 : 1'b0);

assign tmp_70_fu_492_p1 = col_img_reg_207[21:0];

assign tmp_71_fu_496_p1 = col_tpl_reg_253[21:0];

assign tmp_72_fu_500_p2 = (tmp_71_fu_496_p1 + tmp_70_fu_492_p1);

assign tmp_73_fu_530_p1 = imINPUT_q0[7:0];

assign tmp_74_fu_516_p1 = col_tpl_reg_253[21:0];

assign tmp_75_fu_538_p1 = tplINPUT_q0[7:0];

assign tmp_76_fu_590_p1 = col_tpl_1_s_fu_579_p2[21:0];

assign tmp_77_1_fu_585_p2 = (($signed(col_tpl_1_s_fu_579_p2) < $signed(tplWidth)) ? 1'b1 : 1'b0);

assign tmp_77_2_fu_677_p2 = (($signed(col_tpl_1_1_fu_671_p2) < $signed(tplWidth)) ? 1'b1 : 1'b0);

assign tmp_77_3_fu_769_p2 = (($signed(col_tpl_1_2_fu_763_p2) < $signed(tplWidth)) ? 1'b1 : 1'b0);

assign tmp_77_fu_594_p2 = (tmp_76_fu_590_p1 + tmp_68_reg_962);

assign tmp_78_fu_623_p1 = imINPUT_q0[7:0];

assign tmp_79_fu_609_p1 = col_tpl_1_s_fu_579_p2[21:0];

assign tmp_80_fu_631_p1 = tplINPUT_q0[7:0];

assign tmp_81_1_fu_639_p2 = (search_img_1_cast_fu_627_p1 - template_img_1_cast_fu_635_p1);

assign tmp_81_2_fu_731_p2 = (search_img_2_cast_fu_719_p1 - template_img_2_cast_fu_727_p1);

assign tmp_81_3_fu_834_p2 = (search_img_3_cast_fu_822_p1 - template_img_3_cast_fu_830_p1);

assign tmp_81_fu_682_p1 = col_tpl_1_1_fu_671_p2[21:0];

assign tmp_82_fu_686_p2 = (tmp_81_fu_682_p1 + tmp_67_reg_957);

assign tmp_83_fu_715_p1 = imINPUT_q0[7:0];

assign tmp_84_fu_701_p1 = col_tpl_1_1_fu_671_p2[21:0];

assign tmp_85_fu_723_p1 = tplINPUT_q0[7:0];

assign tmp_86_fu_774_p1 = col_img_reg_207[21:0];

assign tmp_87_fu_778_p1 = col_tpl_1_2_fu_763_p2[21:0];

assign tmp_88_fu_782_p2 = (tmp_87_fu_778_p1 + tmp_86_fu_774_p1);

assign tmp_89_fu_818_p1 = imINPUT_q0[7:0];

assign tmp_90_fu_798_p1 = col_tpl_1_2_fu_763_p2[21:0];

assign tmp_91_fu_826_p1 = tplINPUT_q0[7:0];

assign tmp_fu_292_p2 = (imHeight - tplHeight);

assign tmp_s_fu_298_p2 = (imWidth - tplWidth);

always @ (posedge ap_clk) begin
    row_img_cast_reg_897[31] <= 1'b0;
    col_img_cast_reg_910[31] <= 1'b0;
    tmp_66_reg_952[1:0] <= 2'b00;
end

endmodule //imDiff_Loop_L66_proc
