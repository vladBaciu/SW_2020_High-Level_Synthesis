// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="imTemplateMatching,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.722000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=66,HLS_SYN_FF=16714,HLS_SYN_LUT=25499}" *)

module imTemplateMatching (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imINPUT_dout,
        imINPUT_empty_n,
        imINPUT_read,
        imOUTPUT_address0,
        imOUTPUT_ce0,
        imOUTPUT_we0,
        imOUTPUT_d0,
        imOUTPUT_q0,
        imHeight,
        imWidth,
        tplINPUT_address0,
        tplINPUT_ce0,
        tplINPUT_q0,
        tplOUTPUT_address0,
        tplOUTPUT_ce0,
        tplOUTPUT_we0,
        tplOUTPUT_d0,
        tplOUTPUT_q0,
        tplHeight,
        tplWidth
);

parameter    ap_ST_fsm_state1 = 8'b1;
parameter    ap_ST_fsm_state2 = 8'b10;
parameter    ap_ST_fsm_state3 = 8'b100;
parameter    ap_ST_fsm_state4 = 8'b1000;
parameter    ap_ST_fsm_state5 = 8'b10000;
parameter    ap_ST_fsm_state6 = 8'b100000;
parameter    ap_ST_fsm_state7 = 8'b1000000;
parameter    ap_ST_fsm_state8 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] imINPUT_dout;
input   imINPUT_empty_n;
output   imINPUT_read;
output  [20:0] imOUTPUT_address0;
output   imOUTPUT_ce0;
output   imOUTPUT_we0;
output  [31:0] imOUTPUT_d0;
input  [31:0] imOUTPUT_q0;
input  [31:0] imHeight;
input  [31:0] imWidth;
output  [20:0] tplINPUT_address0;
output   tplINPUT_ce0;
input  [31:0] tplINPUT_q0;
output  [20:0] tplOUTPUT_address0;
output   tplOUTPUT_ce0;
output   tplOUTPUT_we0;
output  [31:0] tplOUTPUT_d0;
input  [31:0] tplOUTPUT_q0;
input  [31:0] tplHeight;
input  [31:0] tplWidth;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imINPUT_read;
reg[20:0] imOUTPUT_address0;
reg imOUTPUT_ce0;
reg imOUTPUT_we0;
reg[31:0] imOUTPUT_d0;
reg[20:0] tplINPUT_address0;
reg tplINPUT_ce0;
reg[20:0] tplOUTPUT_address0;
reg tplOUTPUT_ce0;
reg tplOUTPUT_we0;
reg[31:0] tplOUTPUT_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [31:0] tmp_fu_150_p1;
reg   [31:0] tmp_reg_202;
wire   [0:0] ap_CS_fsm_state7;
reg   [31:0] template_match_posit_3_reg_207;
wire    grp_imGreyNormalization_fu_82_ap_start;
wire    grp_imGreyNormalization_fu_82_ap_done;
wire    grp_imGreyNormalization_fu_82_ap_idle;
wire    grp_imGreyNormalization_fu_82_ap_ready;
wire   [20:0] grp_imGreyNormalization_fu_82_imINPUT_address0;
wire    grp_imGreyNormalization_fu_82_imINPUT_ce0;
wire    grp_imGreyNormalization_fu_82_imINPUT_we0;
wire   [31:0] grp_imGreyNormalization_fu_82_imINPUT_d0;
wire    grp_imGreyNormalization_fu_90_ap_start;
wire    grp_imGreyNormalization_fu_90_ap_done;
wire    grp_imGreyNormalization_fu_90_ap_idle;
wire    grp_imGreyNormalization_fu_90_ap_ready;
wire   [20:0] grp_imGreyNormalization_fu_90_imINPUT_address0;
wire    grp_imGreyNormalization_fu_90_imINPUT_ce0;
wire    grp_imGreyNormalization_fu_90_imINPUT_we0;
wire   [31:0] grp_imGreyNormalization_fu_90_imINPUT_d0;
wire    grp_imGrayScale_fu_98_ap_start;
wire    grp_imGrayScale_fu_98_ap_done;
wire    grp_imGrayScale_fu_98_ap_idle;
wire    grp_imGrayScale_fu_98_ap_ready;
wire   [20:0] grp_imGrayScale_fu_98_imINPUT_address0;
wire    grp_imGrayScale_fu_98_imINPUT_ce0;
wire   [20:0] grp_imGrayScale_fu_98_imOUTPUT_address0;
wire    grp_imGrayScale_fu_98_imOUTPUT_ce0;
wire    grp_imGrayScale_fu_98_imOUTPUT_we0;
wire   [31:0] grp_imGrayScale_fu_98_imOUTPUT_d0;
wire    grp_imGrayScale26_fu_110_ap_start;
wire    grp_imGrayScale26_fu_110_ap_done;
wire    grp_imGrayScale26_fu_110_ap_idle;
wire    grp_imGrayScale26_fu_110_ap_ready;
wire    grp_imGrayScale26_fu_110_imINPUT_read;
wire   [20:0] grp_imGrayScale26_fu_110_imOUTPUT_address0;
wire    grp_imGrayScale26_fu_110_imOUTPUT_ce0;
wire    grp_imGrayScale26_fu_110_imOUTPUT_we0;
wire   [31:0] grp_imGrayScale26_fu_110_imOUTPUT_d0;
wire   [20:0] grp_imDiff_fu_122_imINPUT_address0;
wire    grp_imDiff_fu_122_imINPUT_ce0;
wire   [31:0] grp_imDiff_fu_122_imINPUT_d0;
wire    grp_imDiff_fu_122_imINPUT_we0;
wire   [20:0] grp_imDiff_fu_122_imINPUT_address1;
wire    grp_imDiff_fu_122_imINPUT_ce1;
wire   [31:0] grp_imDiff_fu_122_imINPUT_d1;
wire    grp_imDiff_fu_122_imINPUT_we1;
wire   [20:0] grp_imDiff_fu_122_tplINPUT_address0;
wire    grp_imDiff_fu_122_tplINPUT_ce0;
wire   [31:0] grp_imDiff_fu_122_tplINPUT_d0;
wire    grp_imDiff_fu_122_tplINPUT_we0;
wire   [20:0] grp_imDiff_fu_122_tplINPUT_address1;
wire    grp_imDiff_fu_122_tplINPUT_ce1;
wire   [31:0] grp_imDiff_fu_122_tplINPUT_d1;
wire    grp_imDiff_fu_122_tplINPUT_we1;
wire   [95:0] grp_imDiff_fu_122_output_struct;
wire    grp_imDiff_fu_122_output_struct_ap_vld;
wire    grp_imDiff_fu_122_ap_done;
wire    grp_imDiff_fu_122_ap_start;
wire    grp_imDiff_fu_122_ap_ready;
wire    grp_imDiff_fu_122_ap_idle;
reg    grp_imDiff_fu_122_ap_continue;
wire    grp_imConstructOutputIma_fu_135_ap_start;
wire    grp_imConstructOutputIma_fu_135_ap_done;
wire    grp_imConstructOutputIma_fu_135_ap_idle;
wire    grp_imConstructOutputIma_fu_135_ap_ready;
wire   [20:0] grp_imConstructOutputIma_fu_135_imOUTPUT_address0;
wire    grp_imConstructOutputIma_fu_135_imOUTPUT_ce0;
wire    grp_imConstructOutputIma_fu_135_imOUTPUT_we0;
wire   [31:0] grp_imConstructOutputIma_fu_135_imOUTPUT_d0;
wire   [20:0] grp_imConstructOutputIma_fu_135_tplINPUT_address0;
wire    grp_imConstructOutputIma_fu_135_tplINPUT_ce0;
reg    ap_reg_grp_imGreyNormalization_fu_82_ap_start;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state4;
reg    ap_reg_grp_imGreyNormalization_fu_90_ap_start;
reg    ap_reg_grp_imGrayScale_fu_98_ap_start;
wire   [0:0] ap_CS_fsm_state2;
reg    ap_reg_grp_imGrayScale26_fu_110_ap_start;
reg    ap_reg_grp_imDiff_fu_122_ap_start;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state6;
reg    ap_sync_reg_grp_imDiff_fu_122_ap_ready;
reg    ap_sync_grp_imDiff_fu_122_ap_ready;
reg   [95:0] template_match_posit_fu_54;
reg    ap_reg_grp_imConstructOutputIma_fu_135_ap_start;
wire   [0:0] ap_CS_fsm_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
#0 ap_reg_grp_imGreyNormalization_fu_82_ap_start = 1'b0;
#0 ap_reg_grp_imGreyNormalization_fu_90_ap_start = 1'b0;
#0 ap_reg_grp_imGrayScale_fu_98_ap_start = 1'b0;
#0 ap_reg_grp_imGrayScale26_fu_110_ap_start = 1'b0;
#0 ap_reg_grp_imDiff_fu_122_ap_start = 1'b0;
#0 ap_sync_reg_grp_imDiff_fu_122_ap_ready = 1'b0;
#0 ap_reg_grp_imConstructOutputIma_fu_135_ap_start = 1'b0;
end

imGreyNormalization grp_imGreyNormalization_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imGreyNormalization_fu_82_ap_start),
    .ap_done(grp_imGreyNormalization_fu_82_ap_done),
    .ap_idle(grp_imGreyNormalization_fu_82_ap_idle),
    .ap_ready(grp_imGreyNormalization_fu_82_ap_ready),
    .imINPUT_address0(grp_imGreyNormalization_fu_82_imINPUT_address0),
    .imINPUT_ce0(grp_imGreyNormalization_fu_82_imINPUT_ce0),
    .imINPUT_we0(grp_imGreyNormalization_fu_82_imINPUT_we0),
    .imINPUT_d0(grp_imGreyNormalization_fu_82_imINPUT_d0),
    .imINPUT_q0(imOUTPUT_q0),
    .imHeight(imHeight),
    .imWidth(imWidth)
);

imGreyNormalization grp_imGreyNormalization_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imGreyNormalization_fu_90_ap_start),
    .ap_done(grp_imGreyNormalization_fu_90_ap_done),
    .ap_idle(grp_imGreyNormalization_fu_90_ap_idle),
    .ap_ready(grp_imGreyNormalization_fu_90_ap_ready),
    .imINPUT_address0(grp_imGreyNormalization_fu_90_imINPUT_address0),
    .imINPUT_ce0(grp_imGreyNormalization_fu_90_imINPUT_ce0),
    .imINPUT_we0(grp_imGreyNormalization_fu_90_imINPUT_we0),
    .imINPUT_d0(grp_imGreyNormalization_fu_90_imINPUT_d0),
    .imINPUT_q0(tplOUTPUT_q0),
    .imHeight(tplWidth),
    .imWidth(imWidth)
);

imGrayScale grp_imGrayScale_fu_98(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imGrayScale_fu_98_ap_start),
    .ap_done(grp_imGrayScale_fu_98_ap_done),
    .ap_idle(grp_imGrayScale_fu_98_ap_idle),
    .ap_ready(grp_imGrayScale_fu_98_ap_ready),
    .imINPUT_address0(grp_imGrayScale_fu_98_imINPUT_address0),
    .imINPUT_ce0(grp_imGrayScale_fu_98_imINPUT_ce0),
    .imINPUT_q0(tplINPUT_q0),
    .imOUTPUT_address0(grp_imGrayScale_fu_98_imOUTPUT_address0),
    .imOUTPUT_ce0(grp_imGrayScale_fu_98_imOUTPUT_ce0),
    .imOUTPUT_we0(grp_imGrayScale_fu_98_imOUTPUT_we0),
    .imOUTPUT_d0(grp_imGrayScale_fu_98_imOUTPUT_d0),
    .imHeight(tplHeight),
    .imWidth(tplWidth)
);

imGrayScale26 grp_imGrayScale26_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imGrayScale26_fu_110_ap_start),
    .ap_done(grp_imGrayScale26_fu_110_ap_done),
    .ap_idle(grp_imGrayScale26_fu_110_ap_idle),
    .ap_ready(grp_imGrayScale26_fu_110_ap_ready),
    .imINPUT_dout(imINPUT_dout),
    .imINPUT_empty_n(imINPUT_empty_n),
    .imINPUT_read(grp_imGrayScale26_fu_110_imINPUT_read),
    .imOUTPUT_address0(grp_imGrayScale26_fu_110_imOUTPUT_address0),
    .imOUTPUT_ce0(grp_imGrayScale26_fu_110_imOUTPUT_ce0),
    .imOUTPUT_we0(grp_imGrayScale26_fu_110_imOUTPUT_we0),
    .imOUTPUT_d0(grp_imGrayScale26_fu_110_imOUTPUT_d0),
    .imHeight(imHeight),
    .imWidth(imWidth)
);

imDiff grp_imDiff_fu_122(
    .imINPUT_address0(grp_imDiff_fu_122_imINPUT_address0),
    .imINPUT_ce0(grp_imDiff_fu_122_imINPUT_ce0),
    .imINPUT_d0(grp_imDiff_fu_122_imINPUT_d0),
    .imINPUT_q0(imOUTPUT_q0),
    .imINPUT_we0(grp_imDiff_fu_122_imINPUT_we0),
    .imINPUT_address1(grp_imDiff_fu_122_imINPUT_address1),
    .imINPUT_ce1(grp_imDiff_fu_122_imINPUT_ce1),
    .imINPUT_d1(grp_imDiff_fu_122_imINPUT_d1),
    .imINPUT_q1(ap_const_lv32_0),
    .imINPUT_we1(grp_imDiff_fu_122_imINPUT_we1),
    .imHeight(imHeight),
    .imWidth(imWidth),
    .tplINPUT_address0(grp_imDiff_fu_122_tplINPUT_address0),
    .tplINPUT_ce0(grp_imDiff_fu_122_tplINPUT_ce0),
    .tplINPUT_d0(grp_imDiff_fu_122_tplINPUT_d0),
    .tplINPUT_q0(tplOUTPUT_q0),
    .tplINPUT_we0(grp_imDiff_fu_122_tplINPUT_we0),
    .tplINPUT_address1(grp_imDiff_fu_122_tplINPUT_address1),
    .tplINPUT_ce1(grp_imDiff_fu_122_tplINPUT_ce1),
    .tplINPUT_d1(grp_imDiff_fu_122_tplINPUT_d1),
    .tplINPUT_q1(ap_const_lv32_0),
    .tplINPUT_we1(grp_imDiff_fu_122_tplINPUT_we1),
    .tplHeight(tplHeight),
    .tplWidth(tplWidth),
    .output_struct(grp_imDiff_fu_122_output_struct),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .imHeight_ap_vld(1'b1),
    .tplHeight_ap_vld(1'b1),
    .imWidth_ap_vld(1'b1),
    .tplWidth_ap_vld(1'b1),
    .output_struct_ap_vld(grp_imDiff_fu_122_output_struct_ap_vld),
    .ap_done(grp_imDiff_fu_122_ap_done),
    .ap_start(grp_imDiff_fu_122_ap_start),
    .ap_ready(grp_imDiff_fu_122_ap_ready),
    .ap_idle(grp_imDiff_fu_122_ap_idle),
    .ap_continue(grp_imDiff_fu_122_ap_continue)
);

imConstructOutputIma grp_imConstructOutputIma_fu_135(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_imConstructOutputIma_fu_135_ap_start),
    .ap_done(grp_imConstructOutputIma_fu_135_ap_done),
    .ap_idle(grp_imConstructOutputIma_fu_135_ap_idle),
    .ap_ready(grp_imConstructOutputIma_fu_135_ap_ready),
    .imOUTPUT_address0(grp_imConstructOutputIma_fu_135_imOUTPUT_address0),
    .imOUTPUT_ce0(grp_imConstructOutputIma_fu_135_imOUTPUT_ce0),
    .imOUTPUT_we0(grp_imConstructOutputIma_fu_135_imOUTPUT_we0),
    .imOUTPUT_d0(grp_imConstructOutputIma_fu_135_imOUTPUT_d0),
    .tplINPUT_address0(grp_imConstructOutputIma_fu_135_tplINPUT_address0),
    .tplINPUT_ce0(grp_imConstructOutputIma_fu_135_tplINPUT_ce0),
    .tplINPUT_q0(tplINPUT_q0),
    .tplHeight(tplHeight),
    .tplWidth(tplWidth),
    .output_struct_x_read(tmp_reg_202),
    .output_struct_y_read(template_match_posit_3_reg_207)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imConstructOutputIma_fu_135_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_reg_grp_imConstructOutputIma_fu_135_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imConstructOutputIma_fu_135_ap_ready)) begin
            ap_reg_grp_imConstructOutputIma_fu_135_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imDiff_fu_122_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_sync_grp_imDiff_fu_122_ap_ready)))) begin
            ap_reg_grp_imDiff_fu_122_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imDiff_fu_122_ap_ready)) begin
            ap_reg_grp_imDiff_fu_122_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imGrayScale26_fu_110_ap_start <= 1'b0;
    end else begin
        if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_reg_grp_imGrayScale26_fu_110_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imGrayScale26_fu_110_ap_ready)) begin
            ap_reg_grp_imGrayScale26_fu_110_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imGrayScale_fu_98_ap_start <= 1'b0;
    end else begin
        if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_reg_grp_imGrayScale_fu_98_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imGrayScale_fu_98_ap_ready)) begin
            ap_reg_grp_imGrayScale_fu_98_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imGreyNormalization_fu_82_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_reg_grp_imGreyNormalization_fu_82_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imGreyNormalization_fu_82_ap_ready)) begin
            ap_reg_grp_imGreyNormalization_fu_82_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_imGreyNormalization_fu_90_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_reg_grp_imGreyNormalization_fu_90_ap_start <= 1'b1;
        end else if ((1'b1 == grp_imGreyNormalization_fu_90_ap_ready)) begin
            ap_reg_grp_imGreyNormalization_fu_90_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_imDiff_fu_122_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            if (~(1'b0 == grp_imDiff_fu_122_ap_done)) begin
                ap_sync_reg_grp_imDiff_fu_122_ap_ready <= 1'b0;
            end else if ((1'b1 == grp_imDiff_fu_122_ap_ready)) begin
                ap_sync_reg_grp_imDiff_fu_122_ap_ready <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        template_match_posit_3_reg_207 <= {{template_match_posit_fu_54[ap_const_lv32_3F : ap_const_lv32_20]}};
        tmp_reg_202 <= tmp_fu_150_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_imDiff_fu_122_output_struct_ap_vld))) begin
        template_match_posit_fu_54 <= grp_imDiff_fu_122_output_struct;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == grp_imConstructOutputIma_fu_135_ap_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(1'b0 == grp_imConstructOutputIma_fu_135_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_sync_reg_grp_imDiff_fu_122_ap_ready)) begin
        ap_sync_grp_imDiff_fu_122_ap_ready = grp_imDiff_fu_122_ap_ready;
    end else begin
        ap_sync_grp_imDiff_fu_122_ap_ready = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == grp_imDiff_fu_122_ap_done))) begin
        grp_imDiff_fu_122_ap_continue = 1'b1;
    end else begin
        grp_imDiff_fu_122_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imINPUT_read = grp_imGrayScale26_fu_110_imINPUT_read;
    end else begin
        imINPUT_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        imOUTPUT_address0 = grp_imConstructOutputIma_fu_135_imOUTPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        imOUTPUT_address0 = grp_imDiff_fu_122_imINPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_address0 = grp_imGrayScale26_fu_110_imOUTPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_address0 = grp_imGreyNormalization_fu_82_imINPUT_address0;
    end else begin
        imOUTPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        imOUTPUT_ce0 = grp_imConstructOutputIma_fu_135_imOUTPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        imOUTPUT_ce0 = grp_imDiff_fu_122_imINPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_ce0 = grp_imGrayScale26_fu_110_imOUTPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_ce0 = grp_imGreyNormalization_fu_82_imINPUT_ce0;
    end else begin
        imOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        imOUTPUT_d0 = grp_imConstructOutputIma_fu_135_imOUTPUT_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_d0 = grp_imGrayScale26_fu_110_imOUTPUT_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_d0 = grp_imGreyNormalization_fu_82_imINPUT_d0;
    end else begin
        imOUTPUT_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        imOUTPUT_we0 = grp_imConstructOutputIma_fu_135_imOUTPUT_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        imOUTPUT_we0 = grp_imGrayScale26_fu_110_imOUTPUT_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imOUTPUT_we0 = grp_imGreyNormalization_fu_82_imINPUT_we0;
    end else begin
        imOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tplINPUT_address0 = grp_imConstructOutputIma_fu_135_tplINPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tplINPUT_address0 = grp_imGrayScale_fu_98_imINPUT_address0;
    end else begin
        tplINPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tplINPUT_ce0 = grp_imConstructOutputIma_fu_135_tplINPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tplINPUT_ce0 = grp_imGrayScale_fu_98_imINPUT_ce0;
    end else begin
        tplINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tplOUTPUT_address0 = grp_imDiff_fu_122_tplINPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tplOUTPUT_address0 = grp_imGrayScale_fu_98_imOUTPUT_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_address0 = grp_imGreyNormalization_fu_90_imINPUT_address0;
    end else begin
        tplOUTPUT_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tplOUTPUT_ce0 = grp_imDiff_fu_122_tplINPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tplOUTPUT_ce0 = grp_imGrayScale_fu_98_imOUTPUT_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_ce0 = grp_imGreyNormalization_fu_90_imINPUT_ce0;
    end else begin
        tplOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tplOUTPUT_d0 = grp_imGrayScale_fu_98_imOUTPUT_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_d0 = grp_imGreyNormalization_fu_90_imINPUT_d0;
    end else begin
        tplOUTPUT_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tplOUTPUT_we0 = grp_imGrayScale_fu_98_imOUTPUT_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tplOUTPUT_we0 = grp_imGreyNormalization_fu_90_imINPUT_we0;
    end else begin
        tplOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~((1'b0 == grp_imGrayScale26_fu_110_ap_done) | (1'b0 == grp_imGrayScale_fu_98_ap_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (~((1'b0 == grp_imGreyNormalization_fu_82_ap_done) | (1'b0 == grp_imGreyNormalization_fu_90_ap_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == grp_imDiff_fu_122_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == grp_imConstructOutputIma_fu_135_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign grp_imConstructOutputIma_fu_135_ap_start = ap_reg_grp_imConstructOutputIma_fu_135_ap_start;

assign grp_imDiff_fu_122_ap_start = ap_reg_grp_imDiff_fu_122_ap_start;

assign grp_imGrayScale26_fu_110_ap_start = ap_reg_grp_imGrayScale26_fu_110_ap_start;

assign grp_imGrayScale_fu_98_ap_start = ap_reg_grp_imGrayScale_fu_98_ap_start;

assign grp_imGreyNormalization_fu_82_ap_start = ap_reg_grp_imGreyNormalization_fu_82_ap_start;

assign grp_imGreyNormalization_fu_90_ap_start = ap_reg_grp_imGreyNormalization_fu_90_ap_start;

assign tmp_fu_150_p1 = template_match_posit_fu_54[31:0];

endmodule //imTemplateMatching
