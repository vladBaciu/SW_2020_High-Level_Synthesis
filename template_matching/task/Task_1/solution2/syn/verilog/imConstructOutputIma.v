// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imConstructOutputIma (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imOUTPUT_address0,
        imOUTPUT_ce0,
        imOUTPUT_we0,
        imOUTPUT_d0,
        tplINPUT_address0,
        tplINPUT_ce0,
        tplINPUT_q0,
        tplHeight,
        tplWidth,
        output_struct_x_read,
        output_struct_y_read
);

parameter    ap_ST_fsm_state1 = 7'b1;
parameter    ap_ST_fsm_state2 = 7'b10;
parameter    ap_ST_fsm_state3 = 7'b100;
parameter    ap_ST_fsm_state4 = 7'b1000;
parameter    ap_ST_fsm_state5 = 7'b10000;
parameter    ap_ST_fsm_state6 = 7'b100000;
parameter    ap_ST_fsm_state7 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv42_0 = 42'b000000000000000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv42_4B0 = 42'b10010110000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv22_4B0 = 22'b10010110000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [20:0] imOUTPUT_address0;
output   imOUTPUT_ce0;
output   imOUTPUT_we0;
output  [31:0] imOUTPUT_d0;
output  [20:0] tplINPUT_address0;
output   tplINPUT_ce0;
input  [31:0] tplINPUT_q0;
input  [31:0] tplHeight;
input  [31:0] tplWidth;
input  [31:0] output_struct_x_read;
input  [31:0] output_struct_y_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imOUTPUT_ce0;
reg imOUTPUT_we0;
reg tplINPUT_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [21:0] tmp_92_fu_128_p1;
reg   [21:0] tmp_92_reg_243;
wire   [0:0] ap_CS_fsm_state2;
wire   [41:0] next_mul_fu_132_p2;
reg   [41:0] next_mul_reg_248;
wire   [30:0] row_5_fu_147_p2;
reg   [30:0] row_5_reg_256;
wire   [21:0] tmp_s_fu_166_p2;
reg   [21:0] tmp_s_reg_261;
wire   [0:0] tmp_fu_142_p2;
wire   [30:0] col_5_fu_181_p2;
reg   [30:0] col_5_reg_269;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] tmp_51_fu_176_p2;
wire   [21:0] tmp_57_fu_214_p2;
reg   [21:0] tmp_57_reg_279;
wire   [0:0] ap_CS_fsm_state6;
reg   [30:0] row_reg_95;
reg   [41:0] phi_mul_reg_106;
reg   [30:0] col_reg_117;
wire   [0:0] ap_CS_fsm_state7;
wire   [63:0] tmp_63_cast_fu_196_p1;
wire  signed [63:0] tmp_64_cast_fu_219_p1;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state5;
wire   [31:0] row_cast_fu_138_p1;
wire   [21:0] tmp_94_fu_157_p1;
wire   [21:0] tmp_93_fu_153_p1;
wire  signed [21:0] tmp_95_fu_160_p2;
wire   [31:0] col_cast_fu_172_p1;
wire   [21:0] tmp_96_fu_187_p1;
wire   [21:0] tmp_56_fu_191_p2;
wire   [21:0] tmp_98_fu_205_p1;
wire   [21:0] tmp_97_fu_201_p1;
wire   [21:0] tmp_99_fu_208_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_reg_117 <= col_5_reg_269;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_142_p2 == 1'b0))) begin
        col_reg_117 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_51_fu_176_p2))) begin
        phi_mul_reg_106 <= next_mul_reg_248;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_106 <= ap_const_lv42_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == tmp_51_fu_176_p2))) begin
        row_reg_95 <= row_5_reg_256;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        row_reg_95 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_5_reg_269 <= col_5_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_248 <= next_mul_fu_132_p2;
        row_5_reg_256 <= row_5_fu_147_p2;
        tmp_92_reg_243 <= tmp_92_fu_128_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == tmp_51_fu_176_p2))) begin
        tmp_57_reg_279 <= tmp_57_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_142_p2 == 1'b0))) begin
        tmp_s_reg_261 <= tmp_s_fu_166_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_142_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_142_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        imOUTPUT_ce0 = 1'b1;
    end else begin
        imOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        imOUTPUT_we0 = 1'b1;
    end else begin
        imOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        tplINPUT_ce0 = 1'b1;
    end else begin
        tplINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((tmp_fu_142_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((1'b0 == tmp_51_fu_176_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign col_5_fu_181_p2 = (col_reg_117 + ap_const_lv31_1);

assign col_cast_fu_172_p1 = col_reg_117;

assign imOUTPUT_address0 = tmp_64_cast_fu_219_p1;

assign imOUTPUT_d0 = tplINPUT_q0;

assign next_mul_fu_132_p2 = (ap_const_lv42_4B0 + phi_mul_reg_106);

assign row_5_fu_147_p2 = (ap_const_lv31_1 + row_reg_95);

assign row_cast_fu_138_p1 = row_reg_95;

assign tmp_51_fu_176_p2 = (($signed(col_cast_fu_172_p1) < $signed(tplWidth)) ? 1'b1 : 1'b0);

assign tmp_56_fu_191_p2 = (tmp_92_reg_243 + tmp_96_fu_187_p1);

assign tmp_57_fu_214_p2 = (tmp_s_reg_261 + tmp_99_fu_208_p2);

assign tmp_63_cast_fu_196_p1 = tmp_56_fu_191_p2;

assign tmp_64_cast_fu_219_p1 = $signed(tmp_57_reg_279);

assign tmp_92_fu_128_p1 = phi_mul_reg_106[21:0];

assign tmp_93_fu_153_p1 = row_reg_95[21:0];

assign tmp_94_fu_157_p1 = output_struct_y_read[21:0];

assign tmp_95_fu_160_p2 = (tmp_94_fu_157_p1 + tmp_93_fu_153_p1);

assign tmp_96_fu_187_p1 = col_reg_117[21:0];

assign tmp_97_fu_201_p1 = col_reg_117[21:0];

assign tmp_98_fu_205_p1 = output_struct_x_read[21:0];

assign tmp_99_fu_208_p2 = (tmp_98_fu_205_p1 + tmp_97_fu_201_p1);

assign tmp_fu_142_p2 = (($signed(row_cast_fu_138_p1) < $signed(tplHeight)) ? 1'b1 : 1'b0);

assign tmp_s_fu_166_p2 = ($signed({{1'b0}, {ap_const_lv22_4B0}}) * $signed(tmp_95_fu_160_p2));

assign tplINPUT_address0 = tmp_63_cast_fu_196_p1;

endmodule //imConstructOutputIma
