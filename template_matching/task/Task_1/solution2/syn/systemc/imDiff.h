// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _imDiff_HH_
#define _imDiff_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "imDiff_Loop_L66_proc.h"

namespace ap_rtl {

struct imDiff : public sc_module {
    // Port declarations 37
    sc_out< sc_lv<21> > imINPUT_address0;
    sc_out< sc_logic > imINPUT_ce0;
    sc_out< sc_lv<32> > imINPUT_d0;
    sc_in< sc_lv<32> > imINPUT_q0;
    sc_out< sc_logic > imINPUT_we0;
    sc_out< sc_lv<21> > imINPUT_address1;
    sc_out< sc_logic > imINPUT_ce1;
    sc_out< sc_lv<32> > imINPUT_d1;
    sc_in< sc_lv<32> > imINPUT_q1;
    sc_out< sc_logic > imINPUT_we1;
    sc_in< sc_lv<32> > imHeight;
    sc_in< sc_lv<32> > imWidth;
    sc_out< sc_lv<21> > tplINPUT_address0;
    sc_out< sc_logic > tplINPUT_ce0;
    sc_out< sc_lv<32> > tplINPUT_d0;
    sc_in< sc_lv<32> > tplINPUT_q0;
    sc_out< sc_logic > tplINPUT_we0;
    sc_out< sc_lv<21> > tplINPUT_address1;
    sc_out< sc_logic > tplINPUT_ce1;
    sc_out< sc_lv<32> > tplINPUT_d1;
    sc_in< sc_lv<32> > tplINPUT_q1;
    sc_out< sc_logic > tplINPUT_we1;
    sc_in< sc_lv<32> > tplHeight;
    sc_in< sc_lv<32> > tplWidth;
    sc_out< sc_lv<96> > output_struct;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > imHeight_ap_vld;
    sc_in< sc_logic > tplHeight_ap_vld;
    sc_in< sc_logic > imWidth_ap_vld;
    sc_in< sc_logic > tplWidth_ap_vld;
    sc_out< sc_logic > output_struct_ap_vld;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    imDiff(sc_module_name name);
    SC_HAS_PROCESS(imDiff);

    ~imDiff();

    sc_trace_file* mVcdFile;

    imDiff_Loop_L66_proc* imDiff_Loop_L66_proc_U0;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_ap_start;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_ap_done;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_ap_continue;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_ap_idle;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_ap_ready;
    sc_signal< sc_lv<21> > imDiff_Loop_L66_proc_U0_imINPUT_address0;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_imINPUT_ce0;
    sc_signal< sc_lv<21> > imDiff_Loop_L66_proc_U0_tplINPUT_address0;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_tplINPUT_ce0;
    sc_signal< sc_lv<96> > imDiff_Loop_L66_proc_U0_output_struct;
    sc_signal< sc_logic > imDiff_Loop_L66_proc_U0_output_struct_ap_vld;
    sc_signal< sc_logic > ap_hs_continue;
    sc_signal< sc_logic > ap_hs_done;
    sc_signal< sc_logic > ap_hs_ready;
    static const sc_lv<21> ap_const_lv21_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<96> ap_const_lv96_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_hs_continue();
    void thread_ap_hs_done();
    void thread_ap_hs_ready();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_imDiff_Loop_L66_proc_U0_ap_continue();
    void thread_imDiff_Loop_L66_proc_U0_ap_start();
    void thread_imINPUT_address0();
    void thread_imINPUT_address1();
    void thread_imINPUT_ce0();
    void thread_imINPUT_ce1();
    void thread_imINPUT_d0();
    void thread_imINPUT_d1();
    void thread_imINPUT_we0();
    void thread_imINPUT_we1();
    void thread_output_struct();
    void thread_output_struct_ap_vld();
    void thread_tplINPUT_address0();
    void thread_tplINPUT_address1();
    void thread_tplINPUT_ce0();
    void thread_tplINPUT_ce1();
    void thread_tplINPUT_d0();
    void thread_tplINPUT_d1();
    void thread_tplINPUT_we0();
    void thread_tplINPUT_we1();
};

}

using namespace ap_rtl;

#endif
