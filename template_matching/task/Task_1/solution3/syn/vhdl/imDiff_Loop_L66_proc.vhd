-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imDiff_Loop_L66_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    tplHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    imWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    tplWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    imINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imINPUT_ce0 : OUT STD_LOGIC;
    imINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tplINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    tplINPUT_ce0 : OUT STD_LOGIC;
    tplINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_struct_y : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_struct_y_ap_vld : OUT STD_LOGIC;
    output_struct_x : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_struct_x_ap_vld : OUT STD_LOGIC;
    output_struct_SAD : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_struct_SAD_ap_vld : OUT STD_LOGIC );
end;


architecture behav of imDiff_Loop_L66_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv64_4B0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010110000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv22_4B0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010010110000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_cast_fu_318_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_cast_reg_843 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_img_1_fu_327_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_img_1_reg_851 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_cast_fu_337_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_cast_reg_856 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal col_img_1_fu_346_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_img_1_reg_867 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_352_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_68_reg_872 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_mul_fu_356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_reg_880 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_tpl_1_fu_375_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_tpl_1_reg_888 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_806_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_46_reg_893 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_37_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_44_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_48_reg_917 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal SAD_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_96_1_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_1_fu_570_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_102_1_reg_943 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal SAD_s_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_s_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_96_2_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_tpl_1_2_fu_654_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_tpl_1_2_reg_969 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_96_3_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_3_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_2_fu_685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_102_2_reg_979 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal SAD_2_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_2_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal col_tpl_1_3_fu_752_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_tpl_1_3_reg_1002 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_102_3_fu_774_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_102_3_reg_1007 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal SAD_3_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal row_img_reg_197 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_img_reg_210 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_tpl_reg_223 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal minSAD_1_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_247 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_tpl_reg_258 : STD_LOGIC_VECTOR (10 downto 0);
    signal SAD_1_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal SAD_1_lcssa_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_cast_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_cast_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_cast_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal minSAD_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_32_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_cast_fu_416_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_45_fu_420_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_46_cast_fu_425_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_47_fu_429_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_47_fu_429_p2 : signal is "no";
    signal tmp_47_cast_fu_439_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_49_fu_443_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_69_fu_453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_461_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_cast_fu_457_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_cast_fu_465_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_475_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_fu_485_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_cast_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_tpl_1_s_fu_502_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_1_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_1_cast_fu_512_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_97_1_fu_521_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_1_cast_fu_526_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_50_fu_530_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 of tmp_50_fu_530_p2 : signal is "no";
    signal tmp_99_1_cast_fu_540_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_51_fu_544_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_71_fu_554_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_562_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_1_cast_fu_558_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_1_cast_fu_566_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_1_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_1_fu_576_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_1_fu_586_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_1_cast_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_tpl_1_1_fu_602_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_2_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_2_cast_fu_612_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_97_2_fu_621_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_2_cast_fu_626_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_52_fu_630_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 of tmp_52_fu_630_p2 : signal is "no";
    signal tmp_99_2_cast_fu_640_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_53_fu_644_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_95_3_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_669_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_fu_677_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_2_cast_fu_673_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_2_cast_fu_681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_2_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_2_fu_691_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_2_fu_701_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_2_cast_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_3_cast_fu_717_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_97_3_fu_720_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_3_cast_fu_725_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_54_fu_729_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 of tmp_54_fu_729_p2 : signal is "no";
    signal tmp_99_3_cast_fu_739_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_55_fu_742_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_75_fu_758_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_766_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_3_cast_fu_762_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_3_cast_fu_770_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_3_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_3_fu_780_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_3_fu_790_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_3_cast_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_806_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component imTemplateMatching8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    imTemplateMatching8j_U16 : component imTemplateMatching8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_806_p0,
        din1 => row_tpl_reg_223,
        din2 => grp_fu_806_p2,
        dout => grp_fu_806_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_33_fu_322_p2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    SAD_1_lcssa_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_96_3_reg_975))) then 
                SAD_1_lcssa_reg_281 <= SAD_2_fu_712_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_96_2_fu_616_p2))) then 
                SAD_1_lcssa_reg_281 <= SAD_s_fu_597_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_96_1_fu_516_p2))) then 
                SAD_1_lcssa_reg_281 <= SAD_fu_496_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_44_fu_411_p2))) then 
                SAD_1_lcssa_reg_281 <= SAD_1_reg_270;
            end if; 
        end if;
    end process;

    SAD_1_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                SAD_1_reg_270 <= SAD_3_fu_801_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_37_fu_370_p2 = ap_const_lv1_0)))) then 
                SAD_1_reg_270 <= minSAD_1_reg_234;
            end if; 
        end if;
    end process;

    col_img_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_37_fu_370_p2 = ap_const_lv1_0))) then 
                col_img_reg_210 <= col_img_1_reg_867;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_33_fu_322_p2)))) then 
                col_img_reg_210 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    col_tpl_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
                col_tpl_reg_258 <= col_tpl_1_3_reg_1002;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_37_fu_370_p2 = ap_const_lv1_0)))) then 
                col_tpl_reg_258 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    minSAD_1_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                minSAD_1_reg_234 <= SAD_1_lcssa_reg_281;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_35_fu_341_p2)))) then 
                minSAD_1_reg_234 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minSAD_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_37_fu_370_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = or_cond_fu_396_p2)))) then 
                minSAD_fu_76 <= minSAD_1_reg_234;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                minSAD_fu_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                phi_mul_reg_247 <= next_mul_reg_880;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_35_fu_341_p2)))) then 
                phi_mul_reg_247 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row_img_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_35_fu_341_p2))) then 
                row_img_reg_197 <= row_img_1_reg_851;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                row_img_reg_197 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    row_tpl_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                row_tpl_reg_223 <= row_tpl_1_reg_888;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = tmp_35_fu_341_p2)))) then 
                row_tpl_reg_223 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                SAD_2_reg_986 <= SAD_2_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                SAD_reg_924 <= SAD_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                SAD_s_reg_950 <= SAD_s_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                col_img_1_reg_867 <= col_img_1_fu_346_p2;
                tmp_42_cast_reg_856 <= tmp_42_cast_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_96_2_fu_616_p2)))) then
                    col_tpl_1_2_reg_969(10 downto 2) <= col_tpl_1_2_fu_654_p2(10 downto 2);
                tmp_96_3_reg_975 <= tmp_96_3_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((ap_const_lv1_0 = tmp_96_3_reg_975)))) then
                col_tpl_1_3_reg_1002 <= col_tpl_1_3_fu_752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                next_mul_reg_880 <= next_mul_fu_356_p2;
                row_tpl_1_reg_888 <= row_tpl_1_fu_375_p2;
                tmp_68_reg_872 <= tmp_68_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                row_img_1_reg_851 <= row_img_1_fu_327_p2;
                tmp_40_cast_reg_843 <= tmp_40_cast_fu_318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                tmp_102_1_reg_943 <= tmp_102_1_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                tmp_102_2_reg_979 <= tmp_102_2_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                tmp_102_3_reg_1007 <= tmp_102_3_fu_774_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((tmp_37_fu_370_p2 = ap_const_lv1_0)))) then
                tmp_46_reg_893 <= grp_fu_806_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                tmp_48_reg_917 <= tmp_48_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then
                tmp_reg_833 <= tmp_fu_297_p2;
                tmp_s_reg_838 <= tmp_s_fu_303_p2;
            end if;
        end if;
    end process;
    col_tpl_1_2_reg_969(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, tmp_37_fu_370_p2, tmp_44_fu_411_p2, tmp_96_1_fu_516_p2, tmp_96_2_fu_616_p2, tmp_96_3_reg_975, tmp_35_fu_341_p2, tmp_33_fu_322_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_33_fu_322_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((ap_const_lv1_0 = tmp_35_fu_341_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((tmp_37_fu_370_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((ap_const_lv1_0 = tmp_44_fu_411_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((ap_const_lv1_0 = tmp_96_1_fu_516_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if ((ap_const_lv1_0 = tmp_96_2_fu_616_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((ap_const_lv1_0 = tmp_96_3_reg_975)) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    SAD_2_fu_712_p2 <= std_logic_vector(signed(abs_2_cast_fu_708_p1) + signed(SAD_s_reg_950));
    SAD_3_fu_801_p2 <= std_logic_vector(signed(abs_3_cast_fu_797_p1) + signed(SAD_2_reg_986));
    SAD_fu_496_p2 <= std_logic_vector(signed(abs_cast_fu_492_p1) + signed(SAD_1_reg_270));
    SAD_s_fu_597_p2 <= std_logic_vector(signed(abs_1_cast_fu_593_p1) + signed(SAD_reg_924));
        abs_1_cast_fu_593_p1 <= std_logic_vector(resize(signed(abs_1_fu_586_p3),32));

    abs_1_fu_586_p3 <= 
        tmp_102_1_reg_943 when (abscond_1_fu_581_p2(0) = '1') else 
        neg_1_fu_576_p2;
        abs_2_cast_fu_708_p1 <= std_logic_vector(resize(signed(abs_2_fu_701_p3),32));

    abs_2_fu_701_p3 <= 
        tmp_102_2_reg_979 when (abscond_2_fu_696_p2(0) = '1') else 
        neg_2_fu_691_p2;
        abs_3_cast_fu_797_p1 <= std_logic_vector(resize(signed(abs_3_fu_790_p3),32));

    abs_3_fu_790_p3 <= 
        tmp_102_3_reg_1007 when (abscond_3_fu_785_p2(0) = '1') else 
        neg_3_fu_780_p2;
        abs_cast_fu_492_p1 <= std_logic_vector(resize(signed(abs_fu_485_p3),32));

    abs_fu_485_p3 <= 
        tmp_48_reg_917 when (abscond_fu_480_p2(0) = '1') else 
        neg_fu_475_p2;
    abscond_1_fu_581_p2 <= "1" when (signed(tmp_102_1_reg_943) > signed(ap_const_lv9_0)) else "0";
    abscond_2_fu_696_p2 <= "1" when (signed(tmp_102_2_reg_979) > signed(ap_const_lv9_0)) else "0";
    abscond_3_fu_785_p2 <= "1" when (signed(tmp_102_3_reg_1007) > signed(ap_const_lv9_0)) else "0";
    abscond_fu_480_p2 <= "1" when (signed(tmp_48_reg_917) > signed(ap_const_lv9_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_33_fu_322_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_33_fu_322_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_33_fu_322_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_33_fu_322_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_img_1_fu_346_p2 <= std_logic_vector(unsigned(col_img_reg_210) + unsigned(ap_const_lv11_1));
    col_tpl_1_1_fu_602_p2 <= (col_tpl_reg_258 or ap_const_lv11_2);
    col_tpl_1_2_fu_654_p2 <= (col_tpl_reg_258 or ap_const_lv11_3);
    col_tpl_1_3_fu_752_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) + unsigned(col_tpl_reg_258));
    col_tpl_1_s_fu_502_p2 <= (col_tpl_reg_258 or ap_const_lv11_1);
    grp_fu_806_p0 <= tmp_40_cast_reg_843(11 - 1 downto 0);
    grp_fu_806_p2 <= ap_const_lv22_4B0(12 - 1 downto 0);

    imINPUT_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, tmp_57_cast_fu_434_p1, tmp_59_cast_fu_535_p1, tmp_61_cast_fu_635_p1, tmp_63_cast_fu_734_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            imINPUT_address0 <= tmp_63_cast_fu_734_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            imINPUT_address0 <= tmp_61_cast_fu_635_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            imINPUT_address0 <= tmp_59_cast_fu_535_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            imINPUT_address0 <= tmp_57_cast_fu_434_p1(21 - 1 downto 0);
        else 
            imINPUT_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    imINPUT_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)))) then 
            imINPUT_ce0 <= ap_const_logic_1;
        else 
            imINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neg_1_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_102_1_reg_943));
    neg_2_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_102_2_reg_979));
    neg_3_fu_780_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_102_3_reg_1007));
    neg_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_48_reg_917));
    next_mul_fu_356_p2 <= std_logic_vector(unsigned(ap_const_lv64_4B0) + unsigned(phi_mul_reg_247));
    or_cond_fu_396_p2 <= (tmp_41_fu_384_p2 or tmp_42_fu_390_p2);
    output_struct_SAD <= minSAD_1_reg_234;

    output_struct_SAD_ap_vld_assign_proc : process(ap_CS_fsm_state4, tmp_37_fu_370_p2, or_cond_fu_396_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_37_fu_370_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = or_cond_fu_396_p2)))) then 
            output_struct_SAD_ap_vld <= ap_const_logic_1;
        else 
            output_struct_SAD_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_struct_x <= col_img_reg_210;

    output_struct_x_ap_vld_assign_proc : process(ap_CS_fsm_state4, tmp_37_fu_370_p2, or_cond_fu_396_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_37_fu_370_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = or_cond_fu_396_p2)))) then 
            output_struct_x_ap_vld <= ap_const_logic_1;
        else 
            output_struct_x_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_struct_y <= row_img_reg_197;

    output_struct_y_ap_vld_assign_proc : process(ap_CS_fsm_state4, tmp_37_fu_370_p2, or_cond_fu_396_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (tmp_37_fu_370_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = or_cond_fu_396_p2)))) then 
            output_struct_y_ap_vld <= ap_const_logic_1;
        else 
            output_struct_y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    row_img_1_fu_327_p2 <= std_logic_vector(unsigned(row_img_reg_197) + unsigned(ap_const_lv11_1));
    row_tpl_1_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(row_tpl_reg_223));
        tmp_100_1_cast_fu_558_p1 <= std_logic_vector(resize(signed(tmp_71_fu_554_p1),9));

        tmp_100_2_cast_fu_673_p1 <= std_logic_vector(resize(signed(tmp_73_fu_669_p1),9));

        tmp_100_3_cast_fu_762_p1 <= std_logic_vector(resize(signed(tmp_75_fu_758_p1),9));

        tmp_100_cast_fu_457_p1 <= std_logic_vector(resize(signed(tmp_69_fu_453_p1),9));

        tmp_101_1_cast_fu_566_p1 <= std_logic_vector(resize(signed(tmp_72_fu_562_p1),9));

        tmp_101_2_cast_fu_681_p1 <= std_logic_vector(resize(signed(tmp_74_fu_677_p1),9));

        tmp_101_3_cast_fu_770_p1 <= std_logic_vector(resize(signed(tmp_76_fu_766_p1),9));

        tmp_101_cast_fu_465_p1 <= std_logic_vector(resize(signed(tmp_70_fu_461_p1),9));

    tmp_102_1_fu_570_p2 <= std_logic_vector(signed(tmp_100_1_cast_fu_558_p1) - signed(tmp_101_1_cast_fu_566_p1));
    tmp_102_2_fu_685_p2 <= std_logic_vector(signed(tmp_100_2_cast_fu_673_p1) - signed(tmp_101_2_cast_fu_681_p1));
    tmp_102_3_fu_774_p2 <= std_logic_vector(signed(tmp_100_3_cast_fu_762_p1) - signed(tmp_101_3_cast_fu_770_p1));
        tmp_32_fu_314_p1 <= std_logic_vector(resize(signed(row_img_reg_197),32));

    tmp_33_fu_322_p2 <= "1" when (signed(tmp_32_fu_314_p1) < signed(tmp_reg_833)) else "0";
        tmp_34_fu_333_p1 <= std_logic_vector(resize(signed(col_img_reg_210),32));

    tmp_35_fu_341_p2 <= "1" when (signed(tmp_34_fu_333_p1) < signed(tmp_s_reg_838)) else "0";
        tmp_36_fu_362_p1 <= std_logic_vector(resize(signed(row_tpl_reg_223),32));

    tmp_37_fu_370_p2 <= "1" when (signed(tmp_36_fu_362_p1) < signed(tplHeight)) else "0";
        tmp_40_cast_fu_318_p1 <= std_logic_vector(resize(signed(row_img_reg_197),12));

    tmp_41_fu_384_p2 <= "1" when (signed(minSAD_fu_76) > signed(minSAD_1_reg_234)) else "0";
        tmp_42_cast_fu_337_p1 <= std_logic_vector(resize(signed(col_img_reg_210),12));

    tmp_42_fu_390_p2 <= "1" when (minSAD_fu_76 = ap_const_lv32_0) else "0";
        tmp_43_fu_407_p1 <= std_logic_vector(resize(signed(col_tpl_reg_258),32));

    tmp_44_fu_411_p2 <= "1" when (signed(tmp_43_fu_407_p1) < signed(tplWidth)) else "0";
    tmp_45_fu_420_p2 <= std_logic_vector(signed(tmp_42_cast_reg_856) + signed(tmp_95_cast_fu_416_p1));
        tmp_46_cast_fu_425_p1 <= std_logic_vector(resize(signed(tmp_45_fu_420_p2),22));

        tmp_47_cast_fu_439_p1 <= std_logic_vector(resize(signed(col_tpl_reg_258),22));

    tmp_47_fu_429_p2 <= std_logic_vector(signed(tmp_46_reg_893) + signed(tmp_46_cast_fu_425_p1));
    tmp_48_fu_469_p2 <= std_logic_vector(signed(tmp_100_cast_fu_457_p1) - signed(tmp_101_cast_fu_465_p1));
    tmp_49_fu_443_p2 <= std_logic_vector(unsigned(tmp_68_reg_872) + unsigned(tmp_47_cast_fu_439_p1));
    tmp_50_fu_530_p2 <= std_logic_vector(signed(tmp_46_reg_893) + signed(tmp_98_1_cast_fu_526_p1));
    tmp_51_fu_544_p2 <= std_logic_vector(unsigned(tmp_68_reg_872) + unsigned(tmp_99_1_cast_fu_540_p1));
    tmp_52_fu_630_p2 <= std_logic_vector(signed(tmp_46_reg_893) + signed(tmp_98_2_cast_fu_626_p1));
    tmp_53_fu_644_p2 <= std_logic_vector(unsigned(tmp_68_reg_872) + unsigned(tmp_99_2_cast_fu_640_p1));
    tmp_54_fu_729_p2 <= std_logic_vector(signed(tmp_46_reg_893) + signed(tmp_98_3_cast_fu_725_p1));
    tmp_55_fu_742_p2 <= std_logic_vector(unsigned(tmp_68_reg_872) + unsigned(tmp_99_3_cast_fu_739_p1));
        tmp_57_cast_fu_434_p1 <= std_logic_vector(resize(signed(tmp_47_fu_429_p2),64));

    tmp_58_cast_fu_448_p1 <= std_logic_vector(resize(unsigned(tmp_49_fu_443_p2),64));
        tmp_59_cast_fu_535_p1 <= std_logic_vector(resize(signed(tmp_50_fu_530_p2),64));

    tmp_60_cast_fu_549_p1 <= std_logic_vector(resize(unsigned(tmp_51_fu_544_p2),64));
        tmp_61_cast_fu_635_p1 <= std_logic_vector(resize(signed(tmp_52_fu_630_p2),64));

    tmp_62_cast_fu_649_p1 <= std_logic_vector(resize(unsigned(tmp_53_fu_644_p2),64));
        tmp_63_cast_fu_734_p1 <= std_logic_vector(resize(signed(tmp_54_fu_729_p2),64));

    tmp_64_cast_fu_747_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_742_p2),64));
    tmp_68_fu_352_p1 <= phi_mul_reg_247(22 - 1 downto 0);
    tmp_69_fu_453_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_70_fu_461_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_71_fu_554_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_72_fu_562_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_73_fu_669_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_74_fu_677_p1 <= tplINPUT_q0(8 - 1 downto 0);
    tmp_75_fu_758_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_76_fu_766_p1 <= tplINPUT_q0(8 - 1 downto 0);
        tmp_95_1_cast_fu_512_p1 <= std_logic_vector(resize(signed(col_tpl_1_s_fu_502_p2),12));

        tmp_95_1_fu_508_p1 <= std_logic_vector(resize(signed(col_tpl_1_s_fu_502_p2),32));

        tmp_95_2_cast_fu_612_p1 <= std_logic_vector(resize(signed(col_tpl_1_1_fu_602_p2),12));

        tmp_95_2_fu_608_p1 <= std_logic_vector(resize(signed(col_tpl_1_1_fu_602_p2),32));

        tmp_95_3_cast_fu_717_p1 <= std_logic_vector(resize(signed(col_tpl_1_2_reg_969),12));

        tmp_95_3_fu_660_p1 <= std_logic_vector(resize(signed(col_tpl_1_2_fu_654_p2),32));

        tmp_95_cast_fu_416_p1 <= std_logic_vector(resize(signed(col_tpl_reg_258),12));

    tmp_96_1_fu_516_p2 <= "1" when (signed(tmp_95_1_fu_508_p1) < signed(tplWidth)) else "0";
    tmp_96_2_fu_616_p2 <= "1" when (signed(tmp_95_2_fu_608_p1) < signed(tplWidth)) else "0";
    tmp_96_3_fu_664_p2 <= "1" when (signed(tmp_95_3_fu_660_p1) < signed(tplWidth)) else "0";
    tmp_97_1_fu_521_p2 <= std_logic_vector(signed(tmp_42_cast_reg_856) + signed(tmp_95_1_cast_fu_512_p1));
    tmp_97_2_fu_621_p2 <= std_logic_vector(signed(tmp_42_cast_reg_856) + signed(tmp_95_2_cast_fu_612_p1));
    tmp_97_3_fu_720_p2 <= std_logic_vector(signed(tmp_42_cast_reg_856) + signed(tmp_95_3_cast_fu_717_p1));
        tmp_98_1_cast_fu_526_p1 <= std_logic_vector(resize(signed(tmp_97_1_fu_521_p2),22));

        tmp_98_2_cast_fu_626_p1 <= std_logic_vector(resize(signed(tmp_97_2_fu_621_p2),22));

        tmp_98_3_cast_fu_725_p1 <= std_logic_vector(resize(signed(tmp_97_3_fu_720_p2),22));

        tmp_99_1_cast_fu_540_p1 <= std_logic_vector(resize(signed(col_tpl_1_s_fu_502_p2),22));

        tmp_99_2_cast_fu_640_p1 <= std_logic_vector(resize(signed(col_tpl_1_1_fu_602_p2),22));

        tmp_99_3_cast_fu_739_p1 <= std_logic_vector(resize(signed(col_tpl_1_2_reg_969),22));

    tmp_fu_297_p2 <= std_logic_vector(unsigned(imHeight) - unsigned(tplHeight));
    tmp_s_fu_303_p2 <= std_logic_vector(unsigned(imWidth) - unsigned(tplWidth));

    tplINPUT_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, tmp_58_cast_fu_448_p1, tmp_60_cast_fu_549_p1, tmp_62_cast_fu_649_p1, tmp_64_cast_fu_747_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            tplINPUT_address0 <= tmp_64_cast_fu_747_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            tplINPUT_address0 <= tmp_62_cast_fu_649_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            tplINPUT_address0 <= tmp_60_cast_fu_549_p1(21 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            tplINPUT_address0 <= tmp_58_cast_fu_448_p1(21 - 1 downto 0);
        else 
            tplINPUT_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tplINPUT_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state10)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)))) then 
            tplINPUT_ce0 <= ap_const_logic_1;
        else 
            tplINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
