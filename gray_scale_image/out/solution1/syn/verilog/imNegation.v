// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="imNegation,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.590000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=259,HLS_SYN_LUT=286}" *)

module imNegation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imINPUT_address0,
        imINPUT_ce0,
        imINPUT_q0,
        imOUTPUT_address0,
        imOUTPUT_ce0,
        imOUTPUT_we0,
        imOUTPUT_d0,
        imHeight,
        imWidth
);

parameter    ap_ST_fsm_state1 = 7'b1;
parameter    ap_ST_fsm_state2 = 7'b10;
parameter    ap_ST_fsm_state3 = 7'b100;
parameter    ap_ST_fsm_state4 = 7'b1000;
parameter    ap_ST_fsm_state5 = 7'b10000;
parameter    ap_ST_fsm_state6 = 7'b100000;
parameter    ap_ST_fsm_state7 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv42_0 = 42'b000000000000000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv42_4B0 = 42'b10010110000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1F = 32'b11111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [20:0] imINPUT_address0;
output   imINPUT_ce0;
input  [31:0] imINPUT_q0;
output  [20:0] imOUTPUT_address0;
output   imOUTPUT_ce0;
output   imOUTPUT_we0;
output  [31:0] imOUTPUT_d0;
input  [31:0] imHeight;
input  [31:0] imWidth;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imINPUT_ce0;
reg imOUTPUT_ce0;
reg imOUTPUT_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [21:0] tmp_1_fu_123_p1;
reg   [21:0] tmp_1_reg_258;
wire   [0:0] ap_CS_fsm_state2;
wire   [41:0] next_mul_fu_127_p2;
reg   [41:0] next_mul_reg_263;
wire   [30:0] row_1_fu_142_p2;
reg   [30:0] row_1_reg_271;
wire   [30:0] col_1_fu_157_p2;
reg   [30:0] col_1_reg_279;
wire   [0:0] ap_CS_fsm_state3;
wire   [63:0] tmp_11_cast_fu_172_p1;
reg   [63:0] tmp_11_cast_reg_284;
wire   [0:0] tmp_2_fu_152_p2;
wire   [0:0] ap_CS_fsm_state6;
reg   [30:0] row_reg_90;
reg   [41:0] phi_mul_reg_101;
reg   [30:0] col_reg_112;
wire   [0:0] tmp_fu_137_p2;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state5;
wire   [31:0] row_cast_fu_133_p1;
wire   [31:0] col_cast_fu_148_p1;
wire   [21:0] tmp_3_fu_163_p1;
wire   [21:0] tmp_4_fu_167_p2;
wire   [7:0] tmp_9_fu_177_p1;
wire   [7:0] tmp_7_fu_187_p4;
wire   [7:0] tmp_s_fu_203_p4;
wire   [7:0] tmp_11_fu_219_p4;
wire   [7:0] tmp_12_fu_229_p2;
wire   [7:0] tmp_10_fu_213_p2;
wire   [7:0] tmp_8_fu_197_p2;
wire   [7:0] tmp_5_fu_181_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_reg_112 <= col_1_reg_279;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_fu_137_p2))) begin
        col_reg_112 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_152_p2 == 1'b0))) begin
        phi_mul_reg_101 <= next_mul_reg_263;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_101 <= ap_const_lv42_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_152_p2 == 1'b0))) begin
        row_reg_90 <= row_1_reg_271;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        row_reg_90 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_1_reg_279 <= col_1_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_263 <= next_mul_fu_127_p2;
        row_1_reg_271 <= row_1_fu_142_p2;
        tmp_1_reg_258 <= tmp_1_fu_123_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(tmp_2_fu_152_p2 == 1'b0))) begin
        tmp_11_cast_reg_284[21 : 0] <= tmp_11_cast_fu_172_p1[21 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_fu_137_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == tmp_fu_137_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        imINPUT_ce0 = 1'b1;
    end else begin
        imINPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        imOUTPUT_ce0 = 1'b1;
    end else begin
        imOUTPUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        imOUTPUT_we0 = 1'b1;
    end else begin
        imOUTPUT_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((1'b0 == tmp_fu_137_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((tmp_2_fu_152_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign col_1_fu_157_p2 = (col_reg_112 + ap_const_lv31_1);

assign col_cast_fu_148_p1 = col_reg_112;

assign imINPUT_address0 = tmp_11_cast_fu_172_p1;

assign imOUTPUT_address0 = tmp_11_cast_reg_284;

assign imOUTPUT_d0 = {{{{tmp_12_fu_229_p2}, {tmp_10_fu_213_p2}}, {tmp_8_fu_197_p2}}, {tmp_5_fu_181_p2}};

assign next_mul_fu_127_p2 = (ap_const_lv42_4B0 + phi_mul_reg_101);

assign row_1_fu_142_p2 = (ap_const_lv31_1 + row_reg_90);

assign row_cast_fu_133_p1 = row_reg_90;

assign tmp_10_fu_213_p2 = (tmp_s_fu_203_p4 ^ ap_const_lv8_FF);

assign tmp_11_cast_fu_172_p1 = tmp_4_fu_167_p2;

assign tmp_11_fu_219_p4 = {{imINPUT_q0[ap_const_lv32_1F : ap_const_lv32_18]}};

assign tmp_12_fu_229_p2 = (tmp_11_fu_219_p4 ^ ap_const_lv8_FF);

assign tmp_1_fu_123_p1 = phi_mul_reg_101[21:0];

assign tmp_2_fu_152_p2 = (($signed(col_cast_fu_148_p1) < $signed(imWidth)) ? 1'b1 : 1'b0);

assign tmp_3_fu_163_p1 = col_reg_112[21:0];

assign tmp_4_fu_167_p2 = (tmp_3_fu_163_p1 + tmp_1_reg_258);

assign tmp_5_fu_181_p2 = (tmp_9_fu_177_p1 ^ ap_const_lv8_FF);

assign tmp_7_fu_187_p4 = {{imINPUT_q0[ap_const_lv32_F : ap_const_lv32_8]}};

assign tmp_8_fu_197_p2 = (tmp_7_fu_187_p4 ^ ap_const_lv8_FF);

assign tmp_9_fu_177_p1 = imINPUT_q0[7:0];

assign tmp_fu_137_p2 = (($signed(row_cast_fu_133_p1) < $signed(imHeight)) ? 1'b1 : 1'b0);

assign tmp_s_fu_203_p4 = {{imINPUT_q0[ap_const_lv32_17 : ap_const_lv32_10]}};

always @ (posedge ap_clk) begin
    tmp_11_cast_reg_284[63:22] <= 42'b000000000000000000000000000000000000000000;
end

endmodule //imNegation
