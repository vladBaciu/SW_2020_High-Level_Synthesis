-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imNegation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imINPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imINPUT_ce0 : OUT STD_LOGIC;
    imINPUT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    imOUTPUT_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    imOUTPUT_ce0 : OUT STD_LOGIC;
    imOUTPUT_we0 : OUT STD_LOGIC;
    imOUTPUT_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    imWidth : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of imNegation is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "imNegation,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.590000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=259,HLS_SYN_LUT=286}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv42_4B0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010010110000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_123_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_reg_258 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_127_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul_reg_263 : STD_LOGIC_VECTOR (41 downto 0);
    signal row_1_fu_142_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_1_reg_271 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_1_fu_157_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_1_reg_279 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_11_cast_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_reg_90 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_101 : STD_LOGIC_VECTOR (41 downto 0);
    signal col_reg_112 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_cast_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_cast_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_163_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_fu_167_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_9_fu_177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_187_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_203_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_219_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_197_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_181_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                col_reg_112 <= col_1_reg_279;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_fu_137_p2)))) then 
                col_reg_112 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (tmp_2_fu_152_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_101 <= next_mul_reg_263;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_101 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    row_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (tmp_2_fu_152_p2 = ap_const_lv1_0))) then 
                row_reg_90 <= row_1_reg_271;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                row_reg_90 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                col_1_reg_279 <= col_1_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                next_mul_reg_263 <= next_mul_fu_127_p2;
                row_1_reg_271 <= row_1_fu_142_p2;
                tmp_1_reg_258 <= tmp_1_fu_123_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_2_fu_152_p2 = ap_const_lv1_0)))) then
                    tmp_11_cast_reg_284(21 downto 0) <= tmp_11_cast_fu_172_p1(21 downto 0);
            end if;
        end if;
    end process;
    tmp_11_cast_reg_284(63 downto 22) <= "000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_2_fu_152_p2, tmp_fu_137_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_fu_137_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((tmp_2_fu_152_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_137_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_137_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_137_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_137_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_157_p2 <= std_logic_vector(unsigned(col_reg_112) + unsigned(ap_const_lv31_1));
    col_cast_fu_148_p1 <= std_logic_vector(resize(unsigned(col_reg_112),32));
    imINPUT_address0 <= tmp_11_cast_fu_172_p1(21 - 1 downto 0);

    imINPUT_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            imINPUT_ce0 <= ap_const_logic_1;
        else 
            imINPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imOUTPUT_address0 <= tmp_11_cast_reg_284(21 - 1 downto 0);

    imOUTPUT_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            imOUTPUT_ce0 <= ap_const_logic_1;
        else 
            imOUTPUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imOUTPUT_d0 <= (((tmp_12_fu_229_p2 & tmp_10_fu_213_p2) & tmp_8_fu_197_p2) & tmp_5_fu_181_p2);

    imOUTPUT_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            imOUTPUT_we0 <= ap_const_logic_1;
        else 
            imOUTPUT_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_127_p2 <= std_logic_vector(unsigned(ap_const_lv42_4B0) + unsigned(phi_mul_reg_101));
    row_1_fu_142_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(row_reg_90));
    row_cast_fu_133_p1 <= std_logic_vector(resize(unsigned(row_reg_90),32));
    tmp_10_fu_213_p2 <= (tmp_s_fu_203_p4 xor ap_const_lv8_FF);
    tmp_11_cast_fu_172_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_167_p2),64));
    tmp_11_fu_219_p4 <= imINPUT_q0(31 downto 24);
    tmp_12_fu_229_p2 <= (tmp_11_fu_219_p4 xor ap_const_lv8_FF);
    tmp_1_fu_123_p1 <= phi_mul_reg_101(22 - 1 downto 0);
    tmp_2_fu_152_p2 <= "1" when (signed(col_cast_fu_148_p1) < signed(imWidth)) else "0";
    tmp_3_fu_163_p1 <= col_reg_112(22 - 1 downto 0);
    tmp_4_fu_167_p2 <= std_logic_vector(unsigned(tmp_3_fu_163_p1) + unsigned(tmp_1_reg_258));
    tmp_5_fu_181_p2 <= (tmp_9_fu_177_p1 xor ap_const_lv8_FF);
    tmp_7_fu_187_p4 <= imINPUT_q0(15 downto 8);
    tmp_8_fu_197_p2 <= (tmp_7_fu_187_p4 xor ap_const_lv8_FF);
    tmp_9_fu_177_p1 <= imINPUT_q0(8 - 1 downto 0);
    tmp_fu_137_p2 <= "1" when (signed(row_cast_fu_133_p1) < signed(imHeight)) else "0";
    tmp_s_fu_203_p4 <= imINPUT_q0(23 downto 16);
end behav;
