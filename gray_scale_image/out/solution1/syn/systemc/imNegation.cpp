// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "imNegation.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic imNegation::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic imNegation::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> imNegation::ap_ST_fsm_state1 = "1";
const sc_lv<7> imNegation::ap_ST_fsm_state2 = "10";
const sc_lv<7> imNegation::ap_ST_fsm_state3 = "100";
const sc_lv<7> imNegation::ap_ST_fsm_state4 = "1000";
const sc_lv<7> imNegation::ap_ST_fsm_state5 = "10000";
const sc_lv<7> imNegation::ap_ST_fsm_state6 = "100000";
const sc_lv<7> imNegation::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> imNegation::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> imNegation::ap_const_lv1_1 = "1";
const sc_lv<32> imNegation::ap_const_lv32_1 = "1";
const sc_lv<32> imNegation::ap_const_lv32_2 = "10";
const sc_lv<1> imNegation::ap_const_lv1_0 = "0";
const sc_lv<32> imNegation::ap_const_lv32_5 = "101";
const sc_lv<31> imNegation::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<42> imNegation::ap_const_lv42_0 = "000000000000000000000000000000000000000000";
const sc_lv<32> imNegation::ap_const_lv32_6 = "110";
const sc_lv<32> imNegation::ap_const_lv32_3 = "11";
const sc_lv<32> imNegation::ap_const_lv32_4 = "100";
const sc_lv<42> imNegation::ap_const_lv42_4B0 = "10010110000";
const sc_lv<31> imNegation::ap_const_lv31_1 = "1";
const sc_lv<8> imNegation::ap_const_lv8_FF = "11111111";
const sc_lv<32> imNegation::ap_const_lv32_8 = "1000";
const sc_lv<32> imNegation::ap_const_lv32_F = "1111";
const sc_lv<32> imNegation::ap_const_lv32_10 = "10000";
const sc_lv<32> imNegation::ap_const_lv32_17 = "10111";
const sc_lv<32> imNegation::ap_const_lv32_18 = "11000";
const sc_lv<32> imNegation::ap_const_lv32_1F = "11111";

imNegation::imNegation(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_137_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_137_p2 );

    SC_METHOD(thread_col_1_fu_157_p2);
    sensitive << ( col_reg_112 );

    SC_METHOD(thread_col_cast_fu_148_p1);
    sensitive << ( col_reg_112 );

    SC_METHOD(thread_imINPUT_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_11_cast_fu_172_p1 );

    SC_METHOD(thread_imINPUT_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_imOUTPUT_address0);
    sensitive << ( tmp_11_cast_reg_284 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_imOUTPUT_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_imOUTPUT_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_12_fu_229_p2 );
    sensitive << ( tmp_10_fu_213_p2 );
    sensitive << ( tmp_8_fu_197_p2 );
    sensitive << ( tmp_5_fu_181_p2 );

    SC_METHOD(thread_imOUTPUT_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_next_mul_fu_127_p2);
    sensitive << ( phi_mul_reg_101 );

    SC_METHOD(thread_row_1_fu_142_p2);
    sensitive << ( row_reg_90 );

    SC_METHOD(thread_row_cast_fu_133_p1);
    sensitive << ( row_reg_90 );

    SC_METHOD(thread_tmp_10_fu_213_p2);
    sensitive << ( tmp_s_fu_203_p4 );

    SC_METHOD(thread_tmp_11_cast_fu_172_p1);
    sensitive << ( tmp_4_fu_167_p2 );

    SC_METHOD(thread_tmp_11_fu_219_p4);
    sensitive << ( imINPUT_q0 );

    SC_METHOD(thread_tmp_12_fu_229_p2);
    sensitive << ( tmp_11_fu_219_p4 );

    SC_METHOD(thread_tmp_1_fu_123_p1);
    sensitive << ( phi_mul_reg_101 );

    SC_METHOD(thread_tmp_2_fu_152_p2);
    sensitive << ( imWidth );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( col_cast_fu_148_p1 );

    SC_METHOD(thread_tmp_3_fu_163_p1);
    sensitive << ( col_reg_112 );

    SC_METHOD(thread_tmp_4_fu_167_p2);
    sensitive << ( tmp_1_reg_258 );
    sensitive << ( tmp_3_fu_163_p1 );

    SC_METHOD(thread_tmp_5_fu_181_p2);
    sensitive << ( tmp_9_fu_177_p1 );

    SC_METHOD(thread_tmp_7_fu_187_p4);
    sensitive << ( imINPUT_q0 );

    SC_METHOD(thread_tmp_8_fu_197_p2);
    sensitive << ( tmp_7_fu_187_p4 );

    SC_METHOD(thread_tmp_9_fu_177_p1);
    sensitive << ( imINPUT_q0 );

    SC_METHOD(thread_tmp_fu_137_p2);
    sensitive << ( imHeight );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( row_cast_fu_133_p1 );

    SC_METHOD(thread_tmp_s_fu_203_p4);
    sensitive << ( imINPUT_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_fu_152_p2 );
    sensitive << ( tmp_fu_137_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "imNegation_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, imINPUT_address0, "(port)imINPUT_address0");
    sc_trace(mVcdFile, imINPUT_ce0, "(port)imINPUT_ce0");
    sc_trace(mVcdFile, imINPUT_q0, "(port)imINPUT_q0");
    sc_trace(mVcdFile, imOUTPUT_address0, "(port)imOUTPUT_address0");
    sc_trace(mVcdFile, imOUTPUT_ce0, "(port)imOUTPUT_ce0");
    sc_trace(mVcdFile, imOUTPUT_we0, "(port)imOUTPUT_we0");
    sc_trace(mVcdFile, imOUTPUT_d0, "(port)imOUTPUT_d0");
    sc_trace(mVcdFile, imHeight, "(port)imHeight");
    sc_trace(mVcdFile, imWidth, "(port)imWidth");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_1_fu_123_p1, "tmp_1_fu_123_p1");
    sc_trace(mVcdFile, tmp_1_reg_258, "tmp_1_reg_258");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, next_mul_fu_127_p2, "next_mul_fu_127_p2");
    sc_trace(mVcdFile, next_mul_reg_263, "next_mul_reg_263");
    sc_trace(mVcdFile, row_1_fu_142_p2, "row_1_fu_142_p2");
    sc_trace(mVcdFile, row_1_reg_271, "row_1_reg_271");
    sc_trace(mVcdFile, col_1_fu_157_p2, "col_1_fu_157_p2");
    sc_trace(mVcdFile, col_1_reg_279, "col_1_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_11_cast_fu_172_p1, "tmp_11_cast_fu_172_p1");
    sc_trace(mVcdFile, tmp_11_cast_reg_284, "tmp_11_cast_reg_284");
    sc_trace(mVcdFile, tmp_2_fu_152_p2, "tmp_2_fu_152_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, row_reg_90, "row_reg_90");
    sc_trace(mVcdFile, phi_mul_reg_101, "phi_mul_reg_101");
    sc_trace(mVcdFile, col_reg_112, "col_reg_112");
    sc_trace(mVcdFile, tmp_fu_137_p2, "tmp_fu_137_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, row_cast_fu_133_p1, "row_cast_fu_133_p1");
    sc_trace(mVcdFile, col_cast_fu_148_p1, "col_cast_fu_148_p1");
    sc_trace(mVcdFile, tmp_3_fu_163_p1, "tmp_3_fu_163_p1");
    sc_trace(mVcdFile, tmp_4_fu_167_p2, "tmp_4_fu_167_p2");
    sc_trace(mVcdFile, tmp_9_fu_177_p1, "tmp_9_fu_177_p1");
    sc_trace(mVcdFile, tmp_7_fu_187_p4, "tmp_7_fu_187_p4");
    sc_trace(mVcdFile, tmp_s_fu_203_p4, "tmp_s_fu_203_p4");
    sc_trace(mVcdFile, tmp_11_fu_219_p4, "tmp_11_fu_219_p4");
    sc_trace(mVcdFile, tmp_12_fu_229_p2, "tmp_12_fu_229_p2");
    sc_trace(mVcdFile, tmp_10_fu_213_p2, "tmp_10_fu_213_p2");
    sc_trace(mVcdFile, tmp_8_fu_197_p2, "tmp_8_fu_197_p2");
    sc_trace(mVcdFile, tmp_5_fu_181_p2, "tmp_5_fu_181_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("imNegation.hdltvin.dat");
    mHdltvoutHandle.open("imNegation.hdltvout.dat");
}

imNegation::~imNegation() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void imNegation::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        col_reg_112 = col_1_reg_279.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_137_p2.read()))) {
        col_reg_112 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_152_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_101 = next_mul_reg_263.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        phi_mul_reg_101 = ap_const_lv42_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_152_p2.read(), ap_const_lv1_0))) {
        row_reg_90 = row_1_reg_271.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        row_reg_90 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        col_1_reg_279 = col_1_fu_157_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        next_mul_reg_263 = next_mul_fu_127_p2.read();
        row_1_reg_271 = row_1_fu_142_p2.read();
        tmp_1_reg_258 = tmp_1_fu_123_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && !esl_seteq<1,1,1>(tmp_2_fu_152_p2.read(), ap_const_lv1_0))) {
        tmp_11_cast_reg_284 = tmp_11_cast_fu_172_p1.read();
    }
}

void imNegation::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void imNegation::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void imNegation::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void imNegation::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void imNegation::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void imNegation::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void imNegation::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void imNegation::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_137_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void imNegation::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void imNegation::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_137_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void imNegation::thread_col_1_fu_157_p2() {
    col_1_fu_157_p2 = (!col_reg_112.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(col_reg_112.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void imNegation::thread_col_cast_fu_148_p1() {
    col_cast_fu_148_p1 = esl_zext<32,31>(col_reg_112.read());
}

void imNegation::thread_imINPUT_address0() {
    imINPUT_address0 =  (sc_lv<21>) (tmp_11_cast_fu_172_p1.read());
}

void imNegation::thread_imINPUT_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())))) {
        imINPUT_ce0 = ap_const_logic_1;
    } else {
        imINPUT_ce0 = ap_const_logic_0;
    }
}

void imNegation::thread_imOUTPUT_address0() {
    imOUTPUT_address0 =  (sc_lv<21>) (tmp_11_cast_reg_284.read());
}

void imNegation::thread_imOUTPUT_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        imOUTPUT_ce0 = ap_const_logic_1;
    } else {
        imOUTPUT_ce0 = ap_const_logic_0;
    }
}

void imNegation::thread_imOUTPUT_d0() {
    imOUTPUT_d0 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(tmp_12_fu_229_p2.read(), tmp_10_fu_213_p2.read()), tmp_8_fu_197_p2.read()), tmp_5_fu_181_p2.read());
}

void imNegation::thread_imOUTPUT_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())))) {
        imOUTPUT_we0 = ap_const_logic_1;
    } else {
        imOUTPUT_we0 = ap_const_logic_0;
    }
}

void imNegation::thread_next_mul_fu_127_p2() {
    next_mul_fu_127_p2 = (!ap_const_lv42_4B0.is_01() || !phi_mul_reg_101.read().is_01())? sc_lv<42>(): (sc_biguint<42>(ap_const_lv42_4B0) + sc_biguint<42>(phi_mul_reg_101.read()));
}

void imNegation::thread_row_1_fu_142_p2() {
    row_1_fu_142_p2 = (!ap_const_lv31_1.is_01() || !row_reg_90.read().is_01())? sc_lv<31>(): (sc_biguint<31>(ap_const_lv31_1) + sc_biguint<31>(row_reg_90.read()));
}

void imNegation::thread_row_cast_fu_133_p1() {
    row_cast_fu_133_p1 = esl_zext<32,31>(row_reg_90.read());
}

void imNegation::thread_tmp_10_fu_213_p2() {
    tmp_10_fu_213_p2 = (tmp_s_fu_203_p4.read() ^ ap_const_lv8_FF);
}

void imNegation::thread_tmp_11_cast_fu_172_p1() {
    tmp_11_cast_fu_172_p1 = esl_zext<64,22>(tmp_4_fu_167_p2.read());
}

void imNegation::thread_tmp_11_fu_219_p4() {
    tmp_11_fu_219_p4 = imINPUT_q0.read().range(31, 24);
}

void imNegation::thread_tmp_12_fu_229_p2() {
    tmp_12_fu_229_p2 = (tmp_11_fu_219_p4.read() ^ ap_const_lv8_FF);
}

void imNegation::thread_tmp_1_fu_123_p1() {
    tmp_1_fu_123_p1 = phi_mul_reg_101.read().range(22-1, 0);
}

void imNegation::thread_tmp_2_fu_152_p2() {
    tmp_2_fu_152_p2 = (!col_cast_fu_148_p1.read().is_01() || !imWidth.read().is_01())? sc_lv<1>(): (sc_bigint<32>(col_cast_fu_148_p1.read()) < sc_bigint<32>(imWidth.read()));
}

void imNegation::thread_tmp_3_fu_163_p1() {
    tmp_3_fu_163_p1 = col_reg_112.read().range(22-1, 0);
}

void imNegation::thread_tmp_4_fu_167_p2() {
    tmp_4_fu_167_p2 = (!tmp_3_fu_163_p1.read().is_01() || !tmp_1_reg_258.read().is_01())? sc_lv<22>(): (sc_biguint<22>(tmp_3_fu_163_p1.read()) + sc_biguint<22>(tmp_1_reg_258.read()));
}

void imNegation::thread_tmp_5_fu_181_p2() {
    tmp_5_fu_181_p2 = (tmp_9_fu_177_p1.read() ^ ap_const_lv8_FF);
}

void imNegation::thread_tmp_7_fu_187_p4() {
    tmp_7_fu_187_p4 = imINPUT_q0.read().range(15, 8);
}

void imNegation::thread_tmp_8_fu_197_p2() {
    tmp_8_fu_197_p2 = (tmp_7_fu_187_p4.read() ^ ap_const_lv8_FF);
}

void imNegation::thread_tmp_9_fu_177_p1() {
    tmp_9_fu_177_p1 = imINPUT_q0.read().range(8-1, 0);
}

void imNegation::thread_tmp_fu_137_p2() {
    tmp_fu_137_p2 = (!row_cast_fu_133_p1.read().is_01() || !imHeight.read().is_01())? sc_lv<1>(): (sc_bigint<32>(row_cast_fu_133_p1.read()) < sc_bigint<32>(imHeight.read()));
}

void imNegation::thread_tmp_s_fu_203_p4() {
    tmp_s_fu_203_p4 = imINPUT_q0.read().range(23, 16);
}

void imNegation::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_137_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(tmp_2_fu_152_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void imNegation::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imINPUT_address0\" :  \"" << imINPUT_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imINPUT_ce0\" :  \"" << imINPUT_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"imINPUT_q0\" :  \"" << imINPUT_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imOUTPUT_address0\" :  \"" << imOUTPUT_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imOUTPUT_ce0\" :  \"" << imOUTPUT_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imOUTPUT_we0\" :  \"" << imOUTPUT_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imOUTPUT_d0\" :  \"" << imOUTPUT_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"imHeight\" :  \"" << imHeight.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"imWidth\" :  \"" << imWidth.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

