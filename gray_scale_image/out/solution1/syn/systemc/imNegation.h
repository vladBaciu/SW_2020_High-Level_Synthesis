// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _imNegation_HH_
#define _imNegation_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct imNegation : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<21> > imINPUT_address0;
    sc_out< sc_logic > imINPUT_ce0;
    sc_in< sc_lv<32> > imINPUT_q0;
    sc_out< sc_lv<21> > imOUTPUT_address0;
    sc_out< sc_logic > imOUTPUT_ce0;
    sc_out< sc_logic > imOUTPUT_we0;
    sc_out< sc_lv<32> > imOUTPUT_d0;
    sc_in< sc_lv<32> > imHeight;
    sc_in< sc_lv<32> > imWidth;


    // Module declarations
    imNegation(sc_module_name name);
    SC_HAS_PROCESS(imNegation);

    ~imNegation();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<22> > tmp_1_fu_123_p1;
    sc_signal< sc_lv<22> > tmp_1_reg_258;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<42> > next_mul_fu_127_p2;
    sc_signal< sc_lv<42> > next_mul_reg_263;
    sc_signal< sc_lv<31> > row_1_fu_142_p2;
    sc_signal< sc_lv<31> > row_1_reg_271;
    sc_signal< sc_lv<31> > col_1_fu_157_p2;
    sc_signal< sc_lv<31> > col_1_reg_279;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_172_p1;
    sc_signal< sc_lv<64> > tmp_11_cast_reg_284;
    sc_signal< sc_lv<1> > tmp_2_fu_152_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state6;
    sc_signal< sc_lv<31> > row_reg_90;
    sc_signal< sc_lv<42> > phi_mul_reg_101;
    sc_signal< sc_lv<31> > col_reg_112;
    sc_signal< sc_lv<1> > tmp_fu_137_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > row_cast_fu_133_p1;
    sc_signal< sc_lv<32> > col_cast_fu_148_p1;
    sc_signal< sc_lv<22> > tmp_3_fu_163_p1;
    sc_signal< sc_lv<22> > tmp_4_fu_167_p2;
    sc_signal< sc_lv<8> > tmp_9_fu_177_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_187_p4;
    sc_signal< sc_lv<8> > tmp_s_fu_203_p4;
    sc_signal< sc_lv<8> > tmp_11_fu_219_p4;
    sc_signal< sc_lv<8> > tmp_12_fu_229_p2;
    sc_signal< sc_lv<8> > tmp_10_fu_213_p2;
    sc_signal< sc_lv<8> > tmp_8_fu_197_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_181_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<42> ap_const_lv42_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<42> ap_const_lv42_4B0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_col_1_fu_157_p2();
    void thread_col_cast_fu_148_p1();
    void thread_imINPUT_address0();
    void thread_imINPUT_ce0();
    void thread_imOUTPUT_address0();
    void thread_imOUTPUT_ce0();
    void thread_imOUTPUT_d0();
    void thread_imOUTPUT_we0();
    void thread_next_mul_fu_127_p2();
    void thread_row_1_fu_142_p2();
    void thread_row_cast_fu_133_p1();
    void thread_tmp_10_fu_213_p2();
    void thread_tmp_11_cast_fu_172_p1();
    void thread_tmp_11_fu_219_p4();
    void thread_tmp_12_fu_229_p2();
    void thread_tmp_1_fu_123_p1();
    void thread_tmp_2_fu_152_p2();
    void thread_tmp_3_fu_163_p1();
    void thread_tmp_4_fu_167_p2();
    void thread_tmp_5_fu_181_p2();
    void thread_tmp_7_fu_187_p4();
    void thread_tmp_8_fu_197_p2();
    void thread_tmp_9_fu_177_p1();
    void thread_tmp_fu_137_p2();
    void thread_tmp_s_fu_203_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
